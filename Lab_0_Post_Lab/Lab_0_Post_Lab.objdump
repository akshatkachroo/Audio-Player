
Lab_0_Post_Lab.elf:     file format elf32-littlenios2
Lab_0_Post_Lab.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800248

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000073d8 memsz 0x000073d8 flags r-x
    LOAD off    0x000083f8 vaddr 0x008073f8 paddr 0x008090b0 align 2**12
         filesz 0x00001cb8 memsz 0x00001cb8 flags rw-
    LOAD off    0x0000ad68 vaddr 0x0080ad68 paddr 0x0080ad68 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006e9c  00800248  00800248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000314  008070e4  008070e4  000080e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb8  008073f8  008090b0  000083f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0080ad68  0080ad68  0000ad68  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  0080aebc  0080aebc  0000a0b0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b28  00000000  00000000  0000a0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001835d  00000000  00000000  0000ac00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000069bf  00000000  00000000  00022f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007743  00000000  00000000  0002991c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000191c  00000000  00000000  00031060  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e18  00000000  00000000  0003297c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  00035794  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0003a1e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000698  00000000  00000000  0003a240  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003d33a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003d33d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003d349  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003d34a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003d34b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003d34f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003d353  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003d357  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003d362  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003d36d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0003d378  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000024  00000000  00000000  0003d37b  2**0
                  CONTENTS, READONLY
 29 .jdi          00004a3a  00000000  00000000  0003d39f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008f4d2  00000000  00000000  00041dd9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800248 l    d  .text	00000000 .text
008070e4 l    d  .rodata	00000000 .rodata
008073f8 l    d  .rwdata	00000000 .rwdata
0080ad68 l    d  .bss	00000000 .bss
0080aebc l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab_0_Post_Lab_bsp//obj/HAL/src/crt0.o
00800290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0080047c l     F .text	00000008 __fp_unlock
00800490 l     F .text	0000019c __sinit.part.1
0080062c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008073f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
008030d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008031e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00803210 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
008032fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008033dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008034c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080369c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00809098 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
008038e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00803a1c l     F .text	00000034 alt_dev_reg
00807dcc l     O .rwdata	00001060 jtag_uart_0
00808e2c l     O .rwdata	00000120 lcd_display
00808f4c l     O .rwdata	000000c4 uart
00809010 l     O .rwdata	00000030 audio_i2c_config
00809040 l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00803d54 l     F .text	00000210 altera_avalon_jtag_uart_irq
00803f64 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080909c l     O .rwdata	00000004 colstart
0080459c l     F .text	000000b8 lcd_write_command
00804654 l     F .text	000000d8 lcd_write_data
0080472c l     F .text	000000d0 lcd_clear_screen
008047fc l     F .text	000001ec lcd_repaint_screen
008049e8 l     F .text	000000cc lcd_scroll_up
00804ab4 l     F .text	000002ac lcd_handle_escape
00805238 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00805478 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080571c l     F .text	000000a0 altera_avalon_uart_irq
008057bc l     F .text	000000e4 altera_avalon_uart_rxirq
008058a0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00805a3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00805c54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00805fb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00806184 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00806444 l     F .text	0000003c alt_get_errno
00806480 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00807278 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080ad90 g     O .bss	00000004 alt_instruction_exception_handler
00802ed0 g     F .text	00000054 _isatty_r
008035d8 g     F .text	0000007c alt_main
00800310 g     F .text	000000c0 _puts_r
0080adbc g     O .bss	00000100 alt_irq
00802bf8 g     F .text	00000060 _lseek_r
008090b0 g       *ABS*	00000000 __flash_rwdata_start
0080aebc g       *ABS*	00000000 __alt_heap_start
008021ac g     F .text	0000005c __sseek
008007cc g     F .text	00000010 __sinit
00800634 g     F .text	00000068 __sfmoreglue
00803678 g     F .text	00000024 __malloc_unlock
00801898 g     F .text	0000015c memmove
008007b4 g     F .text	00000018 _cleanup
0080686c g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00802e74 g     F .text	0000005c _fstat_r
0080ad74 g     O .bss	00000004 errno
00802128 g     F .text	00000008 __seofread
0080ad7c g     O .bss	00000004 alt_argv
00811070 g       *ABS*	00000000 _gp
0080683c g     F .text	00000030 usleep
00807c4c g     O .rwdata	00000180 alt_fd_list
008069e8 g     F .text	00000090 alt_find_dev
00801750 g     F .text	00000148 memcpy
00800484 g     F .text	0000000c _cleanup_r
00806248 g     F .text	0000007c alt_io_redirect
008070e4 g       *ABS*	00000000 __DTOR_END__
008003d0 g     F .text	00000014 puts
00806cb4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080415c g     F .text	0000021c altera_avalon_jtag_uart_read
0080301c g     F .text	00000064 .hidden __udivsi3
00803338 g     F .text	000000a4 isatty
00806c24 g     F .text	00000090 alt_icache_flush
0080ad70 g     O .bss	00000004 __malloc_top_pad
0080081c g     F .text	000004bc __sfvwrite_r
00802080 g     F .text	00000054 _sbrk_r
00802e14 g     F .text	00000060 _read_r
00809090 g     O .rwdata	00000004 alt_max_fd
00802418 g     F .text	000000f0 _fclose_r
00802794 g     F .text	00000030 fflush
0080ad6c g     O .bss	00000004 __malloc_max_sbrked_mem
008062c4 g     F .text	00000180 alt_irq_register
00803504 g     F .text	000000d4 lseek
00809070 g     O .rwdata	00000004 _global_impure_ptr
00801b1c g     F .text	00000564 _realloc_r
0080aebc g       *ABS*	00000000 __bss_end
00806734 g     F .text	00000108 alt_tick
00805678 g     F .text	000000a4 altera_avalon_uart_init
008007ec g     F .text	00000018 __fp_lock_all
00806698 g     F .text	0000009c alt_alarm_stop
0080ad84 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d8 alt_irq_handler
00807c24 g     O .rwdata	00000028 alt_dev_null
00805f68 g     F .text	00000048 alt_dcache_flush_all
008090b0 g       *ABS*	00000000 __ram_rwdata_end
00809088 g     O .rwdata	00000008 alt_dev_list
00803924 g     F .text	000000f8 write
008073f8 g       *ABS*	00000000 __ram_rodata_end
0080324c g     F .text	000000b0 fstat
00803080 g     F .text	00000058 .hidden __umodsi3
0080aebc g       *ABS*	00000000 end
00804d60 g     F .text	000004d8 altera_avalon_lcd_16207_write
00805c90 g     F .text	000001ac altera_avalon_uart_write
00803ca0 g     F .text	000000b4 altera_avalon_jtag_uart_init
008001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
008070e4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008054f4 g     F .text	00000074 alt_avalon_timer_sc_init
008055c8 g     F .text	00000060 altera_avalon_uart_write_fd
00805628 g     F .text	00000050 altera_avalon_uart_close_fd
00804378 g     F .text	00000224 altera_avalon_jtag_uart_write
008007dc g     F .text	00000004 __sfp_lock_acquire
0080166c g     F .text	000000e4 memchr
008028e8 g     F .text	00000310 _free_r
00806f30 g     F .text	00000180 __call_exitprocs
00809078 g     O .rwdata	00000004 __malloc_sbrk_base
00800248 g     F .text	0000004c _start
0080ad88 g     O .bss	00000004 _alt_tick_rate
0080ad8c g     O .bss	00000004 _alt_nticks
008036d8 g     F .text	000000fc read
00803a88 g     F .text	000000b4 alt_sys_init
00806e18 g     F .text	00000118 __register_exitproc
00804004 g     F .text	00000068 altera_avalon_jtag_uart_close
008073f8 g       *ABS*	00000000 __ram_rwdata_start
008070e4 g       *ABS*	00000000 __ram_rodata_start
0080ad94 g     O .bss	00000028 __malloc_current_mallinfo
00803b3c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00806b80 g     F .text	000000a4 alt_get_fd
00806890 g     F .text	00000158 alt_busy_sleep
008023c4 g     F .text	00000054 _close_r
00806d9c g     F .text	0000007c memcmp
00803bfc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0080aebc g       *ABS*	00000000 __alt_stack_base
00803c4c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00802270 g     F .text	00000154 __swsetup_r
0080069c g     F .text	00000118 __sfp
0080781c g     O .rwdata	00000408 __malloc_av_
008007e8 g     F .text	00000004 __sinit_lock_release
008020d4 g     F .text	00000054 __sread
00806a78 g     F .text	00000108 alt_find_file
00805fec g     F .text	000000a4 alt_dev_llist_insert
00803654 g     F .text	00000024 __malloc_lock
00803838 g     F .text	000000b0 sbrk
00802738 g     F .text	0000005c _fflush_r
0080ad68 g       *ABS*	00000000 __bss_start
008019f4 g     F .text	00000128 memset
00800294 g     F .text	0000007c main
0080ad80 g     O .bss	00000004 alt_envp
0080ad68 g     O .bss	00000004 __malloc_max_total_mem
00803b9c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008052e4 g     F .text	00000134 altera_avalon_lcd_16207_init
00802208 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802508 g     F .text	00000014 fclose
00800e60 g     F .text	0000080c _malloc_r
00809094 g     O .rwdata	00000004 alt_errno
00800cd8 g     F .text	000000c4 _fwalk
00802f24 g     F .text	00000084 .hidden __divsi3
008027c4 g     F .text	00000124 _malloc_trim_r
008070e4 g       *ABS*	00000000 __CTOR_END__
008070e4 g       *ABS*	00000000 __flash_rodata_start
008070e4 g       *ABS*	00000000 __DTOR_LIST__
00803a50 g     F .text	00000038 alt_irq_init
008037d4 g     F .text	00000064 alt_release_fd
00806d50 g     F .text	00000014 atexit
00802210 g     F .text	00000060 _write_r
00809074 g     O .rwdata	00000004 _impure_ptr
0080ad78 g     O .bss	00000004 alt_argc
0080251c g     F .text	0000021c __sflush_r
008060f0 g     F .text	00000060 _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00800804 g     F .text	00000018 __fp_unlock_all
00805418 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00809080 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008090b0 g       *ABS*	00000000 _edata
00805568 g     F .text	00000060 altera_avalon_uart_read_fd
0080aebc g       *ABS*	00000000 _end
00800248 g       *ABS*	00000000 __ram_exceptions_end
0080406c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00802130 g     F .text	0000007c __swrite
0080907c g     O .rwdata	00000004 __malloc_trim_threshold
00806d64 g     F .text	00000038 exit
00800d9c g     F .text	000000c4 _fwalk_reent
00802fa8 g     F .text	00000074 .hidden __modsi3
008090ac g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008007e0 g     F .text	00000004 __sfp_lock_release
00807177 g     O .rodata	00000101 _ctype_
008059e8 g     F .text	00000054 altera_avalon_uart_close
008070b0 g     F .text	00000034 _exit
00805e3c g     F .text	0000012c alt_alarm_start
00802c58 g     F .text	000001bc __smakebuf_r
008003e4 g     F .text	00000098 strlen
00806544 g     F .text	00000154 open
00806150 g     F .text	00000034 alt_icache_flush_all
008090a0 g     O .rwdata	00000004 alt_priority_mask
00805a78 g     F .text	000001dc altera_avalon_uart_read
008090a4 g     O .rwdata	00000008 alt_alarm_list
00806090 g     F .text	00000060 _do_ctors
00803114 g     F .text	000000d0 close
00803444 g     F .text	00000084 alt_load
008007e4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409214 	ori	at,at,584
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d40 	call	8001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802074 	movhi	r2,129
  800140:	10ab6f04 	addi	r2,r2,-21060
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10ab6f04 	addi	r2,r2,-21060
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	e17ffd17 	ldw	r5,-12(fp)
  800174:	1009883a 	mov	r4,r2
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	0001883a 	nop
  8001c0:	e037883a 	mov	sp,fp
  8001c4:	dfc00117 	ldw	ra,4(sp)
  8001c8:	df000017 	ldw	fp,0(sp)
  8001cc:	dec00204 	addi	sp,sp,8
  8001d0:	f800283a 	ret

008001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d4:	defffb04 	addi	sp,sp,-20
  8001d8:	dfc00415 	stw	ra,16(sp)
  8001dc:	df000315 	stw	fp,12(sp)
  8001e0:	df000304 	addi	fp,sp,12
  8001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e8:	000531fa 	rdctl	r2,exception
  8001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001f0:	e0bffd17 	ldw	r2,-12(fp)
  8001f4:	10801f0c 	andi	r2,r2,124
  8001f8:	1004d0ba 	srli	r2,r2,2
  8001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  800200:	0005333a 	rdctl	r2,badaddr
  800204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800208:	d0a74817 	ldw	r2,-25312(gp)
  80020c:	10000726 	beq	r2,zero,80022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800210:	d0a74817 	ldw	r2,-25312(gp)
  800214:	e0fffd17 	ldw	r3,-12(fp)
  800218:	e1bffe17 	ldw	r6,-8(fp)
  80021c:	e17fff17 	ldw	r5,-4(fp)
  800220:	1809883a 	mov	r4,r3
  800224:	103ee83a 	callr	r2
  800228:	00000206 	br	800234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800230:	0005883a 	mov	r2,zero
}
  800234:	e037883a 	mov	sp,fp
  800238:	dfc00117 	ldw	ra,4(sp)
  80023c:	df000017 	ldw	fp,0(sp)
  800240:	dec00204 	addi	sp,sp,8
  800244:	f800283a 	ret

Disassembly of section .text:

00800248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800254:	00bffd16 	blt	zero,r2,80024c <__alt_data_end+0xff80024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800258:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800260:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800264:	d6841c14 	ori	gp,gp,4208
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800268:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  80026c:	10ab5a14 	ori	r2,r2,44392

    movhi r3, %hi(__bss_end)
  800270:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800274:	18ebaf14 	ori	r3,r3,44732

    beq r2, r3, 1f
  800278:	10c00326 	beq	r2,r3,800288 <_start+0x40>

0:
    stw zero, (r2)
  80027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800284:	10fffd36 	bltu	r2,r3,80027c <__alt_data_end+0xff80027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800288:	08034440 	call	803444 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80028c:	08035d80 	call	8035d8 <alt_main>

00800290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800290:	003fff06 	br	800290 <__alt_data_end+0xff800290>

00800294 <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{
  800294:	defffb04 	addi	sp,sp,-20
  800298:	dfc00415 	stw	ra,16(sp)
  80029c:	df000315 	stw	fp,12(sp)
  8002a0:	df000304 	addi	fp,sp,12
  printf("Hello from Nios II!\n");
  8002a4:	01002034 	movhi	r4,128
  8002a8:	211c3904 	addi	r4,r4,28900
  8002ac:	08003d00 	call	8003d0 <puts>

  while(1){
	  //IOWR(LED_PIO_BASE,0, 0x0);
	  int buttons = IORD(BUTTON_PIO_BASE,0);
  8002b0:	00804034 	movhi	r2,256
  8002b4:	10844804 	addi	r2,r2,4384
  8002b8:	10800037 	ldwio	r2,0(r2)
  8002bc:	e0bffd15 	stw	r2,-12(fp)

	  buttons = (0b1111 & (~buttons));
  8002c0:	e0bffd17 	ldw	r2,-12(fp)
  8002c4:	0084303a 	nor	r2,zero,r2
  8002c8:	108003cc 	andi	r2,r2,15
  8002cc:	e0bffd15 	stw	r2,-12(fp)

	  //printf("buttons: %d", buttons);
	  int switches = IORD(SWITCH_PIO_BASE, 0);
  8002d0:	00804034 	movhi	r2,256
  8002d4:	10844404 	addi	r2,r2,4368
  8002d8:	10800037 	ldwio	r2,0(r2)
  8002dc:	e0bffe15 	stw	r2,-8(fp)
	  //printf("switches: %d", switches);

	  switches &= 0b1111;
  8002e0:	e0bffe17 	ldw	r2,-8(fp)
  8002e4:	108003cc 	andi	r2,r2,15
  8002e8:	e0bffe15 	stw	r2,-8(fp)

	  int led_val = switches | buttons;
  8002ec:	e0fffe17 	ldw	r3,-8(fp)
  8002f0:	e0bffd17 	ldw	r2,-12(fp)
  8002f4:	1884b03a 	or	r2,r3,r2
  8002f8:	e0bfff15 	stw	r2,-4(fp)

	  //printf(" %d", led_val);
	  IOWR(LED_PIO_BASE,0, led_val);
  8002fc:	00804034 	movhi	r2,256
  800300:	10844c04 	addi	r2,r2,4400
  800304:	e0ffff17 	ldw	r3,-4(fp)
  800308:	10c00035 	stwio	r3,0(r2)
  }
  80030c:	003fe806 	br	8002b0 <__alt_data_end+0xff8002b0>

00800310 <_puts_r>:
  800310:	defff604 	addi	sp,sp,-40
  800314:	dc000715 	stw	r16,28(sp)
  800318:	2021883a 	mov	r16,r4
  80031c:	2809883a 	mov	r4,r5
  800320:	dc400815 	stw	r17,32(sp)
  800324:	dfc00915 	stw	ra,36(sp)
  800328:	2823883a 	mov	r17,r5
  80032c:	08003e40 	call	8003e4 <strlen>
  800330:	10c00044 	addi	r3,r2,1
  800334:	d8800115 	stw	r2,4(sp)
  800338:	00802034 	movhi	r2,128
  80033c:	109c3e04 	addi	r2,r2,28920
  800340:	d8800215 	stw	r2,8(sp)
  800344:	00800044 	movi	r2,1
  800348:	d8800315 	stw	r2,12(sp)
  80034c:	00800084 	movi	r2,2
  800350:	dc400015 	stw	r17,0(sp)
  800354:	d8c00615 	stw	r3,24(sp)
  800358:	dec00415 	stw	sp,16(sp)
  80035c:	d8800515 	stw	r2,20(sp)
  800360:	80000226 	beq	r16,zero,80036c <_puts_r+0x5c>
  800364:	80800e17 	ldw	r2,56(r16)
  800368:	10001426 	beq	r2,zero,8003bc <_puts_r+0xac>
  80036c:	81400217 	ldw	r5,8(r16)
  800370:	2880030b 	ldhu	r2,12(r5)
  800374:	10c8000c 	andi	r3,r2,8192
  800378:	1800061e 	bne	r3,zero,800394 <_puts_r+0x84>
  80037c:	29001917 	ldw	r4,100(r5)
  800380:	00f7ffc4 	movi	r3,-8193
  800384:	10880014 	ori	r2,r2,8192
  800388:	20c6703a 	and	r3,r4,r3
  80038c:	2880030d 	sth	r2,12(r5)
  800390:	28c01915 	stw	r3,100(r5)
  800394:	d9800404 	addi	r6,sp,16
  800398:	8009883a 	mov	r4,r16
  80039c:	080081c0 	call	80081c <__sfvwrite_r>
  8003a0:	1000091e 	bne	r2,zero,8003c8 <_puts_r+0xb8>
  8003a4:	00800284 	movi	r2,10
  8003a8:	dfc00917 	ldw	ra,36(sp)
  8003ac:	dc400817 	ldw	r17,32(sp)
  8003b0:	dc000717 	ldw	r16,28(sp)
  8003b4:	dec00a04 	addi	sp,sp,40
  8003b8:	f800283a 	ret
  8003bc:	8009883a 	mov	r4,r16
  8003c0:	08007cc0 	call	8007cc <__sinit>
  8003c4:	003fe906 	br	80036c <__alt_data_end+0xff80036c>
  8003c8:	00bfffc4 	movi	r2,-1
  8003cc:	003ff606 	br	8003a8 <__alt_data_end+0xff8003a8>

008003d0 <puts>:
  8003d0:	00802074 	movhi	r2,129
  8003d4:	10a41d04 	addi	r2,r2,-28556
  8003d8:	200b883a 	mov	r5,r4
  8003dc:	11000017 	ldw	r4,0(r2)
  8003e0:	08003101 	jmpi	800310 <_puts_r>

008003e4 <strlen>:
  8003e4:	208000cc 	andi	r2,r4,3
  8003e8:	10002026 	beq	r2,zero,80046c <strlen+0x88>
  8003ec:	20800007 	ldb	r2,0(r4)
  8003f0:	10002026 	beq	r2,zero,800474 <strlen+0x90>
  8003f4:	2005883a 	mov	r2,r4
  8003f8:	00000206 	br	800404 <strlen+0x20>
  8003fc:	10c00007 	ldb	r3,0(r2)
  800400:	18001826 	beq	r3,zero,800464 <strlen+0x80>
  800404:	10800044 	addi	r2,r2,1
  800408:	10c000cc 	andi	r3,r2,3
  80040c:	183ffb1e 	bne	r3,zero,8003fc <__alt_data_end+0xff8003fc>
  800410:	10c00017 	ldw	r3,0(r2)
  800414:	01ffbff4 	movhi	r7,65279
  800418:	39ffbfc4 	addi	r7,r7,-257
  80041c:	00ca303a 	nor	r5,zero,r3
  800420:	01a02074 	movhi	r6,32897
  800424:	19c7883a 	add	r3,r3,r7
  800428:	31a02004 	addi	r6,r6,-32640
  80042c:	1946703a 	and	r3,r3,r5
  800430:	1986703a 	and	r3,r3,r6
  800434:	1800091e 	bne	r3,zero,80045c <strlen+0x78>
  800438:	10800104 	addi	r2,r2,4
  80043c:	10c00017 	ldw	r3,0(r2)
  800440:	19cb883a 	add	r5,r3,r7
  800444:	00c6303a 	nor	r3,zero,r3
  800448:	28c6703a 	and	r3,r5,r3
  80044c:	1986703a 	and	r3,r3,r6
  800450:	183ff926 	beq	r3,zero,800438 <__alt_data_end+0xff800438>
  800454:	00000106 	br	80045c <strlen+0x78>
  800458:	10800044 	addi	r2,r2,1
  80045c:	10c00007 	ldb	r3,0(r2)
  800460:	183ffd1e 	bne	r3,zero,800458 <__alt_data_end+0xff800458>
  800464:	1105c83a 	sub	r2,r2,r4
  800468:	f800283a 	ret
  80046c:	2005883a 	mov	r2,r4
  800470:	003fe706 	br	800410 <__alt_data_end+0xff800410>
  800474:	0005883a 	mov	r2,zero
  800478:	f800283a 	ret

0080047c <__fp_unlock>:
  80047c:	0005883a 	mov	r2,zero
  800480:	f800283a 	ret

00800484 <_cleanup_r>:
  800484:	01402034 	movhi	r5,128
  800488:	29490604 	addi	r5,r5,9240
  80048c:	0800d9c1 	jmpi	800d9c <_fwalk_reent>

00800490 <__sinit.part.1>:
  800490:	defff704 	addi	sp,sp,-36
  800494:	00c02034 	movhi	r3,128
  800498:	dfc00815 	stw	ra,32(sp)
  80049c:	ddc00715 	stw	r23,28(sp)
  8004a0:	dd800615 	stw	r22,24(sp)
  8004a4:	dd400515 	stw	r21,20(sp)
  8004a8:	dd000415 	stw	r20,16(sp)
  8004ac:	dcc00315 	stw	r19,12(sp)
  8004b0:	dc800215 	stw	r18,8(sp)
  8004b4:	dc400115 	stw	r17,4(sp)
  8004b8:	dc000015 	stw	r16,0(sp)
  8004bc:	18c12104 	addi	r3,r3,1156
  8004c0:	24000117 	ldw	r16,4(r4)
  8004c4:	20c00f15 	stw	r3,60(r4)
  8004c8:	2080bb04 	addi	r2,r4,748
  8004cc:	00c000c4 	movi	r3,3
  8004d0:	20c0b915 	stw	r3,740(r4)
  8004d4:	2080ba15 	stw	r2,744(r4)
  8004d8:	2000b815 	stw	zero,736(r4)
  8004dc:	05c00204 	movi	r23,8
  8004e0:	00800104 	movi	r2,4
  8004e4:	2025883a 	mov	r18,r4
  8004e8:	b80d883a 	mov	r6,r23
  8004ec:	81001704 	addi	r4,r16,92
  8004f0:	000b883a 	mov	r5,zero
  8004f4:	80000015 	stw	zero,0(r16)
  8004f8:	80000115 	stw	zero,4(r16)
  8004fc:	80000215 	stw	zero,8(r16)
  800500:	8080030d 	sth	r2,12(r16)
  800504:	80001915 	stw	zero,100(r16)
  800508:	8000038d 	sth	zero,14(r16)
  80050c:	80000415 	stw	zero,16(r16)
  800510:	80000515 	stw	zero,20(r16)
  800514:	80000615 	stw	zero,24(r16)
  800518:	08019f40 	call	8019f4 <memset>
  80051c:	05802034 	movhi	r22,128
  800520:	94400217 	ldw	r17,8(r18)
  800524:	05402034 	movhi	r21,128
  800528:	05002034 	movhi	r20,128
  80052c:	04c02034 	movhi	r19,128
  800530:	b5883504 	addi	r22,r22,8404
  800534:	ad484c04 	addi	r21,r21,8496
  800538:	a5086b04 	addi	r20,r20,8620
  80053c:	9cc88204 	addi	r19,r19,8712
  800540:	85800815 	stw	r22,32(r16)
  800544:	85400915 	stw	r21,36(r16)
  800548:	85000a15 	stw	r20,40(r16)
  80054c:	84c00b15 	stw	r19,44(r16)
  800550:	84000715 	stw	r16,28(r16)
  800554:	00800284 	movi	r2,10
  800558:	8880030d 	sth	r2,12(r17)
  80055c:	00800044 	movi	r2,1
  800560:	b80d883a 	mov	r6,r23
  800564:	89001704 	addi	r4,r17,92
  800568:	000b883a 	mov	r5,zero
  80056c:	88000015 	stw	zero,0(r17)
  800570:	88000115 	stw	zero,4(r17)
  800574:	88000215 	stw	zero,8(r17)
  800578:	88001915 	stw	zero,100(r17)
  80057c:	8880038d 	sth	r2,14(r17)
  800580:	88000415 	stw	zero,16(r17)
  800584:	88000515 	stw	zero,20(r17)
  800588:	88000615 	stw	zero,24(r17)
  80058c:	08019f40 	call	8019f4 <memset>
  800590:	94000317 	ldw	r16,12(r18)
  800594:	00800484 	movi	r2,18
  800598:	8c400715 	stw	r17,28(r17)
  80059c:	8d800815 	stw	r22,32(r17)
  8005a0:	8d400915 	stw	r21,36(r17)
  8005a4:	8d000a15 	stw	r20,40(r17)
  8005a8:	8cc00b15 	stw	r19,44(r17)
  8005ac:	8080030d 	sth	r2,12(r16)
  8005b0:	00800084 	movi	r2,2
  8005b4:	80000015 	stw	zero,0(r16)
  8005b8:	80000115 	stw	zero,4(r16)
  8005bc:	80000215 	stw	zero,8(r16)
  8005c0:	80001915 	stw	zero,100(r16)
  8005c4:	8080038d 	sth	r2,14(r16)
  8005c8:	80000415 	stw	zero,16(r16)
  8005cc:	80000515 	stw	zero,20(r16)
  8005d0:	80000615 	stw	zero,24(r16)
  8005d4:	b80d883a 	mov	r6,r23
  8005d8:	000b883a 	mov	r5,zero
  8005dc:	81001704 	addi	r4,r16,92
  8005e0:	08019f40 	call	8019f4 <memset>
  8005e4:	00800044 	movi	r2,1
  8005e8:	84000715 	stw	r16,28(r16)
  8005ec:	85800815 	stw	r22,32(r16)
  8005f0:	85400915 	stw	r21,36(r16)
  8005f4:	85000a15 	stw	r20,40(r16)
  8005f8:	84c00b15 	stw	r19,44(r16)
  8005fc:	90800e15 	stw	r2,56(r18)
  800600:	dfc00817 	ldw	ra,32(sp)
  800604:	ddc00717 	ldw	r23,28(sp)
  800608:	dd800617 	ldw	r22,24(sp)
  80060c:	dd400517 	ldw	r21,20(sp)
  800610:	dd000417 	ldw	r20,16(sp)
  800614:	dcc00317 	ldw	r19,12(sp)
  800618:	dc800217 	ldw	r18,8(sp)
  80061c:	dc400117 	ldw	r17,4(sp)
  800620:	dc000017 	ldw	r16,0(sp)
  800624:	dec00904 	addi	sp,sp,36
  800628:	f800283a 	ret

0080062c <__fp_lock>:
  80062c:	0005883a 	mov	r2,zero
  800630:	f800283a 	ret

00800634 <__sfmoreglue>:
  800634:	defffc04 	addi	sp,sp,-16
  800638:	dc400115 	stw	r17,4(sp)
  80063c:	2c7fffc4 	addi	r17,r5,-1
  800640:	8c401a24 	muli	r17,r17,104
  800644:	dc800215 	stw	r18,8(sp)
  800648:	2825883a 	mov	r18,r5
  80064c:	89401d04 	addi	r5,r17,116
  800650:	dc000015 	stw	r16,0(sp)
  800654:	dfc00315 	stw	ra,12(sp)
  800658:	0800e600 	call	800e60 <_malloc_r>
  80065c:	1021883a 	mov	r16,r2
  800660:	10000726 	beq	r2,zero,800680 <__sfmoreglue+0x4c>
  800664:	11000304 	addi	r4,r2,12
  800668:	10000015 	stw	zero,0(r2)
  80066c:	14800115 	stw	r18,4(r2)
  800670:	11000215 	stw	r4,8(r2)
  800674:	89801a04 	addi	r6,r17,104
  800678:	000b883a 	mov	r5,zero
  80067c:	08019f40 	call	8019f4 <memset>
  800680:	8005883a 	mov	r2,r16
  800684:	dfc00317 	ldw	ra,12(sp)
  800688:	dc800217 	ldw	r18,8(sp)
  80068c:	dc400117 	ldw	r17,4(sp)
  800690:	dc000017 	ldw	r16,0(sp)
  800694:	dec00404 	addi	sp,sp,16
  800698:	f800283a 	ret

0080069c <__sfp>:
  80069c:	defffb04 	addi	sp,sp,-20
  8006a0:	dc000015 	stw	r16,0(sp)
  8006a4:	04002074 	movhi	r16,129
  8006a8:	84241c04 	addi	r16,r16,-28560
  8006ac:	dcc00315 	stw	r19,12(sp)
  8006b0:	2027883a 	mov	r19,r4
  8006b4:	81000017 	ldw	r4,0(r16)
  8006b8:	dfc00415 	stw	ra,16(sp)
  8006bc:	dc800215 	stw	r18,8(sp)
  8006c0:	20800e17 	ldw	r2,56(r4)
  8006c4:	dc400115 	stw	r17,4(sp)
  8006c8:	1000021e 	bne	r2,zero,8006d4 <__sfp+0x38>
  8006cc:	08004900 	call	800490 <__sinit.part.1>
  8006d0:	81000017 	ldw	r4,0(r16)
  8006d4:	2480b804 	addi	r18,r4,736
  8006d8:	047fffc4 	movi	r17,-1
  8006dc:	91000117 	ldw	r4,4(r18)
  8006e0:	94000217 	ldw	r16,8(r18)
  8006e4:	213fffc4 	addi	r4,r4,-1
  8006e8:	20000a16 	blt	r4,zero,800714 <__sfp+0x78>
  8006ec:	8080030f 	ldh	r2,12(r16)
  8006f0:	10000c26 	beq	r2,zero,800724 <__sfp+0x88>
  8006f4:	80c01d04 	addi	r3,r16,116
  8006f8:	00000206 	br	800704 <__sfp+0x68>
  8006fc:	18bfe60f 	ldh	r2,-104(r3)
  800700:	10000826 	beq	r2,zero,800724 <__sfp+0x88>
  800704:	213fffc4 	addi	r4,r4,-1
  800708:	1c3ffd04 	addi	r16,r3,-12
  80070c:	18c01a04 	addi	r3,r3,104
  800710:	247ffa1e 	bne	r4,r17,8006fc <__alt_data_end+0xff8006fc>
  800714:	90800017 	ldw	r2,0(r18)
  800718:	10001d26 	beq	r2,zero,800790 <__sfp+0xf4>
  80071c:	1025883a 	mov	r18,r2
  800720:	003fee06 	br	8006dc <__alt_data_end+0xff8006dc>
  800724:	00bfffc4 	movi	r2,-1
  800728:	8080038d 	sth	r2,14(r16)
  80072c:	00800044 	movi	r2,1
  800730:	8080030d 	sth	r2,12(r16)
  800734:	80001915 	stw	zero,100(r16)
  800738:	80000015 	stw	zero,0(r16)
  80073c:	80000215 	stw	zero,8(r16)
  800740:	80000115 	stw	zero,4(r16)
  800744:	80000415 	stw	zero,16(r16)
  800748:	80000515 	stw	zero,20(r16)
  80074c:	80000615 	stw	zero,24(r16)
  800750:	01800204 	movi	r6,8
  800754:	000b883a 	mov	r5,zero
  800758:	81001704 	addi	r4,r16,92
  80075c:	08019f40 	call	8019f4 <memset>
  800760:	8005883a 	mov	r2,r16
  800764:	80000c15 	stw	zero,48(r16)
  800768:	80000d15 	stw	zero,52(r16)
  80076c:	80001115 	stw	zero,68(r16)
  800770:	80001215 	stw	zero,72(r16)
  800774:	dfc00417 	ldw	ra,16(sp)
  800778:	dcc00317 	ldw	r19,12(sp)
  80077c:	dc800217 	ldw	r18,8(sp)
  800780:	dc400117 	ldw	r17,4(sp)
  800784:	dc000017 	ldw	r16,0(sp)
  800788:	dec00504 	addi	sp,sp,20
  80078c:	f800283a 	ret
  800790:	01400104 	movi	r5,4
  800794:	9809883a 	mov	r4,r19
  800798:	08006340 	call	800634 <__sfmoreglue>
  80079c:	90800015 	stw	r2,0(r18)
  8007a0:	103fde1e 	bne	r2,zero,80071c <__alt_data_end+0xff80071c>
  8007a4:	00800304 	movi	r2,12
  8007a8:	98800015 	stw	r2,0(r19)
  8007ac:	0005883a 	mov	r2,zero
  8007b0:	003ff006 	br	800774 <__alt_data_end+0xff800774>

008007b4 <_cleanup>:
  8007b4:	00802074 	movhi	r2,129
  8007b8:	10a41c04 	addi	r2,r2,-28560
  8007bc:	11000017 	ldw	r4,0(r2)
  8007c0:	01402034 	movhi	r5,128
  8007c4:	29490604 	addi	r5,r5,9240
  8007c8:	0800d9c1 	jmpi	800d9c <_fwalk_reent>

008007cc <__sinit>:
  8007cc:	20800e17 	ldw	r2,56(r4)
  8007d0:	10000126 	beq	r2,zero,8007d8 <__sinit+0xc>
  8007d4:	f800283a 	ret
  8007d8:	08004901 	jmpi	800490 <__sinit.part.1>

008007dc <__sfp_lock_acquire>:
  8007dc:	f800283a 	ret

008007e0 <__sfp_lock_release>:
  8007e0:	f800283a 	ret

008007e4 <__sinit_lock_acquire>:
  8007e4:	f800283a 	ret

008007e8 <__sinit_lock_release>:
  8007e8:	f800283a 	ret

008007ec <__fp_lock_all>:
  8007ec:	00802074 	movhi	r2,129
  8007f0:	10a41d04 	addi	r2,r2,-28556
  8007f4:	11000017 	ldw	r4,0(r2)
  8007f8:	01402034 	movhi	r5,128
  8007fc:	29418b04 	addi	r5,r5,1580
  800800:	0800cd81 	jmpi	800cd8 <_fwalk>

00800804 <__fp_unlock_all>:
  800804:	00802074 	movhi	r2,129
  800808:	10a41d04 	addi	r2,r2,-28556
  80080c:	11000017 	ldw	r4,0(r2)
  800810:	01402034 	movhi	r5,128
  800814:	29411f04 	addi	r5,r5,1148
  800818:	0800cd81 	jmpi	800cd8 <_fwalk>

0080081c <__sfvwrite_r>:
  80081c:	30800217 	ldw	r2,8(r6)
  800820:	10006726 	beq	r2,zero,8009c0 <__sfvwrite_r+0x1a4>
  800824:	28c0030b 	ldhu	r3,12(r5)
  800828:	defff404 	addi	sp,sp,-48
  80082c:	dd400715 	stw	r21,28(sp)
  800830:	dd000615 	stw	r20,24(sp)
  800834:	dc000215 	stw	r16,8(sp)
  800838:	dfc00b15 	stw	ra,44(sp)
  80083c:	df000a15 	stw	fp,40(sp)
  800840:	ddc00915 	stw	r23,36(sp)
  800844:	dd800815 	stw	r22,32(sp)
  800848:	dcc00515 	stw	r19,20(sp)
  80084c:	dc800415 	stw	r18,16(sp)
  800850:	dc400315 	stw	r17,12(sp)
  800854:	1880020c 	andi	r2,r3,8
  800858:	2821883a 	mov	r16,r5
  80085c:	202b883a 	mov	r21,r4
  800860:	3029883a 	mov	r20,r6
  800864:	10002726 	beq	r2,zero,800904 <__sfvwrite_r+0xe8>
  800868:	28800417 	ldw	r2,16(r5)
  80086c:	10002526 	beq	r2,zero,800904 <__sfvwrite_r+0xe8>
  800870:	1880008c 	andi	r2,r3,2
  800874:	a4400017 	ldw	r17,0(r20)
  800878:	10002a26 	beq	r2,zero,800924 <__sfvwrite_r+0x108>
  80087c:	05a00034 	movhi	r22,32768
  800880:	0027883a 	mov	r19,zero
  800884:	0025883a 	mov	r18,zero
  800888:	b5bf0004 	addi	r22,r22,-1024
  80088c:	980d883a 	mov	r6,r19
  800890:	a809883a 	mov	r4,r21
  800894:	90004626 	beq	r18,zero,8009b0 <__sfvwrite_r+0x194>
  800898:	900f883a 	mov	r7,r18
  80089c:	b480022e 	bgeu	r22,r18,8008a8 <__sfvwrite_r+0x8c>
  8008a0:	01e00034 	movhi	r7,32768
  8008a4:	39ff0004 	addi	r7,r7,-1024
  8008a8:	80800917 	ldw	r2,36(r16)
  8008ac:	81400717 	ldw	r5,28(r16)
  8008b0:	103ee83a 	callr	r2
  8008b4:	0080570e 	bge	zero,r2,800a14 <__sfvwrite_r+0x1f8>
  8008b8:	a0c00217 	ldw	r3,8(r20)
  8008bc:	98a7883a 	add	r19,r19,r2
  8008c0:	90a5c83a 	sub	r18,r18,r2
  8008c4:	1885c83a 	sub	r2,r3,r2
  8008c8:	a0800215 	stw	r2,8(r20)
  8008cc:	103fef1e 	bne	r2,zero,80088c <__alt_data_end+0xff80088c>
  8008d0:	0005883a 	mov	r2,zero
  8008d4:	dfc00b17 	ldw	ra,44(sp)
  8008d8:	df000a17 	ldw	fp,40(sp)
  8008dc:	ddc00917 	ldw	r23,36(sp)
  8008e0:	dd800817 	ldw	r22,32(sp)
  8008e4:	dd400717 	ldw	r21,28(sp)
  8008e8:	dd000617 	ldw	r20,24(sp)
  8008ec:	dcc00517 	ldw	r19,20(sp)
  8008f0:	dc800417 	ldw	r18,16(sp)
  8008f4:	dc400317 	ldw	r17,12(sp)
  8008f8:	dc000217 	ldw	r16,8(sp)
  8008fc:	dec00c04 	addi	sp,sp,48
  800900:	f800283a 	ret
  800904:	800b883a 	mov	r5,r16
  800908:	a809883a 	mov	r4,r21
  80090c:	08022700 	call	802270 <__swsetup_r>
  800910:	1000eb1e 	bne	r2,zero,800cc0 <__sfvwrite_r+0x4a4>
  800914:	80c0030b 	ldhu	r3,12(r16)
  800918:	a4400017 	ldw	r17,0(r20)
  80091c:	1880008c 	andi	r2,r3,2
  800920:	103fd61e 	bne	r2,zero,80087c <__alt_data_end+0xff80087c>
  800924:	1880004c 	andi	r2,r3,1
  800928:	10003f1e 	bne	r2,zero,800a28 <__sfvwrite_r+0x20c>
  80092c:	0039883a 	mov	fp,zero
  800930:	0025883a 	mov	r18,zero
  800934:	90001a26 	beq	r18,zero,8009a0 <__sfvwrite_r+0x184>
  800938:	1880800c 	andi	r2,r3,512
  80093c:	84c00217 	ldw	r19,8(r16)
  800940:	10002126 	beq	r2,zero,8009c8 <__sfvwrite_r+0x1ac>
  800944:	982f883a 	mov	r23,r19
  800948:	94c09336 	bltu	r18,r19,800b98 <__sfvwrite_r+0x37c>
  80094c:	1881200c 	andi	r2,r3,1152
  800950:	10009e1e 	bne	r2,zero,800bcc <__sfvwrite_r+0x3b0>
  800954:	81000017 	ldw	r4,0(r16)
  800958:	b80d883a 	mov	r6,r23
  80095c:	e00b883a 	mov	r5,fp
  800960:	08018980 	call	801898 <memmove>
  800964:	80c00217 	ldw	r3,8(r16)
  800968:	81000017 	ldw	r4,0(r16)
  80096c:	9005883a 	mov	r2,r18
  800970:	1ce7c83a 	sub	r19,r3,r19
  800974:	25cf883a 	add	r7,r4,r23
  800978:	84c00215 	stw	r19,8(r16)
  80097c:	81c00015 	stw	r7,0(r16)
  800980:	a0c00217 	ldw	r3,8(r20)
  800984:	e0b9883a 	add	fp,fp,r2
  800988:	90a5c83a 	sub	r18,r18,r2
  80098c:	18a7c83a 	sub	r19,r3,r2
  800990:	a4c00215 	stw	r19,8(r20)
  800994:	983fce26 	beq	r19,zero,8008d0 <__alt_data_end+0xff8008d0>
  800998:	80c0030b 	ldhu	r3,12(r16)
  80099c:	903fe61e 	bne	r18,zero,800938 <__alt_data_end+0xff800938>
  8009a0:	8f000017 	ldw	fp,0(r17)
  8009a4:	8c800117 	ldw	r18,4(r17)
  8009a8:	8c400204 	addi	r17,r17,8
  8009ac:	003fe106 	br	800934 <__alt_data_end+0xff800934>
  8009b0:	8cc00017 	ldw	r19,0(r17)
  8009b4:	8c800117 	ldw	r18,4(r17)
  8009b8:	8c400204 	addi	r17,r17,8
  8009bc:	003fb306 	br	80088c <__alt_data_end+0xff80088c>
  8009c0:	0005883a 	mov	r2,zero
  8009c4:	f800283a 	ret
  8009c8:	81000017 	ldw	r4,0(r16)
  8009cc:	80800417 	ldw	r2,16(r16)
  8009d0:	11005736 	bltu	r2,r4,800b30 <__sfvwrite_r+0x314>
  8009d4:	85c00517 	ldw	r23,20(r16)
  8009d8:	95c05536 	bltu	r18,r23,800b30 <__sfvwrite_r+0x314>
  8009dc:	00a00034 	movhi	r2,32768
  8009e0:	10bfffc4 	addi	r2,r2,-1
  8009e4:	9009883a 	mov	r4,r18
  8009e8:	1480012e 	bgeu	r2,r18,8009f0 <__sfvwrite_r+0x1d4>
  8009ec:	1009883a 	mov	r4,r2
  8009f0:	b80b883a 	mov	r5,r23
  8009f4:	0802f240 	call	802f24 <__divsi3>
  8009f8:	15cf383a 	mul	r7,r2,r23
  8009fc:	81400717 	ldw	r5,28(r16)
  800a00:	80800917 	ldw	r2,36(r16)
  800a04:	e00d883a 	mov	r6,fp
  800a08:	a809883a 	mov	r4,r21
  800a0c:	103ee83a 	callr	r2
  800a10:	00bfdb16 	blt	zero,r2,800980 <__alt_data_end+0xff800980>
  800a14:	8080030b 	ldhu	r2,12(r16)
  800a18:	10801014 	ori	r2,r2,64
  800a1c:	8080030d 	sth	r2,12(r16)
  800a20:	00bfffc4 	movi	r2,-1
  800a24:	003fab06 	br	8008d4 <__alt_data_end+0xff8008d4>
  800a28:	0027883a 	mov	r19,zero
  800a2c:	0011883a 	mov	r8,zero
  800a30:	0039883a 	mov	fp,zero
  800a34:	0025883a 	mov	r18,zero
  800a38:	90001f26 	beq	r18,zero,800ab8 <__sfvwrite_r+0x29c>
  800a3c:	40005a26 	beq	r8,zero,800ba8 <__sfvwrite_r+0x38c>
  800a40:	982d883a 	mov	r22,r19
  800a44:	94c0012e 	bgeu	r18,r19,800a4c <__sfvwrite_r+0x230>
  800a48:	902d883a 	mov	r22,r18
  800a4c:	81000017 	ldw	r4,0(r16)
  800a50:	80800417 	ldw	r2,16(r16)
  800a54:	b02f883a 	mov	r23,r22
  800a58:	81c00517 	ldw	r7,20(r16)
  800a5c:	1100032e 	bgeu	r2,r4,800a6c <__sfvwrite_r+0x250>
  800a60:	80c00217 	ldw	r3,8(r16)
  800a64:	38c7883a 	add	r3,r7,r3
  800a68:	1d801816 	blt	r3,r22,800acc <__sfvwrite_r+0x2b0>
  800a6c:	b1c03e16 	blt	r22,r7,800b68 <__sfvwrite_r+0x34c>
  800a70:	80800917 	ldw	r2,36(r16)
  800a74:	81400717 	ldw	r5,28(r16)
  800a78:	e00d883a 	mov	r6,fp
  800a7c:	da000115 	stw	r8,4(sp)
  800a80:	a809883a 	mov	r4,r21
  800a84:	103ee83a 	callr	r2
  800a88:	102f883a 	mov	r23,r2
  800a8c:	da000117 	ldw	r8,4(sp)
  800a90:	00bfe00e 	bge	zero,r2,800a14 <__alt_data_end+0xff800a14>
  800a94:	9de7c83a 	sub	r19,r19,r23
  800a98:	98001f26 	beq	r19,zero,800b18 <__sfvwrite_r+0x2fc>
  800a9c:	a0800217 	ldw	r2,8(r20)
  800aa0:	e5f9883a 	add	fp,fp,r23
  800aa4:	95e5c83a 	sub	r18,r18,r23
  800aa8:	15efc83a 	sub	r23,r2,r23
  800aac:	a5c00215 	stw	r23,8(r20)
  800ab0:	b83f8726 	beq	r23,zero,8008d0 <__alt_data_end+0xff8008d0>
  800ab4:	903fe11e 	bne	r18,zero,800a3c <__alt_data_end+0xff800a3c>
  800ab8:	8f000017 	ldw	fp,0(r17)
  800abc:	8c800117 	ldw	r18,4(r17)
  800ac0:	0011883a 	mov	r8,zero
  800ac4:	8c400204 	addi	r17,r17,8
  800ac8:	003fdb06 	br	800a38 <__alt_data_end+0xff800a38>
  800acc:	180d883a 	mov	r6,r3
  800ad0:	e00b883a 	mov	r5,fp
  800ad4:	da000115 	stw	r8,4(sp)
  800ad8:	d8c00015 	stw	r3,0(sp)
  800adc:	08018980 	call	801898 <memmove>
  800ae0:	d8c00017 	ldw	r3,0(sp)
  800ae4:	80800017 	ldw	r2,0(r16)
  800ae8:	800b883a 	mov	r5,r16
  800aec:	a809883a 	mov	r4,r21
  800af0:	10c5883a 	add	r2,r2,r3
  800af4:	80800015 	stw	r2,0(r16)
  800af8:	d8c00015 	stw	r3,0(sp)
  800afc:	08027380 	call	802738 <_fflush_r>
  800b00:	d8c00017 	ldw	r3,0(sp)
  800b04:	da000117 	ldw	r8,4(sp)
  800b08:	103fc21e 	bne	r2,zero,800a14 <__alt_data_end+0xff800a14>
  800b0c:	182f883a 	mov	r23,r3
  800b10:	9de7c83a 	sub	r19,r19,r23
  800b14:	983fe11e 	bne	r19,zero,800a9c <__alt_data_end+0xff800a9c>
  800b18:	800b883a 	mov	r5,r16
  800b1c:	a809883a 	mov	r4,r21
  800b20:	08027380 	call	802738 <_fflush_r>
  800b24:	103fbb1e 	bne	r2,zero,800a14 <__alt_data_end+0xff800a14>
  800b28:	0011883a 	mov	r8,zero
  800b2c:	003fdb06 	br	800a9c <__alt_data_end+0xff800a9c>
  800b30:	94c0012e 	bgeu	r18,r19,800b38 <__sfvwrite_r+0x31c>
  800b34:	9027883a 	mov	r19,r18
  800b38:	980d883a 	mov	r6,r19
  800b3c:	e00b883a 	mov	r5,fp
  800b40:	08018980 	call	801898 <memmove>
  800b44:	80800217 	ldw	r2,8(r16)
  800b48:	80c00017 	ldw	r3,0(r16)
  800b4c:	14c5c83a 	sub	r2,r2,r19
  800b50:	1cc7883a 	add	r3,r3,r19
  800b54:	80800215 	stw	r2,8(r16)
  800b58:	80c00015 	stw	r3,0(r16)
  800b5c:	10004326 	beq	r2,zero,800c6c <__sfvwrite_r+0x450>
  800b60:	9805883a 	mov	r2,r19
  800b64:	003f8606 	br	800980 <__alt_data_end+0xff800980>
  800b68:	b00d883a 	mov	r6,r22
  800b6c:	e00b883a 	mov	r5,fp
  800b70:	da000115 	stw	r8,4(sp)
  800b74:	08018980 	call	801898 <memmove>
  800b78:	80800217 	ldw	r2,8(r16)
  800b7c:	80c00017 	ldw	r3,0(r16)
  800b80:	da000117 	ldw	r8,4(sp)
  800b84:	1585c83a 	sub	r2,r2,r22
  800b88:	1dad883a 	add	r22,r3,r22
  800b8c:	80800215 	stw	r2,8(r16)
  800b90:	85800015 	stw	r22,0(r16)
  800b94:	003fbf06 	br	800a94 <__alt_data_end+0xff800a94>
  800b98:	81000017 	ldw	r4,0(r16)
  800b9c:	9027883a 	mov	r19,r18
  800ba0:	902f883a 	mov	r23,r18
  800ba4:	003f6c06 	br	800958 <__alt_data_end+0xff800958>
  800ba8:	900d883a 	mov	r6,r18
  800bac:	01400284 	movi	r5,10
  800bb0:	e009883a 	mov	r4,fp
  800bb4:	080166c0 	call	80166c <memchr>
  800bb8:	10003e26 	beq	r2,zero,800cb4 <__sfvwrite_r+0x498>
  800bbc:	10800044 	addi	r2,r2,1
  800bc0:	1727c83a 	sub	r19,r2,fp
  800bc4:	02000044 	movi	r8,1
  800bc8:	003f9d06 	br	800a40 <__alt_data_end+0xff800a40>
  800bcc:	80800517 	ldw	r2,20(r16)
  800bd0:	81400417 	ldw	r5,16(r16)
  800bd4:	81c00017 	ldw	r7,0(r16)
  800bd8:	10a7883a 	add	r19,r2,r2
  800bdc:	9885883a 	add	r2,r19,r2
  800be0:	1026d7fa 	srli	r19,r2,31
  800be4:	396dc83a 	sub	r22,r7,r5
  800be8:	b1000044 	addi	r4,r22,1
  800bec:	9885883a 	add	r2,r19,r2
  800bf0:	1027d07a 	srai	r19,r2,1
  800bf4:	2485883a 	add	r2,r4,r18
  800bf8:	980d883a 	mov	r6,r19
  800bfc:	9880022e 	bgeu	r19,r2,800c08 <__sfvwrite_r+0x3ec>
  800c00:	1027883a 	mov	r19,r2
  800c04:	100d883a 	mov	r6,r2
  800c08:	18c1000c 	andi	r3,r3,1024
  800c0c:	18001c26 	beq	r3,zero,800c80 <__sfvwrite_r+0x464>
  800c10:	300b883a 	mov	r5,r6
  800c14:	a809883a 	mov	r4,r21
  800c18:	0800e600 	call	800e60 <_malloc_r>
  800c1c:	102f883a 	mov	r23,r2
  800c20:	10002926 	beq	r2,zero,800cc8 <__sfvwrite_r+0x4ac>
  800c24:	81400417 	ldw	r5,16(r16)
  800c28:	b00d883a 	mov	r6,r22
  800c2c:	1009883a 	mov	r4,r2
  800c30:	08017500 	call	801750 <memcpy>
  800c34:	8080030b 	ldhu	r2,12(r16)
  800c38:	00fedfc4 	movi	r3,-1153
  800c3c:	10c4703a 	and	r2,r2,r3
  800c40:	10802014 	ori	r2,r2,128
  800c44:	8080030d 	sth	r2,12(r16)
  800c48:	bd89883a 	add	r4,r23,r22
  800c4c:	9d8fc83a 	sub	r7,r19,r22
  800c50:	85c00415 	stw	r23,16(r16)
  800c54:	84c00515 	stw	r19,20(r16)
  800c58:	81000015 	stw	r4,0(r16)
  800c5c:	9027883a 	mov	r19,r18
  800c60:	81c00215 	stw	r7,8(r16)
  800c64:	902f883a 	mov	r23,r18
  800c68:	003f3b06 	br	800958 <__alt_data_end+0xff800958>
  800c6c:	800b883a 	mov	r5,r16
  800c70:	a809883a 	mov	r4,r21
  800c74:	08027380 	call	802738 <_fflush_r>
  800c78:	103fb926 	beq	r2,zero,800b60 <__alt_data_end+0xff800b60>
  800c7c:	003f6506 	br	800a14 <__alt_data_end+0xff800a14>
  800c80:	a809883a 	mov	r4,r21
  800c84:	0801b1c0 	call	801b1c <_realloc_r>
  800c88:	102f883a 	mov	r23,r2
  800c8c:	103fee1e 	bne	r2,zero,800c48 <__alt_data_end+0xff800c48>
  800c90:	81400417 	ldw	r5,16(r16)
  800c94:	a809883a 	mov	r4,r21
  800c98:	08028e80 	call	8028e8 <_free_r>
  800c9c:	8080030b 	ldhu	r2,12(r16)
  800ca0:	00ffdfc4 	movi	r3,-129
  800ca4:	1884703a 	and	r2,r3,r2
  800ca8:	00c00304 	movi	r3,12
  800cac:	a8c00015 	stw	r3,0(r21)
  800cb0:	003f5906 	br	800a18 <__alt_data_end+0xff800a18>
  800cb4:	94c00044 	addi	r19,r18,1
  800cb8:	02000044 	movi	r8,1
  800cbc:	003f6006 	br	800a40 <__alt_data_end+0xff800a40>
  800cc0:	00bfffc4 	movi	r2,-1
  800cc4:	003f0306 	br	8008d4 <__alt_data_end+0xff8008d4>
  800cc8:	00800304 	movi	r2,12
  800ccc:	a8800015 	stw	r2,0(r21)
  800cd0:	8080030b 	ldhu	r2,12(r16)
  800cd4:	003f5006 	br	800a18 <__alt_data_end+0xff800a18>

00800cd8 <_fwalk>:
  800cd8:	defff704 	addi	sp,sp,-36
  800cdc:	dd000415 	stw	r20,16(sp)
  800ce0:	dfc00815 	stw	ra,32(sp)
  800ce4:	ddc00715 	stw	r23,28(sp)
  800ce8:	dd800615 	stw	r22,24(sp)
  800cec:	dd400515 	stw	r21,20(sp)
  800cf0:	dcc00315 	stw	r19,12(sp)
  800cf4:	dc800215 	stw	r18,8(sp)
  800cf8:	dc400115 	stw	r17,4(sp)
  800cfc:	dc000015 	stw	r16,0(sp)
  800d00:	2500b804 	addi	r20,r4,736
  800d04:	a0002326 	beq	r20,zero,800d94 <_fwalk+0xbc>
  800d08:	282b883a 	mov	r21,r5
  800d0c:	002f883a 	mov	r23,zero
  800d10:	05800044 	movi	r22,1
  800d14:	04ffffc4 	movi	r19,-1
  800d18:	a4400117 	ldw	r17,4(r20)
  800d1c:	a4800217 	ldw	r18,8(r20)
  800d20:	8c7fffc4 	addi	r17,r17,-1
  800d24:	88000d16 	blt	r17,zero,800d5c <_fwalk+0x84>
  800d28:	94000304 	addi	r16,r18,12
  800d2c:	94800384 	addi	r18,r18,14
  800d30:	8080000b 	ldhu	r2,0(r16)
  800d34:	8c7fffc4 	addi	r17,r17,-1
  800d38:	813ffd04 	addi	r4,r16,-12
  800d3c:	b080042e 	bgeu	r22,r2,800d50 <_fwalk+0x78>
  800d40:	9080000f 	ldh	r2,0(r18)
  800d44:	14c00226 	beq	r2,r19,800d50 <_fwalk+0x78>
  800d48:	a83ee83a 	callr	r21
  800d4c:	b8aeb03a 	or	r23,r23,r2
  800d50:	84001a04 	addi	r16,r16,104
  800d54:	94801a04 	addi	r18,r18,104
  800d58:	8cfff51e 	bne	r17,r19,800d30 <__alt_data_end+0xff800d30>
  800d5c:	a5000017 	ldw	r20,0(r20)
  800d60:	a03fed1e 	bne	r20,zero,800d18 <__alt_data_end+0xff800d18>
  800d64:	b805883a 	mov	r2,r23
  800d68:	dfc00817 	ldw	ra,32(sp)
  800d6c:	ddc00717 	ldw	r23,28(sp)
  800d70:	dd800617 	ldw	r22,24(sp)
  800d74:	dd400517 	ldw	r21,20(sp)
  800d78:	dd000417 	ldw	r20,16(sp)
  800d7c:	dcc00317 	ldw	r19,12(sp)
  800d80:	dc800217 	ldw	r18,8(sp)
  800d84:	dc400117 	ldw	r17,4(sp)
  800d88:	dc000017 	ldw	r16,0(sp)
  800d8c:	dec00904 	addi	sp,sp,36
  800d90:	f800283a 	ret
  800d94:	002f883a 	mov	r23,zero
  800d98:	003ff206 	br	800d64 <__alt_data_end+0xff800d64>

00800d9c <_fwalk_reent>:
  800d9c:	defff704 	addi	sp,sp,-36
  800da0:	dd000415 	stw	r20,16(sp)
  800da4:	dfc00815 	stw	ra,32(sp)
  800da8:	ddc00715 	stw	r23,28(sp)
  800dac:	dd800615 	stw	r22,24(sp)
  800db0:	dd400515 	stw	r21,20(sp)
  800db4:	dcc00315 	stw	r19,12(sp)
  800db8:	dc800215 	stw	r18,8(sp)
  800dbc:	dc400115 	stw	r17,4(sp)
  800dc0:	dc000015 	stw	r16,0(sp)
  800dc4:	2500b804 	addi	r20,r4,736
  800dc8:	a0002326 	beq	r20,zero,800e58 <_fwalk_reent+0xbc>
  800dcc:	282b883a 	mov	r21,r5
  800dd0:	2027883a 	mov	r19,r4
  800dd4:	002f883a 	mov	r23,zero
  800dd8:	05800044 	movi	r22,1
  800ddc:	04bfffc4 	movi	r18,-1
  800de0:	a4400117 	ldw	r17,4(r20)
  800de4:	a4000217 	ldw	r16,8(r20)
  800de8:	8c7fffc4 	addi	r17,r17,-1
  800dec:	88000c16 	blt	r17,zero,800e20 <_fwalk_reent+0x84>
  800df0:	84000304 	addi	r16,r16,12
  800df4:	8080000b 	ldhu	r2,0(r16)
  800df8:	8c7fffc4 	addi	r17,r17,-1
  800dfc:	817ffd04 	addi	r5,r16,-12
  800e00:	b080052e 	bgeu	r22,r2,800e18 <_fwalk_reent+0x7c>
  800e04:	8080008f 	ldh	r2,2(r16)
  800e08:	9809883a 	mov	r4,r19
  800e0c:	14800226 	beq	r2,r18,800e18 <_fwalk_reent+0x7c>
  800e10:	a83ee83a 	callr	r21
  800e14:	b8aeb03a 	or	r23,r23,r2
  800e18:	84001a04 	addi	r16,r16,104
  800e1c:	8cbff51e 	bne	r17,r18,800df4 <__alt_data_end+0xff800df4>
  800e20:	a5000017 	ldw	r20,0(r20)
  800e24:	a03fee1e 	bne	r20,zero,800de0 <__alt_data_end+0xff800de0>
  800e28:	b805883a 	mov	r2,r23
  800e2c:	dfc00817 	ldw	ra,32(sp)
  800e30:	ddc00717 	ldw	r23,28(sp)
  800e34:	dd800617 	ldw	r22,24(sp)
  800e38:	dd400517 	ldw	r21,20(sp)
  800e3c:	dd000417 	ldw	r20,16(sp)
  800e40:	dcc00317 	ldw	r19,12(sp)
  800e44:	dc800217 	ldw	r18,8(sp)
  800e48:	dc400117 	ldw	r17,4(sp)
  800e4c:	dc000017 	ldw	r16,0(sp)
  800e50:	dec00904 	addi	sp,sp,36
  800e54:	f800283a 	ret
  800e58:	002f883a 	mov	r23,zero
  800e5c:	003ff206 	br	800e28 <__alt_data_end+0xff800e28>

00800e60 <_malloc_r>:
  800e60:	defff504 	addi	sp,sp,-44
  800e64:	dc800315 	stw	r18,12(sp)
  800e68:	dfc00a15 	stw	ra,40(sp)
  800e6c:	df000915 	stw	fp,36(sp)
  800e70:	ddc00815 	stw	r23,32(sp)
  800e74:	dd800715 	stw	r22,28(sp)
  800e78:	dd400615 	stw	r21,24(sp)
  800e7c:	dd000515 	stw	r20,20(sp)
  800e80:	dcc00415 	stw	r19,16(sp)
  800e84:	dc400215 	stw	r17,8(sp)
  800e88:	dc000115 	stw	r16,4(sp)
  800e8c:	288002c4 	addi	r2,r5,11
  800e90:	00c00584 	movi	r3,22
  800e94:	2025883a 	mov	r18,r4
  800e98:	18807f2e 	bgeu	r3,r2,801098 <_malloc_r+0x238>
  800e9c:	047ffe04 	movi	r17,-8
  800ea0:	1462703a 	and	r17,r2,r17
  800ea4:	8800a316 	blt	r17,zero,801134 <_malloc_r+0x2d4>
  800ea8:	8940a236 	bltu	r17,r5,801134 <_malloc_r+0x2d4>
  800eac:	08036540 	call	803654 <__malloc_lock>
  800eb0:	00807dc4 	movi	r2,503
  800eb4:	1441e92e 	bgeu	r2,r17,80165c <_malloc_r+0x7fc>
  800eb8:	8804d27a 	srli	r2,r17,9
  800ebc:	1000a126 	beq	r2,zero,801144 <_malloc_r+0x2e4>
  800ec0:	00c00104 	movi	r3,4
  800ec4:	18811e36 	bltu	r3,r2,801340 <_malloc_r+0x4e0>
  800ec8:	8804d1ba 	srli	r2,r17,6
  800ecc:	12000e44 	addi	r8,r2,57
  800ed0:	11c00e04 	addi	r7,r2,56
  800ed4:	4209883a 	add	r4,r8,r8
  800ed8:	04c02034 	movhi	r19,128
  800edc:	2109883a 	add	r4,r4,r4
  800ee0:	9cde0704 	addi	r19,r19,30748
  800ee4:	2109883a 	add	r4,r4,r4
  800ee8:	9909883a 	add	r4,r19,r4
  800eec:	24000117 	ldw	r16,4(r4)
  800ef0:	213ffe04 	addi	r4,r4,-8
  800ef4:	24009726 	beq	r4,r16,801154 <_malloc_r+0x2f4>
  800ef8:	80800117 	ldw	r2,4(r16)
  800efc:	01bfff04 	movi	r6,-4
  800f00:	014003c4 	movi	r5,15
  800f04:	1184703a 	and	r2,r2,r6
  800f08:	1447c83a 	sub	r3,r2,r17
  800f0c:	28c00716 	blt	r5,r3,800f2c <_malloc_r+0xcc>
  800f10:	1800920e 	bge	r3,zero,80115c <_malloc_r+0x2fc>
  800f14:	84000317 	ldw	r16,12(r16)
  800f18:	24008e26 	beq	r4,r16,801154 <_malloc_r+0x2f4>
  800f1c:	80800117 	ldw	r2,4(r16)
  800f20:	1184703a 	and	r2,r2,r6
  800f24:	1447c83a 	sub	r3,r2,r17
  800f28:	28fff90e 	bge	r5,r3,800f10 <__alt_data_end+0xff800f10>
  800f2c:	3809883a 	mov	r4,r7
  800f30:	01802034 	movhi	r6,128
  800f34:	9c000417 	ldw	r16,16(r19)
  800f38:	319e0704 	addi	r6,r6,30748
  800f3c:	32000204 	addi	r8,r6,8
  800f40:	82013426 	beq	r16,r8,801414 <_malloc_r+0x5b4>
  800f44:	80c00117 	ldw	r3,4(r16)
  800f48:	00bfff04 	movi	r2,-4
  800f4c:	188e703a 	and	r7,r3,r2
  800f50:	3c45c83a 	sub	r2,r7,r17
  800f54:	00c003c4 	movi	r3,15
  800f58:	18811f16 	blt	r3,r2,8013d8 <_malloc_r+0x578>
  800f5c:	32000515 	stw	r8,20(r6)
  800f60:	32000415 	stw	r8,16(r6)
  800f64:	10007f0e 	bge	r2,zero,801164 <_malloc_r+0x304>
  800f68:	00807fc4 	movi	r2,511
  800f6c:	11c0fd36 	bltu	r2,r7,801364 <_malloc_r+0x504>
  800f70:	3806d0fa 	srli	r3,r7,3
  800f74:	01c00044 	movi	r7,1
  800f78:	30800117 	ldw	r2,4(r6)
  800f7c:	19400044 	addi	r5,r3,1
  800f80:	294b883a 	add	r5,r5,r5
  800f84:	1807d0ba 	srai	r3,r3,2
  800f88:	294b883a 	add	r5,r5,r5
  800f8c:	294b883a 	add	r5,r5,r5
  800f90:	298b883a 	add	r5,r5,r6
  800f94:	38c6983a 	sll	r3,r7,r3
  800f98:	29c00017 	ldw	r7,0(r5)
  800f9c:	2a7ffe04 	addi	r9,r5,-8
  800fa0:	1886b03a 	or	r3,r3,r2
  800fa4:	82400315 	stw	r9,12(r16)
  800fa8:	81c00215 	stw	r7,8(r16)
  800fac:	30c00115 	stw	r3,4(r6)
  800fb0:	2c000015 	stw	r16,0(r5)
  800fb4:	3c000315 	stw	r16,12(r7)
  800fb8:	2005d0ba 	srai	r2,r4,2
  800fbc:	01400044 	movi	r5,1
  800fc0:	288a983a 	sll	r5,r5,r2
  800fc4:	19406f36 	bltu	r3,r5,801184 <_malloc_r+0x324>
  800fc8:	28c4703a 	and	r2,r5,r3
  800fcc:	10000a1e 	bne	r2,zero,800ff8 <_malloc_r+0x198>
  800fd0:	00bfff04 	movi	r2,-4
  800fd4:	294b883a 	add	r5,r5,r5
  800fd8:	2088703a 	and	r4,r4,r2
  800fdc:	28c4703a 	and	r2,r5,r3
  800fe0:	21000104 	addi	r4,r4,4
  800fe4:	1000041e 	bne	r2,zero,800ff8 <_malloc_r+0x198>
  800fe8:	294b883a 	add	r5,r5,r5
  800fec:	28c4703a 	and	r2,r5,r3
  800ff0:	21000104 	addi	r4,r4,4
  800ff4:	103ffc26 	beq	r2,zero,800fe8 <__alt_data_end+0xff800fe8>
  800ff8:	02bfff04 	movi	r10,-4
  800ffc:	024003c4 	movi	r9,15
  801000:	21800044 	addi	r6,r4,1
  801004:	318d883a 	add	r6,r6,r6
  801008:	318d883a 	add	r6,r6,r6
  80100c:	318d883a 	add	r6,r6,r6
  801010:	998d883a 	add	r6,r19,r6
  801014:	333ffe04 	addi	r12,r6,-8
  801018:	2017883a 	mov	r11,r4
  80101c:	31800104 	addi	r6,r6,4
  801020:	34000017 	ldw	r16,0(r6)
  801024:	31fffd04 	addi	r7,r6,-12
  801028:	81c0041e 	bne	r16,r7,80103c <_malloc_r+0x1dc>
  80102c:	0000fb06 	br	80141c <_malloc_r+0x5bc>
  801030:	1801030e 	bge	r3,zero,801440 <_malloc_r+0x5e0>
  801034:	84000317 	ldw	r16,12(r16)
  801038:	81c0f826 	beq	r16,r7,80141c <_malloc_r+0x5bc>
  80103c:	80800117 	ldw	r2,4(r16)
  801040:	1284703a 	and	r2,r2,r10
  801044:	1447c83a 	sub	r3,r2,r17
  801048:	48fff90e 	bge	r9,r3,801030 <__alt_data_end+0xff801030>
  80104c:	80800317 	ldw	r2,12(r16)
  801050:	81000217 	ldw	r4,8(r16)
  801054:	89400054 	ori	r5,r17,1
  801058:	81400115 	stw	r5,4(r16)
  80105c:	20800315 	stw	r2,12(r4)
  801060:	11000215 	stw	r4,8(r2)
  801064:	8463883a 	add	r17,r16,r17
  801068:	9c400515 	stw	r17,20(r19)
  80106c:	9c400415 	stw	r17,16(r19)
  801070:	18800054 	ori	r2,r3,1
  801074:	88800115 	stw	r2,4(r17)
  801078:	8a000315 	stw	r8,12(r17)
  80107c:	8a000215 	stw	r8,8(r17)
  801080:	88e3883a 	add	r17,r17,r3
  801084:	88c00015 	stw	r3,0(r17)
  801088:	9009883a 	mov	r4,r18
  80108c:	08036780 	call	803678 <__malloc_unlock>
  801090:	80800204 	addi	r2,r16,8
  801094:	00001b06 	br	801104 <_malloc_r+0x2a4>
  801098:	04400404 	movi	r17,16
  80109c:	89402536 	bltu	r17,r5,801134 <_malloc_r+0x2d4>
  8010a0:	08036540 	call	803654 <__malloc_lock>
  8010a4:	00800184 	movi	r2,6
  8010a8:	01000084 	movi	r4,2
  8010ac:	04c02034 	movhi	r19,128
  8010b0:	1085883a 	add	r2,r2,r2
  8010b4:	9cde0704 	addi	r19,r19,30748
  8010b8:	1085883a 	add	r2,r2,r2
  8010bc:	9885883a 	add	r2,r19,r2
  8010c0:	14000117 	ldw	r16,4(r2)
  8010c4:	10fffe04 	addi	r3,r2,-8
  8010c8:	80c0d926 	beq	r16,r3,801430 <_malloc_r+0x5d0>
  8010cc:	80c00117 	ldw	r3,4(r16)
  8010d0:	81000317 	ldw	r4,12(r16)
  8010d4:	00bfff04 	movi	r2,-4
  8010d8:	1884703a 	and	r2,r3,r2
  8010dc:	81400217 	ldw	r5,8(r16)
  8010e0:	8085883a 	add	r2,r16,r2
  8010e4:	10c00117 	ldw	r3,4(r2)
  8010e8:	29000315 	stw	r4,12(r5)
  8010ec:	21400215 	stw	r5,8(r4)
  8010f0:	18c00054 	ori	r3,r3,1
  8010f4:	10c00115 	stw	r3,4(r2)
  8010f8:	9009883a 	mov	r4,r18
  8010fc:	08036780 	call	803678 <__malloc_unlock>
  801100:	80800204 	addi	r2,r16,8
  801104:	dfc00a17 	ldw	ra,40(sp)
  801108:	df000917 	ldw	fp,36(sp)
  80110c:	ddc00817 	ldw	r23,32(sp)
  801110:	dd800717 	ldw	r22,28(sp)
  801114:	dd400617 	ldw	r21,24(sp)
  801118:	dd000517 	ldw	r20,20(sp)
  80111c:	dcc00417 	ldw	r19,16(sp)
  801120:	dc800317 	ldw	r18,12(sp)
  801124:	dc400217 	ldw	r17,8(sp)
  801128:	dc000117 	ldw	r16,4(sp)
  80112c:	dec00b04 	addi	sp,sp,44
  801130:	f800283a 	ret
  801134:	00800304 	movi	r2,12
  801138:	90800015 	stw	r2,0(r18)
  80113c:	0005883a 	mov	r2,zero
  801140:	003ff006 	br	801104 <__alt_data_end+0xff801104>
  801144:	01002004 	movi	r4,128
  801148:	02001004 	movi	r8,64
  80114c:	01c00fc4 	movi	r7,63
  801150:	003f6106 	br	800ed8 <__alt_data_end+0xff800ed8>
  801154:	4009883a 	mov	r4,r8
  801158:	003f7506 	br	800f30 <__alt_data_end+0xff800f30>
  80115c:	81000317 	ldw	r4,12(r16)
  801160:	003fde06 	br	8010dc <__alt_data_end+0xff8010dc>
  801164:	81c5883a 	add	r2,r16,r7
  801168:	11400117 	ldw	r5,4(r2)
  80116c:	9009883a 	mov	r4,r18
  801170:	29400054 	ori	r5,r5,1
  801174:	11400115 	stw	r5,4(r2)
  801178:	08036780 	call	803678 <__malloc_unlock>
  80117c:	80800204 	addi	r2,r16,8
  801180:	003fe006 	br	801104 <__alt_data_end+0xff801104>
  801184:	9c000217 	ldw	r16,8(r19)
  801188:	00bfff04 	movi	r2,-4
  80118c:	85800117 	ldw	r22,4(r16)
  801190:	b0ac703a 	and	r22,r22,r2
  801194:	b4400336 	bltu	r22,r17,8011a4 <_malloc_r+0x344>
  801198:	b445c83a 	sub	r2,r22,r17
  80119c:	00c003c4 	movi	r3,15
  8011a0:	18805d16 	blt	r3,r2,801318 <_malloc_r+0x4b8>
  8011a4:	05c02074 	movhi	r23,129
  8011a8:	00802074 	movhi	r2,129
  8011ac:	10ab5c04 	addi	r2,r2,-21136
  8011b0:	bde41e04 	addi	r23,r23,-28552
  8011b4:	15400017 	ldw	r21,0(r2)
  8011b8:	b8c00017 	ldw	r3,0(r23)
  8011bc:	00bfffc4 	movi	r2,-1
  8011c0:	858d883a 	add	r6,r16,r22
  8011c4:	8d6b883a 	add	r21,r17,r21
  8011c8:	1880ea26 	beq	r3,r2,801574 <_malloc_r+0x714>
  8011cc:	ad4403c4 	addi	r21,r21,4111
  8011d0:	00bc0004 	movi	r2,-4096
  8011d4:	a8aa703a 	and	r21,r21,r2
  8011d8:	a80b883a 	mov	r5,r21
  8011dc:	9009883a 	mov	r4,r18
  8011e0:	d9800015 	stw	r6,0(sp)
  8011e4:	08020800 	call	802080 <_sbrk_r>
  8011e8:	1029883a 	mov	r20,r2
  8011ec:	00bfffc4 	movi	r2,-1
  8011f0:	d9800017 	ldw	r6,0(sp)
  8011f4:	a080e826 	beq	r20,r2,801598 <_malloc_r+0x738>
  8011f8:	a180a636 	bltu	r20,r6,801494 <_malloc_r+0x634>
  8011fc:	07002074 	movhi	fp,129
  801200:	e72b6504 	addi	fp,fp,-21100
  801204:	e0800017 	ldw	r2,0(fp)
  801208:	a887883a 	add	r3,r21,r2
  80120c:	e0c00015 	stw	r3,0(fp)
  801210:	3500e626 	beq	r6,r20,8015ac <_malloc_r+0x74c>
  801214:	b9000017 	ldw	r4,0(r23)
  801218:	00bfffc4 	movi	r2,-1
  80121c:	2080ee26 	beq	r4,r2,8015d8 <_malloc_r+0x778>
  801220:	a185c83a 	sub	r2,r20,r6
  801224:	10c5883a 	add	r2,r2,r3
  801228:	e0800015 	stw	r2,0(fp)
  80122c:	a0c001cc 	andi	r3,r20,7
  801230:	1800bc26 	beq	r3,zero,801524 <_malloc_r+0x6c4>
  801234:	a0e9c83a 	sub	r20,r20,r3
  801238:	00840204 	movi	r2,4104
  80123c:	a5000204 	addi	r20,r20,8
  801240:	10c7c83a 	sub	r3,r2,r3
  801244:	a545883a 	add	r2,r20,r21
  801248:	1083ffcc 	andi	r2,r2,4095
  80124c:	18abc83a 	sub	r21,r3,r2
  801250:	a80b883a 	mov	r5,r21
  801254:	9009883a 	mov	r4,r18
  801258:	08020800 	call	802080 <_sbrk_r>
  80125c:	00ffffc4 	movi	r3,-1
  801260:	10c0e126 	beq	r2,r3,8015e8 <_malloc_r+0x788>
  801264:	1505c83a 	sub	r2,r2,r20
  801268:	1545883a 	add	r2,r2,r21
  80126c:	10800054 	ori	r2,r2,1
  801270:	e0c00017 	ldw	r3,0(fp)
  801274:	9d000215 	stw	r20,8(r19)
  801278:	a0800115 	stw	r2,4(r20)
  80127c:	a8c7883a 	add	r3,r21,r3
  801280:	e0c00015 	stw	r3,0(fp)
  801284:	84c00e26 	beq	r16,r19,8012c0 <_malloc_r+0x460>
  801288:	018003c4 	movi	r6,15
  80128c:	3580a72e 	bgeu	r6,r22,80152c <_malloc_r+0x6cc>
  801290:	81400117 	ldw	r5,4(r16)
  801294:	013ffe04 	movi	r4,-8
  801298:	b0bffd04 	addi	r2,r22,-12
  80129c:	1104703a 	and	r2,r2,r4
  8012a0:	2900004c 	andi	r4,r5,1
  8012a4:	2088b03a 	or	r4,r4,r2
  8012a8:	81000115 	stw	r4,4(r16)
  8012ac:	01400144 	movi	r5,5
  8012b0:	8089883a 	add	r4,r16,r2
  8012b4:	21400115 	stw	r5,4(r4)
  8012b8:	21400215 	stw	r5,8(r4)
  8012bc:	3080cd36 	bltu	r6,r2,8015f4 <_malloc_r+0x794>
  8012c0:	00802074 	movhi	r2,129
  8012c4:	10ab5b04 	addi	r2,r2,-21140
  8012c8:	11000017 	ldw	r4,0(r2)
  8012cc:	20c0012e 	bgeu	r4,r3,8012d4 <_malloc_r+0x474>
  8012d0:	10c00015 	stw	r3,0(r2)
  8012d4:	00802074 	movhi	r2,129
  8012d8:	10ab5a04 	addi	r2,r2,-21144
  8012dc:	11000017 	ldw	r4,0(r2)
  8012e0:	9c000217 	ldw	r16,8(r19)
  8012e4:	20c0012e 	bgeu	r4,r3,8012ec <_malloc_r+0x48c>
  8012e8:	10c00015 	stw	r3,0(r2)
  8012ec:	80c00117 	ldw	r3,4(r16)
  8012f0:	00bfff04 	movi	r2,-4
  8012f4:	1886703a 	and	r3,r3,r2
  8012f8:	1c45c83a 	sub	r2,r3,r17
  8012fc:	1c400236 	bltu	r3,r17,801308 <_malloc_r+0x4a8>
  801300:	00c003c4 	movi	r3,15
  801304:	18800416 	blt	r3,r2,801318 <_malloc_r+0x4b8>
  801308:	9009883a 	mov	r4,r18
  80130c:	08036780 	call	803678 <__malloc_unlock>
  801310:	0005883a 	mov	r2,zero
  801314:	003f7b06 	br	801104 <__alt_data_end+0xff801104>
  801318:	88c00054 	ori	r3,r17,1
  80131c:	80c00115 	stw	r3,4(r16)
  801320:	8463883a 	add	r17,r16,r17
  801324:	10800054 	ori	r2,r2,1
  801328:	9c400215 	stw	r17,8(r19)
  80132c:	88800115 	stw	r2,4(r17)
  801330:	9009883a 	mov	r4,r18
  801334:	08036780 	call	803678 <__malloc_unlock>
  801338:	80800204 	addi	r2,r16,8
  80133c:	003f7106 	br	801104 <__alt_data_end+0xff801104>
  801340:	00c00504 	movi	r3,20
  801344:	18804a2e 	bgeu	r3,r2,801470 <_malloc_r+0x610>
  801348:	00c01504 	movi	r3,84
  80134c:	18806e36 	bltu	r3,r2,801508 <_malloc_r+0x6a8>
  801350:	8804d33a 	srli	r2,r17,12
  801354:	12001bc4 	addi	r8,r2,111
  801358:	11c01b84 	addi	r7,r2,110
  80135c:	4209883a 	add	r4,r8,r8
  801360:	003edd06 	br	800ed8 <__alt_data_end+0xff800ed8>
  801364:	3804d27a 	srli	r2,r7,9
  801368:	00c00104 	movi	r3,4
  80136c:	1880442e 	bgeu	r3,r2,801480 <_malloc_r+0x620>
  801370:	00c00504 	movi	r3,20
  801374:	18808136 	bltu	r3,r2,80157c <_malloc_r+0x71c>
  801378:	11401704 	addi	r5,r2,92
  80137c:	10c016c4 	addi	r3,r2,91
  801380:	294b883a 	add	r5,r5,r5
  801384:	294b883a 	add	r5,r5,r5
  801388:	294b883a 	add	r5,r5,r5
  80138c:	994b883a 	add	r5,r19,r5
  801390:	28800017 	ldw	r2,0(r5)
  801394:	01802034 	movhi	r6,128
  801398:	297ffe04 	addi	r5,r5,-8
  80139c:	319e0704 	addi	r6,r6,30748
  8013a0:	28806526 	beq	r5,r2,801538 <_malloc_r+0x6d8>
  8013a4:	01bfff04 	movi	r6,-4
  8013a8:	10c00117 	ldw	r3,4(r2)
  8013ac:	1986703a 	and	r3,r3,r6
  8013b0:	38c0022e 	bgeu	r7,r3,8013bc <_malloc_r+0x55c>
  8013b4:	10800217 	ldw	r2,8(r2)
  8013b8:	28bffb1e 	bne	r5,r2,8013a8 <__alt_data_end+0xff8013a8>
  8013bc:	11400317 	ldw	r5,12(r2)
  8013c0:	98c00117 	ldw	r3,4(r19)
  8013c4:	81400315 	stw	r5,12(r16)
  8013c8:	80800215 	stw	r2,8(r16)
  8013cc:	2c000215 	stw	r16,8(r5)
  8013d0:	14000315 	stw	r16,12(r2)
  8013d4:	003ef806 	br	800fb8 <__alt_data_end+0xff800fb8>
  8013d8:	88c00054 	ori	r3,r17,1
  8013dc:	80c00115 	stw	r3,4(r16)
  8013e0:	8463883a 	add	r17,r16,r17
  8013e4:	34400515 	stw	r17,20(r6)
  8013e8:	34400415 	stw	r17,16(r6)
  8013ec:	10c00054 	ori	r3,r2,1
  8013f0:	8a000315 	stw	r8,12(r17)
  8013f4:	8a000215 	stw	r8,8(r17)
  8013f8:	88c00115 	stw	r3,4(r17)
  8013fc:	88a3883a 	add	r17,r17,r2
  801400:	88800015 	stw	r2,0(r17)
  801404:	9009883a 	mov	r4,r18
  801408:	08036780 	call	803678 <__malloc_unlock>
  80140c:	80800204 	addi	r2,r16,8
  801410:	003f3c06 	br	801104 <__alt_data_end+0xff801104>
  801414:	30c00117 	ldw	r3,4(r6)
  801418:	003ee706 	br	800fb8 <__alt_data_end+0xff800fb8>
  80141c:	5ac00044 	addi	r11,r11,1
  801420:	588000cc 	andi	r2,r11,3
  801424:	31800204 	addi	r6,r6,8
  801428:	103efd1e 	bne	r2,zero,801020 <__alt_data_end+0xff801020>
  80142c:	00002406 	br	8014c0 <_malloc_r+0x660>
  801430:	14000317 	ldw	r16,12(r2)
  801434:	143f251e 	bne	r2,r16,8010cc <__alt_data_end+0xff8010cc>
  801438:	21000084 	addi	r4,r4,2
  80143c:	003ebc06 	br	800f30 <__alt_data_end+0xff800f30>
  801440:	8085883a 	add	r2,r16,r2
  801444:	10c00117 	ldw	r3,4(r2)
  801448:	81000317 	ldw	r4,12(r16)
  80144c:	81400217 	ldw	r5,8(r16)
  801450:	18c00054 	ori	r3,r3,1
  801454:	10c00115 	stw	r3,4(r2)
  801458:	29000315 	stw	r4,12(r5)
  80145c:	21400215 	stw	r5,8(r4)
  801460:	9009883a 	mov	r4,r18
  801464:	08036780 	call	803678 <__malloc_unlock>
  801468:	80800204 	addi	r2,r16,8
  80146c:	003f2506 	br	801104 <__alt_data_end+0xff801104>
  801470:	12001704 	addi	r8,r2,92
  801474:	11c016c4 	addi	r7,r2,91
  801478:	4209883a 	add	r4,r8,r8
  80147c:	003e9606 	br	800ed8 <__alt_data_end+0xff800ed8>
  801480:	3804d1ba 	srli	r2,r7,6
  801484:	11400e44 	addi	r5,r2,57
  801488:	10c00e04 	addi	r3,r2,56
  80148c:	294b883a 	add	r5,r5,r5
  801490:	003fbc06 	br	801384 <__alt_data_end+0xff801384>
  801494:	84ff5926 	beq	r16,r19,8011fc <__alt_data_end+0xff8011fc>
  801498:	00802034 	movhi	r2,128
  80149c:	109e0704 	addi	r2,r2,30748
  8014a0:	14000217 	ldw	r16,8(r2)
  8014a4:	00bfff04 	movi	r2,-4
  8014a8:	80c00117 	ldw	r3,4(r16)
  8014ac:	1886703a 	and	r3,r3,r2
  8014b0:	003f9106 	br	8012f8 <__alt_data_end+0xff8012f8>
  8014b4:	60800217 	ldw	r2,8(r12)
  8014b8:	213fffc4 	addi	r4,r4,-1
  8014bc:	1300651e 	bne	r2,r12,801654 <_malloc_r+0x7f4>
  8014c0:	208000cc 	andi	r2,r4,3
  8014c4:	633ffe04 	addi	r12,r12,-8
  8014c8:	103ffa1e 	bne	r2,zero,8014b4 <__alt_data_end+0xff8014b4>
  8014cc:	98800117 	ldw	r2,4(r19)
  8014d0:	0146303a 	nor	r3,zero,r5
  8014d4:	1884703a 	and	r2,r3,r2
  8014d8:	98800115 	stw	r2,4(r19)
  8014dc:	294b883a 	add	r5,r5,r5
  8014e0:	117f2836 	bltu	r2,r5,801184 <__alt_data_end+0xff801184>
  8014e4:	283f2726 	beq	r5,zero,801184 <__alt_data_end+0xff801184>
  8014e8:	2886703a 	and	r3,r5,r2
  8014ec:	5809883a 	mov	r4,r11
  8014f0:	183ec31e 	bne	r3,zero,801000 <__alt_data_end+0xff801000>
  8014f4:	294b883a 	add	r5,r5,r5
  8014f8:	2886703a 	and	r3,r5,r2
  8014fc:	21000104 	addi	r4,r4,4
  801500:	183ffc26 	beq	r3,zero,8014f4 <__alt_data_end+0xff8014f4>
  801504:	003ebe06 	br	801000 <__alt_data_end+0xff801000>
  801508:	00c05504 	movi	r3,340
  80150c:	18801236 	bltu	r3,r2,801558 <_malloc_r+0x6f8>
  801510:	8804d3fa 	srli	r2,r17,15
  801514:	12001e04 	addi	r8,r2,120
  801518:	11c01dc4 	addi	r7,r2,119
  80151c:	4209883a 	add	r4,r8,r8
  801520:	003e6d06 	br	800ed8 <__alt_data_end+0xff800ed8>
  801524:	00c40004 	movi	r3,4096
  801528:	003f4606 	br	801244 <__alt_data_end+0xff801244>
  80152c:	00800044 	movi	r2,1
  801530:	a0800115 	stw	r2,4(r20)
  801534:	003f7406 	br	801308 <__alt_data_end+0xff801308>
  801538:	1805d0ba 	srai	r2,r3,2
  80153c:	01c00044 	movi	r7,1
  801540:	30c00117 	ldw	r3,4(r6)
  801544:	388e983a 	sll	r7,r7,r2
  801548:	2805883a 	mov	r2,r5
  80154c:	38c6b03a 	or	r3,r7,r3
  801550:	30c00115 	stw	r3,4(r6)
  801554:	003f9b06 	br	8013c4 <__alt_data_end+0xff8013c4>
  801558:	00c15504 	movi	r3,1364
  80155c:	18801a36 	bltu	r3,r2,8015c8 <_malloc_r+0x768>
  801560:	8804d4ba 	srli	r2,r17,18
  801564:	12001f44 	addi	r8,r2,125
  801568:	11c01f04 	addi	r7,r2,124
  80156c:	4209883a 	add	r4,r8,r8
  801570:	003e5906 	br	800ed8 <__alt_data_end+0xff800ed8>
  801574:	ad400404 	addi	r21,r21,16
  801578:	003f1706 	br	8011d8 <__alt_data_end+0xff8011d8>
  80157c:	00c01504 	movi	r3,84
  801580:	18802336 	bltu	r3,r2,801610 <_malloc_r+0x7b0>
  801584:	3804d33a 	srli	r2,r7,12
  801588:	11401bc4 	addi	r5,r2,111
  80158c:	10c01b84 	addi	r3,r2,110
  801590:	294b883a 	add	r5,r5,r5
  801594:	003f7b06 	br	801384 <__alt_data_end+0xff801384>
  801598:	9c000217 	ldw	r16,8(r19)
  80159c:	00bfff04 	movi	r2,-4
  8015a0:	80c00117 	ldw	r3,4(r16)
  8015a4:	1886703a 	and	r3,r3,r2
  8015a8:	003f5306 	br	8012f8 <__alt_data_end+0xff8012f8>
  8015ac:	3083ffcc 	andi	r2,r6,4095
  8015b0:	103f181e 	bne	r2,zero,801214 <__alt_data_end+0xff801214>
  8015b4:	99000217 	ldw	r4,8(r19)
  8015b8:	b545883a 	add	r2,r22,r21
  8015bc:	10800054 	ori	r2,r2,1
  8015c0:	20800115 	stw	r2,4(r4)
  8015c4:	003f3e06 	br	8012c0 <__alt_data_end+0xff8012c0>
  8015c8:	01003f84 	movi	r4,254
  8015cc:	02001fc4 	movi	r8,127
  8015d0:	01c01f84 	movi	r7,126
  8015d4:	003e4006 	br	800ed8 <__alt_data_end+0xff800ed8>
  8015d8:	00802074 	movhi	r2,129
  8015dc:	10a41e04 	addi	r2,r2,-28552
  8015e0:	15000015 	stw	r20,0(r2)
  8015e4:	003f1106 	br	80122c <__alt_data_end+0xff80122c>
  8015e8:	00800044 	movi	r2,1
  8015ec:	002b883a 	mov	r21,zero
  8015f0:	003f1f06 	br	801270 <__alt_data_end+0xff801270>
  8015f4:	81400204 	addi	r5,r16,8
  8015f8:	9009883a 	mov	r4,r18
  8015fc:	08028e80 	call	8028e8 <_free_r>
  801600:	00802074 	movhi	r2,129
  801604:	10ab6504 	addi	r2,r2,-21100
  801608:	10c00017 	ldw	r3,0(r2)
  80160c:	003f2c06 	br	8012c0 <__alt_data_end+0xff8012c0>
  801610:	00c05504 	movi	r3,340
  801614:	18800536 	bltu	r3,r2,80162c <_malloc_r+0x7cc>
  801618:	3804d3fa 	srli	r2,r7,15
  80161c:	11401e04 	addi	r5,r2,120
  801620:	10c01dc4 	addi	r3,r2,119
  801624:	294b883a 	add	r5,r5,r5
  801628:	003f5606 	br	801384 <__alt_data_end+0xff801384>
  80162c:	00c15504 	movi	r3,1364
  801630:	18800536 	bltu	r3,r2,801648 <_malloc_r+0x7e8>
  801634:	3804d4ba 	srli	r2,r7,18
  801638:	11401f44 	addi	r5,r2,125
  80163c:	10c01f04 	addi	r3,r2,124
  801640:	294b883a 	add	r5,r5,r5
  801644:	003f4f06 	br	801384 <__alt_data_end+0xff801384>
  801648:	01403f84 	movi	r5,254
  80164c:	00c01f84 	movi	r3,126
  801650:	003f4c06 	br	801384 <__alt_data_end+0xff801384>
  801654:	98800117 	ldw	r2,4(r19)
  801658:	003fa006 	br	8014dc <__alt_data_end+0xff8014dc>
  80165c:	8808d0fa 	srli	r4,r17,3
  801660:	20800044 	addi	r2,r4,1
  801664:	1085883a 	add	r2,r2,r2
  801668:	003e9006 	br	8010ac <__alt_data_end+0xff8010ac>

0080166c <memchr>:
  80166c:	208000cc 	andi	r2,r4,3
  801670:	280f883a 	mov	r7,r5
  801674:	10003426 	beq	r2,zero,801748 <memchr+0xdc>
  801678:	30bfffc4 	addi	r2,r6,-1
  80167c:	30001a26 	beq	r6,zero,8016e8 <memchr+0x7c>
  801680:	20c00003 	ldbu	r3,0(r4)
  801684:	29803fcc 	andi	r6,r5,255
  801688:	30c0051e 	bne	r6,r3,8016a0 <memchr+0x34>
  80168c:	00001806 	br	8016f0 <memchr+0x84>
  801690:	10001526 	beq	r2,zero,8016e8 <memchr+0x7c>
  801694:	20c00003 	ldbu	r3,0(r4)
  801698:	10bfffc4 	addi	r2,r2,-1
  80169c:	30c01426 	beq	r6,r3,8016f0 <memchr+0x84>
  8016a0:	21000044 	addi	r4,r4,1
  8016a4:	20c000cc 	andi	r3,r4,3
  8016a8:	183ff91e 	bne	r3,zero,801690 <__alt_data_end+0xff801690>
  8016ac:	020000c4 	movi	r8,3
  8016b0:	40801136 	bltu	r8,r2,8016f8 <memchr+0x8c>
  8016b4:	10000c26 	beq	r2,zero,8016e8 <memchr+0x7c>
  8016b8:	20c00003 	ldbu	r3,0(r4)
  8016bc:	29403fcc 	andi	r5,r5,255
  8016c0:	28c00b26 	beq	r5,r3,8016f0 <memchr+0x84>
  8016c4:	20c00044 	addi	r3,r4,1
  8016c8:	39803fcc 	andi	r6,r7,255
  8016cc:	2089883a 	add	r4,r4,r2
  8016d0:	00000306 	br	8016e0 <memchr+0x74>
  8016d4:	18c00044 	addi	r3,r3,1
  8016d8:	197fffc3 	ldbu	r5,-1(r3)
  8016dc:	31400526 	beq	r6,r5,8016f4 <memchr+0x88>
  8016e0:	1805883a 	mov	r2,r3
  8016e4:	20fffb1e 	bne	r4,r3,8016d4 <__alt_data_end+0xff8016d4>
  8016e8:	0005883a 	mov	r2,zero
  8016ec:	f800283a 	ret
  8016f0:	2005883a 	mov	r2,r4
  8016f4:	f800283a 	ret
  8016f8:	28c03fcc 	andi	r3,r5,255
  8016fc:	1812923a 	slli	r9,r3,8
  801700:	02ffbff4 	movhi	r11,65279
  801704:	02a02074 	movhi	r10,32897
  801708:	48d2b03a 	or	r9,r9,r3
  80170c:	4806943a 	slli	r3,r9,16
  801710:	5affbfc4 	addi	r11,r11,-257
  801714:	52a02004 	addi	r10,r10,-32640
  801718:	48d2b03a 	or	r9,r9,r3
  80171c:	20c00017 	ldw	r3,0(r4)
  801720:	48c6f03a 	xor	r3,r9,r3
  801724:	1acd883a 	add	r6,r3,r11
  801728:	00c6303a 	nor	r3,zero,r3
  80172c:	30c6703a 	and	r3,r6,r3
  801730:	1a86703a 	and	r3,r3,r10
  801734:	183fe01e 	bne	r3,zero,8016b8 <__alt_data_end+0xff8016b8>
  801738:	10bfff04 	addi	r2,r2,-4
  80173c:	21000104 	addi	r4,r4,4
  801740:	40bff636 	bltu	r8,r2,80171c <__alt_data_end+0xff80171c>
  801744:	003fdb06 	br	8016b4 <__alt_data_end+0xff8016b4>
  801748:	3005883a 	mov	r2,r6
  80174c:	003fd706 	br	8016ac <__alt_data_end+0xff8016ac>

00801750 <memcpy>:
  801750:	defffd04 	addi	sp,sp,-12
  801754:	dfc00215 	stw	ra,8(sp)
  801758:	dc400115 	stw	r17,4(sp)
  80175c:	dc000015 	stw	r16,0(sp)
  801760:	00c003c4 	movi	r3,15
  801764:	2005883a 	mov	r2,r4
  801768:	1980452e 	bgeu	r3,r6,801880 <memcpy+0x130>
  80176c:	2906b03a 	or	r3,r5,r4
  801770:	18c000cc 	andi	r3,r3,3
  801774:	1800441e 	bne	r3,zero,801888 <memcpy+0x138>
  801778:	347ffc04 	addi	r17,r6,-16
  80177c:	8822d13a 	srli	r17,r17,4
  801780:	28c00104 	addi	r3,r5,4
  801784:	23400104 	addi	r13,r4,4
  801788:	8820913a 	slli	r16,r17,4
  80178c:	2b000204 	addi	r12,r5,8
  801790:	22c00204 	addi	r11,r4,8
  801794:	84000504 	addi	r16,r16,20
  801798:	2a800304 	addi	r10,r5,12
  80179c:	22400304 	addi	r9,r4,12
  8017a0:	2c21883a 	add	r16,r5,r16
  8017a4:	2811883a 	mov	r8,r5
  8017a8:	200f883a 	mov	r7,r4
  8017ac:	41000017 	ldw	r4,0(r8)
  8017b0:	1fc00017 	ldw	ra,0(r3)
  8017b4:	63c00017 	ldw	r15,0(r12)
  8017b8:	39000015 	stw	r4,0(r7)
  8017bc:	53800017 	ldw	r14,0(r10)
  8017c0:	6fc00015 	stw	ra,0(r13)
  8017c4:	5bc00015 	stw	r15,0(r11)
  8017c8:	4b800015 	stw	r14,0(r9)
  8017cc:	18c00404 	addi	r3,r3,16
  8017d0:	39c00404 	addi	r7,r7,16
  8017d4:	42000404 	addi	r8,r8,16
  8017d8:	6b400404 	addi	r13,r13,16
  8017dc:	63000404 	addi	r12,r12,16
  8017e0:	5ac00404 	addi	r11,r11,16
  8017e4:	52800404 	addi	r10,r10,16
  8017e8:	4a400404 	addi	r9,r9,16
  8017ec:	1c3fef1e 	bne	r3,r16,8017ac <__alt_data_end+0xff8017ac>
  8017f0:	89c00044 	addi	r7,r17,1
  8017f4:	380e913a 	slli	r7,r7,4
  8017f8:	310003cc 	andi	r4,r6,15
  8017fc:	02c000c4 	movi	r11,3
  801800:	11c7883a 	add	r3,r2,r7
  801804:	29cb883a 	add	r5,r5,r7
  801808:	5900212e 	bgeu	r11,r4,801890 <memcpy+0x140>
  80180c:	1813883a 	mov	r9,r3
  801810:	2811883a 	mov	r8,r5
  801814:	200f883a 	mov	r7,r4
  801818:	42800017 	ldw	r10,0(r8)
  80181c:	4a400104 	addi	r9,r9,4
  801820:	39ffff04 	addi	r7,r7,-4
  801824:	4abfff15 	stw	r10,-4(r9)
  801828:	42000104 	addi	r8,r8,4
  80182c:	59fffa36 	bltu	r11,r7,801818 <__alt_data_end+0xff801818>
  801830:	213fff04 	addi	r4,r4,-4
  801834:	2008d0ba 	srli	r4,r4,2
  801838:	318000cc 	andi	r6,r6,3
  80183c:	21000044 	addi	r4,r4,1
  801840:	2109883a 	add	r4,r4,r4
  801844:	2109883a 	add	r4,r4,r4
  801848:	1907883a 	add	r3,r3,r4
  80184c:	290b883a 	add	r5,r5,r4
  801850:	30000626 	beq	r6,zero,80186c <memcpy+0x11c>
  801854:	198d883a 	add	r6,r3,r6
  801858:	29c00003 	ldbu	r7,0(r5)
  80185c:	18c00044 	addi	r3,r3,1
  801860:	29400044 	addi	r5,r5,1
  801864:	19ffffc5 	stb	r7,-1(r3)
  801868:	19bffb1e 	bne	r3,r6,801858 <__alt_data_end+0xff801858>
  80186c:	dfc00217 	ldw	ra,8(sp)
  801870:	dc400117 	ldw	r17,4(sp)
  801874:	dc000017 	ldw	r16,0(sp)
  801878:	dec00304 	addi	sp,sp,12
  80187c:	f800283a 	ret
  801880:	2007883a 	mov	r3,r4
  801884:	003ff206 	br	801850 <__alt_data_end+0xff801850>
  801888:	2007883a 	mov	r3,r4
  80188c:	003ff106 	br	801854 <__alt_data_end+0xff801854>
  801890:	200d883a 	mov	r6,r4
  801894:	003fee06 	br	801850 <__alt_data_end+0xff801850>

00801898 <memmove>:
  801898:	2005883a 	mov	r2,r4
  80189c:	29000b2e 	bgeu	r5,r4,8018cc <memmove+0x34>
  8018a0:	298f883a 	add	r7,r5,r6
  8018a4:	21c0092e 	bgeu	r4,r7,8018cc <memmove+0x34>
  8018a8:	2187883a 	add	r3,r4,r6
  8018ac:	198bc83a 	sub	r5,r3,r6
  8018b0:	30004826 	beq	r6,zero,8019d4 <memmove+0x13c>
  8018b4:	39ffffc4 	addi	r7,r7,-1
  8018b8:	39000003 	ldbu	r4,0(r7)
  8018bc:	18ffffc4 	addi	r3,r3,-1
  8018c0:	19000005 	stb	r4,0(r3)
  8018c4:	28fffb1e 	bne	r5,r3,8018b4 <__alt_data_end+0xff8018b4>
  8018c8:	f800283a 	ret
  8018cc:	00c003c4 	movi	r3,15
  8018d0:	1980412e 	bgeu	r3,r6,8019d8 <memmove+0x140>
  8018d4:	2886b03a 	or	r3,r5,r2
  8018d8:	18c000cc 	andi	r3,r3,3
  8018dc:	1800401e 	bne	r3,zero,8019e0 <memmove+0x148>
  8018e0:	33fffc04 	addi	r15,r6,-16
  8018e4:	781ed13a 	srli	r15,r15,4
  8018e8:	28c00104 	addi	r3,r5,4
  8018ec:	13400104 	addi	r13,r2,4
  8018f0:	781c913a 	slli	r14,r15,4
  8018f4:	2b000204 	addi	r12,r5,8
  8018f8:	12c00204 	addi	r11,r2,8
  8018fc:	73800504 	addi	r14,r14,20
  801900:	2a800304 	addi	r10,r5,12
  801904:	12400304 	addi	r9,r2,12
  801908:	2b9d883a 	add	r14,r5,r14
  80190c:	2811883a 	mov	r8,r5
  801910:	100f883a 	mov	r7,r2
  801914:	41000017 	ldw	r4,0(r8)
  801918:	39c00404 	addi	r7,r7,16
  80191c:	18c00404 	addi	r3,r3,16
  801920:	393ffc15 	stw	r4,-16(r7)
  801924:	193ffc17 	ldw	r4,-16(r3)
  801928:	6b400404 	addi	r13,r13,16
  80192c:	5ac00404 	addi	r11,r11,16
  801930:	693ffc15 	stw	r4,-16(r13)
  801934:	61000017 	ldw	r4,0(r12)
  801938:	4a400404 	addi	r9,r9,16
  80193c:	42000404 	addi	r8,r8,16
  801940:	593ffc15 	stw	r4,-16(r11)
  801944:	51000017 	ldw	r4,0(r10)
  801948:	63000404 	addi	r12,r12,16
  80194c:	52800404 	addi	r10,r10,16
  801950:	493ffc15 	stw	r4,-16(r9)
  801954:	1bbfef1e 	bne	r3,r14,801914 <__alt_data_end+0xff801914>
  801958:	79000044 	addi	r4,r15,1
  80195c:	2008913a 	slli	r4,r4,4
  801960:	328003cc 	andi	r10,r6,15
  801964:	02c000c4 	movi	r11,3
  801968:	1107883a 	add	r3,r2,r4
  80196c:	290b883a 	add	r5,r5,r4
  801970:	5a801e2e 	bgeu	r11,r10,8019ec <memmove+0x154>
  801974:	1813883a 	mov	r9,r3
  801978:	2811883a 	mov	r8,r5
  80197c:	500f883a 	mov	r7,r10
  801980:	41000017 	ldw	r4,0(r8)
  801984:	4a400104 	addi	r9,r9,4
  801988:	39ffff04 	addi	r7,r7,-4
  80198c:	493fff15 	stw	r4,-4(r9)
  801990:	42000104 	addi	r8,r8,4
  801994:	59fffa36 	bltu	r11,r7,801980 <__alt_data_end+0xff801980>
  801998:	513fff04 	addi	r4,r10,-4
  80199c:	2008d0ba 	srli	r4,r4,2
  8019a0:	318000cc 	andi	r6,r6,3
  8019a4:	21000044 	addi	r4,r4,1
  8019a8:	2109883a 	add	r4,r4,r4
  8019ac:	2109883a 	add	r4,r4,r4
  8019b0:	1907883a 	add	r3,r3,r4
  8019b4:	290b883a 	add	r5,r5,r4
  8019b8:	30000b26 	beq	r6,zero,8019e8 <memmove+0x150>
  8019bc:	198d883a 	add	r6,r3,r6
  8019c0:	29c00003 	ldbu	r7,0(r5)
  8019c4:	18c00044 	addi	r3,r3,1
  8019c8:	29400044 	addi	r5,r5,1
  8019cc:	19ffffc5 	stb	r7,-1(r3)
  8019d0:	19bffb1e 	bne	r3,r6,8019c0 <__alt_data_end+0xff8019c0>
  8019d4:	f800283a 	ret
  8019d8:	1007883a 	mov	r3,r2
  8019dc:	003ff606 	br	8019b8 <__alt_data_end+0xff8019b8>
  8019e0:	1007883a 	mov	r3,r2
  8019e4:	003ff506 	br	8019bc <__alt_data_end+0xff8019bc>
  8019e8:	f800283a 	ret
  8019ec:	500d883a 	mov	r6,r10
  8019f0:	003ff106 	br	8019b8 <__alt_data_end+0xff8019b8>

008019f4 <memset>:
  8019f4:	20c000cc 	andi	r3,r4,3
  8019f8:	2005883a 	mov	r2,r4
  8019fc:	18004426 	beq	r3,zero,801b10 <memset+0x11c>
  801a00:	31ffffc4 	addi	r7,r6,-1
  801a04:	30004026 	beq	r6,zero,801b08 <memset+0x114>
  801a08:	2813883a 	mov	r9,r5
  801a0c:	200d883a 	mov	r6,r4
  801a10:	2007883a 	mov	r3,r4
  801a14:	00000406 	br	801a28 <memset+0x34>
  801a18:	3a3fffc4 	addi	r8,r7,-1
  801a1c:	31800044 	addi	r6,r6,1
  801a20:	38003926 	beq	r7,zero,801b08 <memset+0x114>
  801a24:	400f883a 	mov	r7,r8
  801a28:	18c00044 	addi	r3,r3,1
  801a2c:	32400005 	stb	r9,0(r6)
  801a30:	1a0000cc 	andi	r8,r3,3
  801a34:	403ff81e 	bne	r8,zero,801a18 <__alt_data_end+0xff801a18>
  801a38:	010000c4 	movi	r4,3
  801a3c:	21c02d2e 	bgeu	r4,r7,801af4 <memset+0x100>
  801a40:	29003fcc 	andi	r4,r5,255
  801a44:	200c923a 	slli	r6,r4,8
  801a48:	3108b03a 	or	r4,r6,r4
  801a4c:	200c943a 	slli	r6,r4,16
  801a50:	218cb03a 	or	r6,r4,r6
  801a54:	010003c4 	movi	r4,15
  801a58:	21c0182e 	bgeu	r4,r7,801abc <memset+0xc8>
  801a5c:	3b3ffc04 	addi	r12,r7,-16
  801a60:	6018d13a 	srli	r12,r12,4
  801a64:	1a000104 	addi	r8,r3,4
  801a68:	1ac00204 	addi	r11,r3,8
  801a6c:	6008913a 	slli	r4,r12,4
  801a70:	1a800304 	addi	r10,r3,12
  801a74:	1813883a 	mov	r9,r3
  801a78:	21000504 	addi	r4,r4,20
  801a7c:	1909883a 	add	r4,r3,r4
  801a80:	49800015 	stw	r6,0(r9)
  801a84:	41800015 	stw	r6,0(r8)
  801a88:	59800015 	stw	r6,0(r11)
  801a8c:	51800015 	stw	r6,0(r10)
  801a90:	42000404 	addi	r8,r8,16
  801a94:	4a400404 	addi	r9,r9,16
  801a98:	5ac00404 	addi	r11,r11,16
  801a9c:	52800404 	addi	r10,r10,16
  801aa0:	413ff71e 	bne	r8,r4,801a80 <__alt_data_end+0xff801a80>
  801aa4:	63000044 	addi	r12,r12,1
  801aa8:	6018913a 	slli	r12,r12,4
  801aac:	39c003cc 	andi	r7,r7,15
  801ab0:	010000c4 	movi	r4,3
  801ab4:	1b07883a 	add	r3,r3,r12
  801ab8:	21c00e2e 	bgeu	r4,r7,801af4 <memset+0x100>
  801abc:	1813883a 	mov	r9,r3
  801ac0:	3811883a 	mov	r8,r7
  801ac4:	010000c4 	movi	r4,3
  801ac8:	49800015 	stw	r6,0(r9)
  801acc:	423fff04 	addi	r8,r8,-4
  801ad0:	4a400104 	addi	r9,r9,4
  801ad4:	223ffc36 	bltu	r4,r8,801ac8 <__alt_data_end+0xff801ac8>
  801ad8:	393fff04 	addi	r4,r7,-4
  801adc:	2008d0ba 	srli	r4,r4,2
  801ae0:	39c000cc 	andi	r7,r7,3
  801ae4:	21000044 	addi	r4,r4,1
  801ae8:	2109883a 	add	r4,r4,r4
  801aec:	2109883a 	add	r4,r4,r4
  801af0:	1907883a 	add	r3,r3,r4
  801af4:	38000526 	beq	r7,zero,801b0c <memset+0x118>
  801af8:	19cf883a 	add	r7,r3,r7
  801afc:	19400005 	stb	r5,0(r3)
  801b00:	18c00044 	addi	r3,r3,1
  801b04:	38fffd1e 	bne	r7,r3,801afc <__alt_data_end+0xff801afc>
  801b08:	f800283a 	ret
  801b0c:	f800283a 	ret
  801b10:	2007883a 	mov	r3,r4
  801b14:	300f883a 	mov	r7,r6
  801b18:	003fc706 	br	801a38 <__alt_data_end+0xff801a38>

00801b1c <_realloc_r>:
  801b1c:	defff604 	addi	sp,sp,-40
  801b20:	dc800215 	stw	r18,8(sp)
  801b24:	dfc00915 	stw	ra,36(sp)
  801b28:	df000815 	stw	fp,32(sp)
  801b2c:	ddc00715 	stw	r23,28(sp)
  801b30:	dd800615 	stw	r22,24(sp)
  801b34:	dd400515 	stw	r21,20(sp)
  801b38:	dd000415 	stw	r20,16(sp)
  801b3c:	dcc00315 	stw	r19,12(sp)
  801b40:	dc400115 	stw	r17,4(sp)
  801b44:	dc000015 	stw	r16,0(sp)
  801b48:	3025883a 	mov	r18,r6
  801b4c:	2800b726 	beq	r5,zero,801e2c <_realloc_r+0x310>
  801b50:	282b883a 	mov	r21,r5
  801b54:	2029883a 	mov	r20,r4
  801b58:	08036540 	call	803654 <__malloc_lock>
  801b5c:	a8bfff17 	ldw	r2,-4(r21)
  801b60:	043fff04 	movi	r16,-4
  801b64:	90c002c4 	addi	r3,r18,11
  801b68:	01000584 	movi	r4,22
  801b6c:	acfffe04 	addi	r19,r21,-8
  801b70:	1420703a 	and	r16,r2,r16
  801b74:	20c0332e 	bgeu	r4,r3,801c44 <_realloc_r+0x128>
  801b78:	047ffe04 	movi	r17,-8
  801b7c:	1c62703a 	and	r17,r3,r17
  801b80:	8807883a 	mov	r3,r17
  801b84:	88005816 	blt	r17,zero,801ce8 <_realloc_r+0x1cc>
  801b88:	8c805736 	bltu	r17,r18,801ce8 <_realloc_r+0x1cc>
  801b8c:	80c0300e 	bge	r16,r3,801c50 <_realloc_r+0x134>
  801b90:	07002034 	movhi	fp,128
  801b94:	e71e0704 	addi	fp,fp,30748
  801b98:	e1c00217 	ldw	r7,8(fp)
  801b9c:	9c09883a 	add	r4,r19,r16
  801ba0:	22000117 	ldw	r8,4(r4)
  801ba4:	21c06326 	beq	r4,r7,801d34 <_realloc_r+0x218>
  801ba8:	017fff84 	movi	r5,-2
  801bac:	414a703a 	and	r5,r8,r5
  801bb0:	214b883a 	add	r5,r4,r5
  801bb4:	29800117 	ldw	r6,4(r5)
  801bb8:	3180004c 	andi	r6,r6,1
  801bbc:	30003f26 	beq	r6,zero,801cbc <_realloc_r+0x1a0>
  801bc0:	1080004c 	andi	r2,r2,1
  801bc4:	10008326 	beq	r2,zero,801dd4 <_realloc_r+0x2b8>
  801bc8:	900b883a 	mov	r5,r18
  801bcc:	a009883a 	mov	r4,r20
  801bd0:	0800e600 	call	800e60 <_malloc_r>
  801bd4:	1025883a 	mov	r18,r2
  801bd8:	10011e26 	beq	r2,zero,802054 <_realloc_r+0x538>
  801bdc:	a93fff17 	ldw	r4,-4(r21)
  801be0:	10fffe04 	addi	r3,r2,-8
  801be4:	00bfff84 	movi	r2,-2
  801be8:	2084703a 	and	r2,r4,r2
  801bec:	9885883a 	add	r2,r19,r2
  801bf0:	1880ee26 	beq	r3,r2,801fac <_realloc_r+0x490>
  801bf4:	81bfff04 	addi	r6,r16,-4
  801bf8:	00800904 	movi	r2,36
  801bfc:	1180b836 	bltu	r2,r6,801ee0 <_realloc_r+0x3c4>
  801c00:	00c004c4 	movi	r3,19
  801c04:	19809636 	bltu	r3,r6,801e60 <_realloc_r+0x344>
  801c08:	9005883a 	mov	r2,r18
  801c0c:	a807883a 	mov	r3,r21
  801c10:	19000017 	ldw	r4,0(r3)
  801c14:	11000015 	stw	r4,0(r2)
  801c18:	19000117 	ldw	r4,4(r3)
  801c1c:	11000115 	stw	r4,4(r2)
  801c20:	18c00217 	ldw	r3,8(r3)
  801c24:	10c00215 	stw	r3,8(r2)
  801c28:	a80b883a 	mov	r5,r21
  801c2c:	a009883a 	mov	r4,r20
  801c30:	08028e80 	call	8028e8 <_free_r>
  801c34:	a009883a 	mov	r4,r20
  801c38:	08036780 	call	803678 <__malloc_unlock>
  801c3c:	9005883a 	mov	r2,r18
  801c40:	00001206 	br	801c8c <_realloc_r+0x170>
  801c44:	00c00404 	movi	r3,16
  801c48:	1823883a 	mov	r17,r3
  801c4c:	003fce06 	br	801b88 <__alt_data_end+0xff801b88>
  801c50:	a825883a 	mov	r18,r21
  801c54:	8445c83a 	sub	r2,r16,r17
  801c58:	00c003c4 	movi	r3,15
  801c5c:	18802636 	bltu	r3,r2,801cf8 <_realloc_r+0x1dc>
  801c60:	99800117 	ldw	r6,4(r19)
  801c64:	9c07883a 	add	r3,r19,r16
  801c68:	3180004c 	andi	r6,r6,1
  801c6c:	3420b03a 	or	r16,r6,r16
  801c70:	9c000115 	stw	r16,4(r19)
  801c74:	18800117 	ldw	r2,4(r3)
  801c78:	10800054 	ori	r2,r2,1
  801c7c:	18800115 	stw	r2,4(r3)
  801c80:	a009883a 	mov	r4,r20
  801c84:	08036780 	call	803678 <__malloc_unlock>
  801c88:	9005883a 	mov	r2,r18
  801c8c:	dfc00917 	ldw	ra,36(sp)
  801c90:	df000817 	ldw	fp,32(sp)
  801c94:	ddc00717 	ldw	r23,28(sp)
  801c98:	dd800617 	ldw	r22,24(sp)
  801c9c:	dd400517 	ldw	r21,20(sp)
  801ca0:	dd000417 	ldw	r20,16(sp)
  801ca4:	dcc00317 	ldw	r19,12(sp)
  801ca8:	dc800217 	ldw	r18,8(sp)
  801cac:	dc400117 	ldw	r17,4(sp)
  801cb0:	dc000017 	ldw	r16,0(sp)
  801cb4:	dec00a04 	addi	sp,sp,40
  801cb8:	f800283a 	ret
  801cbc:	017fff04 	movi	r5,-4
  801cc0:	414a703a 	and	r5,r8,r5
  801cc4:	814d883a 	add	r6,r16,r5
  801cc8:	30c01f16 	blt	r6,r3,801d48 <_realloc_r+0x22c>
  801ccc:	20800317 	ldw	r2,12(r4)
  801cd0:	20c00217 	ldw	r3,8(r4)
  801cd4:	a825883a 	mov	r18,r21
  801cd8:	3021883a 	mov	r16,r6
  801cdc:	18800315 	stw	r2,12(r3)
  801ce0:	10c00215 	stw	r3,8(r2)
  801ce4:	003fdb06 	br	801c54 <__alt_data_end+0xff801c54>
  801ce8:	00800304 	movi	r2,12
  801cec:	a0800015 	stw	r2,0(r20)
  801cf0:	0005883a 	mov	r2,zero
  801cf4:	003fe506 	br	801c8c <__alt_data_end+0xff801c8c>
  801cf8:	98c00117 	ldw	r3,4(r19)
  801cfc:	9c4b883a 	add	r5,r19,r17
  801d00:	11000054 	ori	r4,r2,1
  801d04:	18c0004c 	andi	r3,r3,1
  801d08:	1c62b03a 	or	r17,r3,r17
  801d0c:	9c400115 	stw	r17,4(r19)
  801d10:	29000115 	stw	r4,4(r5)
  801d14:	2885883a 	add	r2,r5,r2
  801d18:	10c00117 	ldw	r3,4(r2)
  801d1c:	29400204 	addi	r5,r5,8
  801d20:	a009883a 	mov	r4,r20
  801d24:	18c00054 	ori	r3,r3,1
  801d28:	10c00115 	stw	r3,4(r2)
  801d2c:	08028e80 	call	8028e8 <_free_r>
  801d30:	003fd306 	br	801c80 <__alt_data_end+0xff801c80>
  801d34:	017fff04 	movi	r5,-4
  801d38:	414a703a 	and	r5,r8,r5
  801d3c:	89800404 	addi	r6,r17,16
  801d40:	8151883a 	add	r8,r16,r5
  801d44:	4180590e 	bge	r8,r6,801eac <_realloc_r+0x390>
  801d48:	1080004c 	andi	r2,r2,1
  801d4c:	103f9e1e 	bne	r2,zero,801bc8 <__alt_data_end+0xff801bc8>
  801d50:	adbffe17 	ldw	r22,-8(r21)
  801d54:	00bfff04 	movi	r2,-4
  801d58:	9dadc83a 	sub	r22,r19,r22
  801d5c:	b1800117 	ldw	r6,4(r22)
  801d60:	3084703a 	and	r2,r6,r2
  801d64:	20002026 	beq	r4,zero,801de8 <_realloc_r+0x2cc>
  801d68:	80af883a 	add	r23,r16,r2
  801d6c:	b96f883a 	add	r23,r23,r5
  801d70:	21c05f26 	beq	r4,r7,801ef0 <_realloc_r+0x3d4>
  801d74:	b8c01c16 	blt	r23,r3,801de8 <_realloc_r+0x2cc>
  801d78:	20800317 	ldw	r2,12(r4)
  801d7c:	20c00217 	ldw	r3,8(r4)
  801d80:	81bfff04 	addi	r6,r16,-4
  801d84:	01000904 	movi	r4,36
  801d88:	18800315 	stw	r2,12(r3)
  801d8c:	10c00215 	stw	r3,8(r2)
  801d90:	b0c00217 	ldw	r3,8(r22)
  801d94:	b0800317 	ldw	r2,12(r22)
  801d98:	b4800204 	addi	r18,r22,8
  801d9c:	18800315 	stw	r2,12(r3)
  801da0:	10c00215 	stw	r3,8(r2)
  801da4:	21801b36 	bltu	r4,r6,801e14 <_realloc_r+0x2f8>
  801da8:	008004c4 	movi	r2,19
  801dac:	1180352e 	bgeu	r2,r6,801e84 <_realloc_r+0x368>
  801db0:	a8800017 	ldw	r2,0(r21)
  801db4:	b0800215 	stw	r2,8(r22)
  801db8:	a8800117 	ldw	r2,4(r21)
  801dbc:	b0800315 	stw	r2,12(r22)
  801dc0:	008006c4 	movi	r2,27
  801dc4:	11807f36 	bltu	r2,r6,801fc4 <_realloc_r+0x4a8>
  801dc8:	b0800404 	addi	r2,r22,16
  801dcc:	ad400204 	addi	r21,r21,8
  801dd0:	00002d06 	br	801e88 <_realloc_r+0x36c>
  801dd4:	adbffe17 	ldw	r22,-8(r21)
  801dd8:	00bfff04 	movi	r2,-4
  801ddc:	9dadc83a 	sub	r22,r19,r22
  801de0:	b1000117 	ldw	r4,4(r22)
  801de4:	2084703a 	and	r2,r4,r2
  801de8:	b03f7726 	beq	r22,zero,801bc8 <__alt_data_end+0xff801bc8>
  801dec:	80af883a 	add	r23,r16,r2
  801df0:	b8ff7516 	blt	r23,r3,801bc8 <__alt_data_end+0xff801bc8>
  801df4:	b0800317 	ldw	r2,12(r22)
  801df8:	b0c00217 	ldw	r3,8(r22)
  801dfc:	81bfff04 	addi	r6,r16,-4
  801e00:	01000904 	movi	r4,36
  801e04:	18800315 	stw	r2,12(r3)
  801e08:	10c00215 	stw	r3,8(r2)
  801e0c:	b4800204 	addi	r18,r22,8
  801e10:	21bfe52e 	bgeu	r4,r6,801da8 <__alt_data_end+0xff801da8>
  801e14:	a80b883a 	mov	r5,r21
  801e18:	9009883a 	mov	r4,r18
  801e1c:	08018980 	call	801898 <memmove>
  801e20:	b821883a 	mov	r16,r23
  801e24:	b027883a 	mov	r19,r22
  801e28:	003f8a06 	br	801c54 <__alt_data_end+0xff801c54>
  801e2c:	300b883a 	mov	r5,r6
  801e30:	dfc00917 	ldw	ra,36(sp)
  801e34:	df000817 	ldw	fp,32(sp)
  801e38:	ddc00717 	ldw	r23,28(sp)
  801e3c:	dd800617 	ldw	r22,24(sp)
  801e40:	dd400517 	ldw	r21,20(sp)
  801e44:	dd000417 	ldw	r20,16(sp)
  801e48:	dcc00317 	ldw	r19,12(sp)
  801e4c:	dc800217 	ldw	r18,8(sp)
  801e50:	dc400117 	ldw	r17,4(sp)
  801e54:	dc000017 	ldw	r16,0(sp)
  801e58:	dec00a04 	addi	sp,sp,40
  801e5c:	0800e601 	jmpi	800e60 <_malloc_r>
  801e60:	a8c00017 	ldw	r3,0(r21)
  801e64:	90c00015 	stw	r3,0(r18)
  801e68:	a8c00117 	ldw	r3,4(r21)
  801e6c:	90c00115 	stw	r3,4(r18)
  801e70:	00c006c4 	movi	r3,27
  801e74:	19804536 	bltu	r3,r6,801f8c <_realloc_r+0x470>
  801e78:	90800204 	addi	r2,r18,8
  801e7c:	a8c00204 	addi	r3,r21,8
  801e80:	003f6306 	br	801c10 <__alt_data_end+0xff801c10>
  801e84:	9005883a 	mov	r2,r18
  801e88:	a8c00017 	ldw	r3,0(r21)
  801e8c:	b821883a 	mov	r16,r23
  801e90:	b027883a 	mov	r19,r22
  801e94:	10c00015 	stw	r3,0(r2)
  801e98:	a8c00117 	ldw	r3,4(r21)
  801e9c:	10c00115 	stw	r3,4(r2)
  801ea0:	a8c00217 	ldw	r3,8(r21)
  801ea4:	10c00215 	stw	r3,8(r2)
  801ea8:	003f6a06 	br	801c54 <__alt_data_end+0xff801c54>
  801eac:	9c67883a 	add	r19,r19,r17
  801eb0:	4445c83a 	sub	r2,r8,r17
  801eb4:	e4c00215 	stw	r19,8(fp)
  801eb8:	10800054 	ori	r2,r2,1
  801ebc:	98800115 	stw	r2,4(r19)
  801ec0:	a8bfff17 	ldw	r2,-4(r21)
  801ec4:	a009883a 	mov	r4,r20
  801ec8:	1080004c 	andi	r2,r2,1
  801ecc:	1462b03a 	or	r17,r2,r17
  801ed0:	ac7fff15 	stw	r17,-4(r21)
  801ed4:	08036780 	call	803678 <__malloc_unlock>
  801ed8:	a805883a 	mov	r2,r21
  801edc:	003f6b06 	br	801c8c <__alt_data_end+0xff801c8c>
  801ee0:	a80b883a 	mov	r5,r21
  801ee4:	9009883a 	mov	r4,r18
  801ee8:	08018980 	call	801898 <memmove>
  801eec:	003f4e06 	br	801c28 <__alt_data_end+0xff801c28>
  801ef0:	89000404 	addi	r4,r17,16
  801ef4:	b93fbc16 	blt	r23,r4,801de8 <__alt_data_end+0xff801de8>
  801ef8:	b0800317 	ldw	r2,12(r22)
  801efc:	b0c00217 	ldw	r3,8(r22)
  801f00:	81bfff04 	addi	r6,r16,-4
  801f04:	01000904 	movi	r4,36
  801f08:	18800315 	stw	r2,12(r3)
  801f0c:	10c00215 	stw	r3,8(r2)
  801f10:	b4800204 	addi	r18,r22,8
  801f14:	21804336 	bltu	r4,r6,802024 <_realloc_r+0x508>
  801f18:	008004c4 	movi	r2,19
  801f1c:	11803f2e 	bgeu	r2,r6,80201c <_realloc_r+0x500>
  801f20:	a8800017 	ldw	r2,0(r21)
  801f24:	b0800215 	stw	r2,8(r22)
  801f28:	a8800117 	ldw	r2,4(r21)
  801f2c:	b0800315 	stw	r2,12(r22)
  801f30:	008006c4 	movi	r2,27
  801f34:	11803f36 	bltu	r2,r6,802034 <_realloc_r+0x518>
  801f38:	b0800404 	addi	r2,r22,16
  801f3c:	ad400204 	addi	r21,r21,8
  801f40:	a8c00017 	ldw	r3,0(r21)
  801f44:	10c00015 	stw	r3,0(r2)
  801f48:	a8c00117 	ldw	r3,4(r21)
  801f4c:	10c00115 	stw	r3,4(r2)
  801f50:	a8c00217 	ldw	r3,8(r21)
  801f54:	10c00215 	stw	r3,8(r2)
  801f58:	b447883a 	add	r3,r22,r17
  801f5c:	bc45c83a 	sub	r2,r23,r17
  801f60:	e0c00215 	stw	r3,8(fp)
  801f64:	10800054 	ori	r2,r2,1
  801f68:	18800115 	stw	r2,4(r3)
  801f6c:	b0800117 	ldw	r2,4(r22)
  801f70:	a009883a 	mov	r4,r20
  801f74:	1080004c 	andi	r2,r2,1
  801f78:	1462b03a 	or	r17,r2,r17
  801f7c:	b4400115 	stw	r17,4(r22)
  801f80:	08036780 	call	803678 <__malloc_unlock>
  801f84:	9005883a 	mov	r2,r18
  801f88:	003f4006 	br	801c8c <__alt_data_end+0xff801c8c>
  801f8c:	a8c00217 	ldw	r3,8(r21)
  801f90:	90c00215 	stw	r3,8(r18)
  801f94:	a8c00317 	ldw	r3,12(r21)
  801f98:	90c00315 	stw	r3,12(r18)
  801f9c:	30801126 	beq	r6,r2,801fe4 <_realloc_r+0x4c8>
  801fa0:	90800404 	addi	r2,r18,16
  801fa4:	a8c00404 	addi	r3,r21,16
  801fa8:	003f1906 	br	801c10 <__alt_data_end+0xff801c10>
  801fac:	90ffff17 	ldw	r3,-4(r18)
  801fb0:	00bfff04 	movi	r2,-4
  801fb4:	a825883a 	mov	r18,r21
  801fb8:	1884703a 	and	r2,r3,r2
  801fbc:	80a1883a 	add	r16,r16,r2
  801fc0:	003f2406 	br	801c54 <__alt_data_end+0xff801c54>
  801fc4:	a8800217 	ldw	r2,8(r21)
  801fc8:	b0800415 	stw	r2,16(r22)
  801fcc:	a8800317 	ldw	r2,12(r21)
  801fd0:	b0800515 	stw	r2,20(r22)
  801fd4:	31000a26 	beq	r6,r4,802000 <_realloc_r+0x4e4>
  801fd8:	b0800604 	addi	r2,r22,24
  801fdc:	ad400404 	addi	r21,r21,16
  801fe0:	003fa906 	br	801e88 <__alt_data_end+0xff801e88>
  801fe4:	a9000417 	ldw	r4,16(r21)
  801fe8:	90800604 	addi	r2,r18,24
  801fec:	a8c00604 	addi	r3,r21,24
  801ff0:	91000415 	stw	r4,16(r18)
  801ff4:	a9000517 	ldw	r4,20(r21)
  801ff8:	91000515 	stw	r4,20(r18)
  801ffc:	003f0406 	br	801c10 <__alt_data_end+0xff801c10>
  802000:	a8c00417 	ldw	r3,16(r21)
  802004:	ad400604 	addi	r21,r21,24
  802008:	b0800804 	addi	r2,r22,32
  80200c:	b0c00615 	stw	r3,24(r22)
  802010:	a8ffff17 	ldw	r3,-4(r21)
  802014:	b0c00715 	stw	r3,28(r22)
  802018:	003f9b06 	br	801e88 <__alt_data_end+0xff801e88>
  80201c:	9005883a 	mov	r2,r18
  802020:	003fc706 	br	801f40 <__alt_data_end+0xff801f40>
  802024:	a80b883a 	mov	r5,r21
  802028:	9009883a 	mov	r4,r18
  80202c:	08018980 	call	801898 <memmove>
  802030:	003fc906 	br	801f58 <__alt_data_end+0xff801f58>
  802034:	a8800217 	ldw	r2,8(r21)
  802038:	b0800415 	stw	r2,16(r22)
  80203c:	a8800317 	ldw	r2,12(r21)
  802040:	b0800515 	stw	r2,20(r22)
  802044:	31000726 	beq	r6,r4,802064 <_realloc_r+0x548>
  802048:	b0800604 	addi	r2,r22,24
  80204c:	ad400404 	addi	r21,r21,16
  802050:	003fbb06 	br	801f40 <__alt_data_end+0xff801f40>
  802054:	a009883a 	mov	r4,r20
  802058:	08036780 	call	803678 <__malloc_unlock>
  80205c:	0005883a 	mov	r2,zero
  802060:	003f0a06 	br	801c8c <__alt_data_end+0xff801c8c>
  802064:	a8c00417 	ldw	r3,16(r21)
  802068:	ad400604 	addi	r21,r21,24
  80206c:	b0800804 	addi	r2,r22,32
  802070:	b0c00615 	stw	r3,24(r22)
  802074:	a8ffff17 	ldw	r3,-4(r21)
  802078:	b0c00715 	stw	r3,28(r22)
  80207c:	003fb006 	br	801f40 <__alt_data_end+0xff801f40>

00802080 <_sbrk_r>:
  802080:	defffd04 	addi	sp,sp,-12
  802084:	dc000015 	stw	r16,0(sp)
  802088:	04002074 	movhi	r16,129
  80208c:	dc400115 	stw	r17,4(sp)
  802090:	842b5d04 	addi	r16,r16,-21132
  802094:	2023883a 	mov	r17,r4
  802098:	2809883a 	mov	r4,r5
  80209c:	dfc00215 	stw	ra,8(sp)
  8020a0:	80000015 	stw	zero,0(r16)
  8020a4:	08038380 	call	803838 <sbrk>
  8020a8:	00ffffc4 	movi	r3,-1
  8020ac:	10c00526 	beq	r2,r3,8020c4 <_sbrk_r+0x44>
  8020b0:	dfc00217 	ldw	ra,8(sp)
  8020b4:	dc400117 	ldw	r17,4(sp)
  8020b8:	dc000017 	ldw	r16,0(sp)
  8020bc:	dec00304 	addi	sp,sp,12
  8020c0:	f800283a 	ret
  8020c4:	80c00017 	ldw	r3,0(r16)
  8020c8:	183ff926 	beq	r3,zero,8020b0 <__alt_data_end+0xff8020b0>
  8020cc:	88c00015 	stw	r3,0(r17)
  8020d0:	003ff706 	br	8020b0 <__alt_data_end+0xff8020b0>

008020d4 <__sread>:
  8020d4:	defffe04 	addi	sp,sp,-8
  8020d8:	dc000015 	stw	r16,0(sp)
  8020dc:	2821883a 	mov	r16,r5
  8020e0:	2940038f 	ldh	r5,14(r5)
  8020e4:	dfc00115 	stw	ra,4(sp)
  8020e8:	0802e140 	call	802e14 <_read_r>
  8020ec:	10000716 	blt	r2,zero,80210c <__sread+0x38>
  8020f0:	80c01417 	ldw	r3,80(r16)
  8020f4:	1887883a 	add	r3,r3,r2
  8020f8:	80c01415 	stw	r3,80(r16)
  8020fc:	dfc00117 	ldw	ra,4(sp)
  802100:	dc000017 	ldw	r16,0(sp)
  802104:	dec00204 	addi	sp,sp,8
  802108:	f800283a 	ret
  80210c:	80c0030b 	ldhu	r3,12(r16)
  802110:	18fbffcc 	andi	r3,r3,61439
  802114:	80c0030d 	sth	r3,12(r16)
  802118:	dfc00117 	ldw	ra,4(sp)
  80211c:	dc000017 	ldw	r16,0(sp)
  802120:	dec00204 	addi	sp,sp,8
  802124:	f800283a 	ret

00802128 <__seofread>:
  802128:	0005883a 	mov	r2,zero
  80212c:	f800283a 	ret

00802130 <__swrite>:
  802130:	2880030b 	ldhu	r2,12(r5)
  802134:	defffb04 	addi	sp,sp,-20
  802138:	dcc00315 	stw	r19,12(sp)
  80213c:	dc800215 	stw	r18,8(sp)
  802140:	dc400115 	stw	r17,4(sp)
  802144:	dc000015 	stw	r16,0(sp)
  802148:	dfc00415 	stw	ra,16(sp)
  80214c:	10c0400c 	andi	r3,r2,256
  802150:	2821883a 	mov	r16,r5
  802154:	2023883a 	mov	r17,r4
  802158:	3025883a 	mov	r18,r6
  80215c:	3827883a 	mov	r19,r7
  802160:	18000526 	beq	r3,zero,802178 <__swrite+0x48>
  802164:	2940038f 	ldh	r5,14(r5)
  802168:	01c00084 	movi	r7,2
  80216c:	000d883a 	mov	r6,zero
  802170:	0802bf80 	call	802bf8 <_lseek_r>
  802174:	8080030b 	ldhu	r2,12(r16)
  802178:	8140038f 	ldh	r5,14(r16)
  80217c:	10bbffcc 	andi	r2,r2,61439
  802180:	980f883a 	mov	r7,r19
  802184:	900d883a 	mov	r6,r18
  802188:	8809883a 	mov	r4,r17
  80218c:	8080030d 	sth	r2,12(r16)
  802190:	dfc00417 	ldw	ra,16(sp)
  802194:	dcc00317 	ldw	r19,12(sp)
  802198:	dc800217 	ldw	r18,8(sp)
  80219c:	dc400117 	ldw	r17,4(sp)
  8021a0:	dc000017 	ldw	r16,0(sp)
  8021a4:	dec00504 	addi	sp,sp,20
  8021a8:	08022101 	jmpi	802210 <_write_r>

008021ac <__sseek>:
  8021ac:	defffe04 	addi	sp,sp,-8
  8021b0:	dc000015 	stw	r16,0(sp)
  8021b4:	2821883a 	mov	r16,r5
  8021b8:	2940038f 	ldh	r5,14(r5)
  8021bc:	dfc00115 	stw	ra,4(sp)
  8021c0:	0802bf80 	call	802bf8 <_lseek_r>
  8021c4:	00ffffc4 	movi	r3,-1
  8021c8:	10c00826 	beq	r2,r3,8021ec <__sseek+0x40>
  8021cc:	80c0030b 	ldhu	r3,12(r16)
  8021d0:	80801415 	stw	r2,80(r16)
  8021d4:	18c40014 	ori	r3,r3,4096
  8021d8:	80c0030d 	sth	r3,12(r16)
  8021dc:	dfc00117 	ldw	ra,4(sp)
  8021e0:	dc000017 	ldw	r16,0(sp)
  8021e4:	dec00204 	addi	sp,sp,8
  8021e8:	f800283a 	ret
  8021ec:	80c0030b 	ldhu	r3,12(r16)
  8021f0:	18fbffcc 	andi	r3,r3,61439
  8021f4:	80c0030d 	sth	r3,12(r16)
  8021f8:	dfc00117 	ldw	ra,4(sp)
  8021fc:	dc000017 	ldw	r16,0(sp)
  802200:	dec00204 	addi	sp,sp,8
  802204:	f800283a 	ret

00802208 <__sclose>:
  802208:	2940038f 	ldh	r5,14(r5)
  80220c:	08023c41 	jmpi	8023c4 <_close_r>

00802210 <_write_r>:
  802210:	defffd04 	addi	sp,sp,-12
  802214:	2805883a 	mov	r2,r5
  802218:	dc000015 	stw	r16,0(sp)
  80221c:	04002074 	movhi	r16,129
  802220:	dc400115 	stw	r17,4(sp)
  802224:	300b883a 	mov	r5,r6
  802228:	842b5d04 	addi	r16,r16,-21132
  80222c:	2023883a 	mov	r17,r4
  802230:	380d883a 	mov	r6,r7
  802234:	1009883a 	mov	r4,r2
  802238:	dfc00215 	stw	ra,8(sp)
  80223c:	80000015 	stw	zero,0(r16)
  802240:	08039240 	call	803924 <write>
  802244:	00ffffc4 	movi	r3,-1
  802248:	10c00526 	beq	r2,r3,802260 <_write_r+0x50>
  80224c:	dfc00217 	ldw	ra,8(sp)
  802250:	dc400117 	ldw	r17,4(sp)
  802254:	dc000017 	ldw	r16,0(sp)
  802258:	dec00304 	addi	sp,sp,12
  80225c:	f800283a 	ret
  802260:	80c00017 	ldw	r3,0(r16)
  802264:	183ff926 	beq	r3,zero,80224c <__alt_data_end+0xff80224c>
  802268:	88c00015 	stw	r3,0(r17)
  80226c:	003ff706 	br	80224c <__alt_data_end+0xff80224c>

00802270 <__swsetup_r>:
  802270:	00802074 	movhi	r2,129
  802274:	defffd04 	addi	sp,sp,-12
  802278:	10a41d04 	addi	r2,r2,-28556
  80227c:	dc400115 	stw	r17,4(sp)
  802280:	2023883a 	mov	r17,r4
  802284:	11000017 	ldw	r4,0(r2)
  802288:	dc000015 	stw	r16,0(sp)
  80228c:	dfc00215 	stw	ra,8(sp)
  802290:	2821883a 	mov	r16,r5
  802294:	20000226 	beq	r4,zero,8022a0 <__swsetup_r+0x30>
  802298:	20800e17 	ldw	r2,56(r4)
  80229c:	10003126 	beq	r2,zero,802364 <__swsetup_r+0xf4>
  8022a0:	8080030b 	ldhu	r2,12(r16)
  8022a4:	10c0020c 	andi	r3,r2,8
  8022a8:	1009883a 	mov	r4,r2
  8022ac:	18000f26 	beq	r3,zero,8022ec <__swsetup_r+0x7c>
  8022b0:	80c00417 	ldw	r3,16(r16)
  8022b4:	18001526 	beq	r3,zero,80230c <__swsetup_r+0x9c>
  8022b8:	1100004c 	andi	r4,r2,1
  8022bc:	20001c1e 	bne	r4,zero,802330 <__swsetup_r+0xc0>
  8022c0:	1080008c 	andi	r2,r2,2
  8022c4:	1000291e 	bne	r2,zero,80236c <__swsetup_r+0xfc>
  8022c8:	80800517 	ldw	r2,20(r16)
  8022cc:	80800215 	stw	r2,8(r16)
  8022d0:	18001c26 	beq	r3,zero,802344 <__swsetup_r+0xd4>
  8022d4:	0005883a 	mov	r2,zero
  8022d8:	dfc00217 	ldw	ra,8(sp)
  8022dc:	dc400117 	ldw	r17,4(sp)
  8022e0:	dc000017 	ldw	r16,0(sp)
  8022e4:	dec00304 	addi	sp,sp,12
  8022e8:	f800283a 	ret
  8022ec:	2080040c 	andi	r2,r4,16
  8022f0:	10002e26 	beq	r2,zero,8023ac <__swsetup_r+0x13c>
  8022f4:	2080010c 	andi	r2,r4,4
  8022f8:	10001e1e 	bne	r2,zero,802374 <__swsetup_r+0x104>
  8022fc:	80c00417 	ldw	r3,16(r16)
  802300:	20800214 	ori	r2,r4,8
  802304:	8080030d 	sth	r2,12(r16)
  802308:	183feb1e 	bne	r3,zero,8022b8 <__alt_data_end+0xff8022b8>
  80230c:	1100a00c 	andi	r4,r2,640
  802310:	01408004 	movi	r5,512
  802314:	217fe826 	beq	r4,r5,8022b8 <__alt_data_end+0xff8022b8>
  802318:	800b883a 	mov	r5,r16
  80231c:	8809883a 	mov	r4,r17
  802320:	0802c580 	call	802c58 <__smakebuf_r>
  802324:	8080030b 	ldhu	r2,12(r16)
  802328:	80c00417 	ldw	r3,16(r16)
  80232c:	003fe206 	br	8022b8 <__alt_data_end+0xff8022b8>
  802330:	80800517 	ldw	r2,20(r16)
  802334:	80000215 	stw	zero,8(r16)
  802338:	0085c83a 	sub	r2,zero,r2
  80233c:	80800615 	stw	r2,24(r16)
  802340:	183fe41e 	bne	r3,zero,8022d4 <__alt_data_end+0xff8022d4>
  802344:	80c0030b 	ldhu	r3,12(r16)
  802348:	0005883a 	mov	r2,zero
  80234c:	1900200c 	andi	r4,r3,128
  802350:	203fe126 	beq	r4,zero,8022d8 <__alt_data_end+0xff8022d8>
  802354:	18c01014 	ori	r3,r3,64
  802358:	80c0030d 	sth	r3,12(r16)
  80235c:	00bfffc4 	movi	r2,-1
  802360:	003fdd06 	br	8022d8 <__alt_data_end+0xff8022d8>
  802364:	08007cc0 	call	8007cc <__sinit>
  802368:	003fcd06 	br	8022a0 <__alt_data_end+0xff8022a0>
  80236c:	0005883a 	mov	r2,zero
  802370:	003fd606 	br	8022cc <__alt_data_end+0xff8022cc>
  802374:	81400c17 	ldw	r5,48(r16)
  802378:	28000626 	beq	r5,zero,802394 <__swsetup_r+0x124>
  80237c:	80801004 	addi	r2,r16,64
  802380:	28800326 	beq	r5,r2,802390 <__swsetup_r+0x120>
  802384:	8809883a 	mov	r4,r17
  802388:	08028e80 	call	8028e8 <_free_r>
  80238c:	8100030b 	ldhu	r4,12(r16)
  802390:	80000c15 	stw	zero,48(r16)
  802394:	80c00417 	ldw	r3,16(r16)
  802398:	00bff6c4 	movi	r2,-37
  80239c:	1108703a 	and	r4,r2,r4
  8023a0:	80000115 	stw	zero,4(r16)
  8023a4:	80c00015 	stw	r3,0(r16)
  8023a8:	003fd506 	br	802300 <__alt_data_end+0xff802300>
  8023ac:	00800244 	movi	r2,9
  8023b0:	88800015 	stw	r2,0(r17)
  8023b4:	20801014 	ori	r2,r4,64
  8023b8:	8080030d 	sth	r2,12(r16)
  8023bc:	00bfffc4 	movi	r2,-1
  8023c0:	003fc506 	br	8022d8 <__alt_data_end+0xff8022d8>

008023c4 <_close_r>:
  8023c4:	defffd04 	addi	sp,sp,-12
  8023c8:	dc000015 	stw	r16,0(sp)
  8023cc:	04002074 	movhi	r16,129
  8023d0:	dc400115 	stw	r17,4(sp)
  8023d4:	842b5d04 	addi	r16,r16,-21132
  8023d8:	2023883a 	mov	r17,r4
  8023dc:	2809883a 	mov	r4,r5
  8023e0:	dfc00215 	stw	ra,8(sp)
  8023e4:	80000015 	stw	zero,0(r16)
  8023e8:	08031140 	call	803114 <close>
  8023ec:	00ffffc4 	movi	r3,-1
  8023f0:	10c00526 	beq	r2,r3,802408 <_close_r+0x44>
  8023f4:	dfc00217 	ldw	ra,8(sp)
  8023f8:	dc400117 	ldw	r17,4(sp)
  8023fc:	dc000017 	ldw	r16,0(sp)
  802400:	dec00304 	addi	sp,sp,12
  802404:	f800283a 	ret
  802408:	80c00017 	ldw	r3,0(r16)
  80240c:	183ff926 	beq	r3,zero,8023f4 <__alt_data_end+0xff8023f4>
  802410:	88c00015 	stw	r3,0(r17)
  802414:	003ff706 	br	8023f4 <__alt_data_end+0xff8023f4>

00802418 <_fclose_r>:
  802418:	28003926 	beq	r5,zero,802500 <_fclose_r+0xe8>
  80241c:	defffc04 	addi	sp,sp,-16
  802420:	dc400115 	stw	r17,4(sp)
  802424:	dc000015 	stw	r16,0(sp)
  802428:	dfc00315 	stw	ra,12(sp)
  80242c:	dc800215 	stw	r18,8(sp)
  802430:	2023883a 	mov	r17,r4
  802434:	2821883a 	mov	r16,r5
  802438:	20000226 	beq	r4,zero,802444 <_fclose_r+0x2c>
  80243c:	20800e17 	ldw	r2,56(r4)
  802440:	10002726 	beq	r2,zero,8024e0 <_fclose_r+0xc8>
  802444:	8080030f 	ldh	r2,12(r16)
  802448:	1000071e 	bne	r2,zero,802468 <_fclose_r+0x50>
  80244c:	0005883a 	mov	r2,zero
  802450:	dfc00317 	ldw	ra,12(sp)
  802454:	dc800217 	ldw	r18,8(sp)
  802458:	dc400117 	ldw	r17,4(sp)
  80245c:	dc000017 	ldw	r16,0(sp)
  802460:	dec00404 	addi	sp,sp,16
  802464:	f800283a 	ret
  802468:	800b883a 	mov	r5,r16
  80246c:	8809883a 	mov	r4,r17
  802470:	080251c0 	call	80251c <__sflush_r>
  802474:	1025883a 	mov	r18,r2
  802478:	80800b17 	ldw	r2,44(r16)
  80247c:	10000426 	beq	r2,zero,802490 <_fclose_r+0x78>
  802480:	81400717 	ldw	r5,28(r16)
  802484:	8809883a 	mov	r4,r17
  802488:	103ee83a 	callr	r2
  80248c:	10001616 	blt	r2,zero,8024e8 <_fclose_r+0xd0>
  802490:	8080030b 	ldhu	r2,12(r16)
  802494:	1080200c 	andi	r2,r2,128
  802498:	1000151e 	bne	r2,zero,8024f0 <_fclose_r+0xd8>
  80249c:	81400c17 	ldw	r5,48(r16)
  8024a0:	28000526 	beq	r5,zero,8024b8 <_fclose_r+0xa0>
  8024a4:	80801004 	addi	r2,r16,64
  8024a8:	28800226 	beq	r5,r2,8024b4 <_fclose_r+0x9c>
  8024ac:	8809883a 	mov	r4,r17
  8024b0:	08028e80 	call	8028e8 <_free_r>
  8024b4:	80000c15 	stw	zero,48(r16)
  8024b8:	81401117 	ldw	r5,68(r16)
  8024bc:	28000326 	beq	r5,zero,8024cc <_fclose_r+0xb4>
  8024c0:	8809883a 	mov	r4,r17
  8024c4:	08028e80 	call	8028e8 <_free_r>
  8024c8:	80001115 	stw	zero,68(r16)
  8024cc:	08007dc0 	call	8007dc <__sfp_lock_acquire>
  8024d0:	8000030d 	sth	zero,12(r16)
  8024d4:	08007e00 	call	8007e0 <__sfp_lock_release>
  8024d8:	9005883a 	mov	r2,r18
  8024dc:	003fdc06 	br	802450 <__alt_data_end+0xff802450>
  8024e0:	08007cc0 	call	8007cc <__sinit>
  8024e4:	003fd706 	br	802444 <__alt_data_end+0xff802444>
  8024e8:	04bfffc4 	movi	r18,-1
  8024ec:	003fe806 	br	802490 <__alt_data_end+0xff802490>
  8024f0:	81400417 	ldw	r5,16(r16)
  8024f4:	8809883a 	mov	r4,r17
  8024f8:	08028e80 	call	8028e8 <_free_r>
  8024fc:	003fe706 	br	80249c <__alt_data_end+0xff80249c>
  802500:	0005883a 	mov	r2,zero
  802504:	f800283a 	ret

00802508 <fclose>:
  802508:	00802074 	movhi	r2,129
  80250c:	10a41d04 	addi	r2,r2,-28556
  802510:	200b883a 	mov	r5,r4
  802514:	11000017 	ldw	r4,0(r2)
  802518:	08024181 	jmpi	802418 <_fclose_r>

0080251c <__sflush_r>:
  80251c:	2880030b 	ldhu	r2,12(r5)
  802520:	defffb04 	addi	sp,sp,-20
  802524:	dcc00315 	stw	r19,12(sp)
  802528:	dc400115 	stw	r17,4(sp)
  80252c:	dfc00415 	stw	ra,16(sp)
  802530:	dc800215 	stw	r18,8(sp)
  802534:	dc000015 	stw	r16,0(sp)
  802538:	10c0020c 	andi	r3,r2,8
  80253c:	2823883a 	mov	r17,r5
  802540:	2027883a 	mov	r19,r4
  802544:	1800311e 	bne	r3,zero,80260c <__sflush_r+0xf0>
  802548:	28c00117 	ldw	r3,4(r5)
  80254c:	10820014 	ori	r2,r2,2048
  802550:	2880030d 	sth	r2,12(r5)
  802554:	00c04b0e 	bge	zero,r3,802684 <__sflush_r+0x168>
  802558:	8a000a17 	ldw	r8,40(r17)
  80255c:	40002326 	beq	r8,zero,8025ec <__sflush_r+0xd0>
  802560:	9c000017 	ldw	r16,0(r19)
  802564:	10c4000c 	andi	r3,r2,4096
  802568:	98000015 	stw	zero,0(r19)
  80256c:	18004826 	beq	r3,zero,802690 <__sflush_r+0x174>
  802570:	89801417 	ldw	r6,80(r17)
  802574:	10c0010c 	andi	r3,r2,4
  802578:	18000626 	beq	r3,zero,802594 <__sflush_r+0x78>
  80257c:	88c00117 	ldw	r3,4(r17)
  802580:	88800c17 	ldw	r2,48(r17)
  802584:	30cdc83a 	sub	r6,r6,r3
  802588:	10000226 	beq	r2,zero,802594 <__sflush_r+0x78>
  80258c:	88800f17 	ldw	r2,60(r17)
  802590:	308dc83a 	sub	r6,r6,r2
  802594:	89400717 	ldw	r5,28(r17)
  802598:	000f883a 	mov	r7,zero
  80259c:	9809883a 	mov	r4,r19
  8025a0:	403ee83a 	callr	r8
  8025a4:	00ffffc4 	movi	r3,-1
  8025a8:	10c04426 	beq	r2,r3,8026bc <__sflush_r+0x1a0>
  8025ac:	88c0030b 	ldhu	r3,12(r17)
  8025b0:	89000417 	ldw	r4,16(r17)
  8025b4:	88000115 	stw	zero,4(r17)
  8025b8:	197dffcc 	andi	r5,r3,63487
  8025bc:	8940030d 	sth	r5,12(r17)
  8025c0:	89000015 	stw	r4,0(r17)
  8025c4:	18c4000c 	andi	r3,r3,4096
  8025c8:	18002c1e 	bne	r3,zero,80267c <__sflush_r+0x160>
  8025cc:	89400c17 	ldw	r5,48(r17)
  8025d0:	9c000015 	stw	r16,0(r19)
  8025d4:	28000526 	beq	r5,zero,8025ec <__sflush_r+0xd0>
  8025d8:	88801004 	addi	r2,r17,64
  8025dc:	28800226 	beq	r5,r2,8025e8 <__sflush_r+0xcc>
  8025e0:	9809883a 	mov	r4,r19
  8025e4:	08028e80 	call	8028e8 <_free_r>
  8025e8:	88000c15 	stw	zero,48(r17)
  8025ec:	0005883a 	mov	r2,zero
  8025f0:	dfc00417 	ldw	ra,16(sp)
  8025f4:	dcc00317 	ldw	r19,12(sp)
  8025f8:	dc800217 	ldw	r18,8(sp)
  8025fc:	dc400117 	ldw	r17,4(sp)
  802600:	dc000017 	ldw	r16,0(sp)
  802604:	dec00504 	addi	sp,sp,20
  802608:	f800283a 	ret
  80260c:	2c800417 	ldw	r18,16(r5)
  802610:	903ff626 	beq	r18,zero,8025ec <__alt_data_end+0xff8025ec>
  802614:	2c000017 	ldw	r16,0(r5)
  802618:	108000cc 	andi	r2,r2,3
  80261c:	2c800015 	stw	r18,0(r5)
  802620:	84a1c83a 	sub	r16,r16,r18
  802624:	1000131e 	bne	r2,zero,802674 <__sflush_r+0x158>
  802628:	28800517 	ldw	r2,20(r5)
  80262c:	88800215 	stw	r2,8(r17)
  802630:	04000316 	blt	zero,r16,802640 <__sflush_r+0x124>
  802634:	003fed06 	br	8025ec <__alt_data_end+0xff8025ec>
  802638:	90a5883a 	add	r18,r18,r2
  80263c:	043feb0e 	bge	zero,r16,8025ec <__alt_data_end+0xff8025ec>
  802640:	88800917 	ldw	r2,36(r17)
  802644:	89400717 	ldw	r5,28(r17)
  802648:	800f883a 	mov	r7,r16
  80264c:	900d883a 	mov	r6,r18
  802650:	9809883a 	mov	r4,r19
  802654:	103ee83a 	callr	r2
  802658:	80a1c83a 	sub	r16,r16,r2
  80265c:	00bff616 	blt	zero,r2,802638 <__alt_data_end+0xff802638>
  802660:	88c0030b 	ldhu	r3,12(r17)
  802664:	00bfffc4 	movi	r2,-1
  802668:	18c01014 	ori	r3,r3,64
  80266c:	88c0030d 	sth	r3,12(r17)
  802670:	003fdf06 	br	8025f0 <__alt_data_end+0xff8025f0>
  802674:	0005883a 	mov	r2,zero
  802678:	003fec06 	br	80262c <__alt_data_end+0xff80262c>
  80267c:	88801415 	stw	r2,80(r17)
  802680:	003fd206 	br	8025cc <__alt_data_end+0xff8025cc>
  802684:	28c00f17 	ldw	r3,60(r5)
  802688:	00ffb316 	blt	zero,r3,802558 <__alt_data_end+0xff802558>
  80268c:	003fd706 	br	8025ec <__alt_data_end+0xff8025ec>
  802690:	89400717 	ldw	r5,28(r17)
  802694:	000d883a 	mov	r6,zero
  802698:	01c00044 	movi	r7,1
  80269c:	9809883a 	mov	r4,r19
  8026a0:	403ee83a 	callr	r8
  8026a4:	100d883a 	mov	r6,r2
  8026a8:	00bfffc4 	movi	r2,-1
  8026ac:	30801426 	beq	r6,r2,802700 <__sflush_r+0x1e4>
  8026b0:	8880030b 	ldhu	r2,12(r17)
  8026b4:	8a000a17 	ldw	r8,40(r17)
  8026b8:	003fae06 	br	802574 <__alt_data_end+0xff802574>
  8026bc:	98c00017 	ldw	r3,0(r19)
  8026c0:	183fba26 	beq	r3,zero,8025ac <__alt_data_end+0xff8025ac>
  8026c4:	01000744 	movi	r4,29
  8026c8:	19000626 	beq	r3,r4,8026e4 <__sflush_r+0x1c8>
  8026cc:	01000584 	movi	r4,22
  8026d0:	19000426 	beq	r3,r4,8026e4 <__sflush_r+0x1c8>
  8026d4:	88c0030b 	ldhu	r3,12(r17)
  8026d8:	18c01014 	ori	r3,r3,64
  8026dc:	88c0030d 	sth	r3,12(r17)
  8026e0:	003fc306 	br	8025f0 <__alt_data_end+0xff8025f0>
  8026e4:	8880030b 	ldhu	r2,12(r17)
  8026e8:	88c00417 	ldw	r3,16(r17)
  8026ec:	88000115 	stw	zero,4(r17)
  8026f0:	10bdffcc 	andi	r2,r2,63487
  8026f4:	8880030d 	sth	r2,12(r17)
  8026f8:	88c00015 	stw	r3,0(r17)
  8026fc:	003fb306 	br	8025cc <__alt_data_end+0xff8025cc>
  802700:	98800017 	ldw	r2,0(r19)
  802704:	103fea26 	beq	r2,zero,8026b0 <__alt_data_end+0xff8026b0>
  802708:	00c00744 	movi	r3,29
  80270c:	10c00226 	beq	r2,r3,802718 <__sflush_r+0x1fc>
  802710:	00c00584 	movi	r3,22
  802714:	10c0031e 	bne	r2,r3,802724 <__sflush_r+0x208>
  802718:	9c000015 	stw	r16,0(r19)
  80271c:	0005883a 	mov	r2,zero
  802720:	003fb306 	br	8025f0 <__alt_data_end+0xff8025f0>
  802724:	88c0030b 	ldhu	r3,12(r17)
  802728:	3005883a 	mov	r2,r6
  80272c:	18c01014 	ori	r3,r3,64
  802730:	88c0030d 	sth	r3,12(r17)
  802734:	003fae06 	br	8025f0 <__alt_data_end+0xff8025f0>

00802738 <_fflush_r>:
  802738:	defffd04 	addi	sp,sp,-12
  80273c:	dc000115 	stw	r16,4(sp)
  802740:	dfc00215 	stw	ra,8(sp)
  802744:	2021883a 	mov	r16,r4
  802748:	20000226 	beq	r4,zero,802754 <_fflush_r+0x1c>
  80274c:	20800e17 	ldw	r2,56(r4)
  802750:	10000c26 	beq	r2,zero,802784 <_fflush_r+0x4c>
  802754:	2880030f 	ldh	r2,12(r5)
  802758:	1000051e 	bne	r2,zero,802770 <_fflush_r+0x38>
  80275c:	0005883a 	mov	r2,zero
  802760:	dfc00217 	ldw	ra,8(sp)
  802764:	dc000117 	ldw	r16,4(sp)
  802768:	dec00304 	addi	sp,sp,12
  80276c:	f800283a 	ret
  802770:	8009883a 	mov	r4,r16
  802774:	dfc00217 	ldw	ra,8(sp)
  802778:	dc000117 	ldw	r16,4(sp)
  80277c:	dec00304 	addi	sp,sp,12
  802780:	080251c1 	jmpi	80251c <__sflush_r>
  802784:	d9400015 	stw	r5,0(sp)
  802788:	08007cc0 	call	8007cc <__sinit>
  80278c:	d9400017 	ldw	r5,0(sp)
  802790:	003ff006 	br	802754 <__alt_data_end+0xff802754>

00802794 <fflush>:
  802794:	20000526 	beq	r4,zero,8027ac <fflush+0x18>
  802798:	00802074 	movhi	r2,129
  80279c:	10a41d04 	addi	r2,r2,-28556
  8027a0:	200b883a 	mov	r5,r4
  8027a4:	11000017 	ldw	r4,0(r2)
  8027a8:	08027381 	jmpi	802738 <_fflush_r>
  8027ac:	00802074 	movhi	r2,129
  8027b0:	10a41c04 	addi	r2,r2,-28560
  8027b4:	11000017 	ldw	r4,0(r2)
  8027b8:	01402034 	movhi	r5,128
  8027bc:	2949ce04 	addi	r5,r5,10040
  8027c0:	0800d9c1 	jmpi	800d9c <_fwalk_reent>

008027c4 <_malloc_trim_r>:
  8027c4:	defffb04 	addi	sp,sp,-20
  8027c8:	dcc00315 	stw	r19,12(sp)
  8027cc:	04c02034 	movhi	r19,128
  8027d0:	dc800215 	stw	r18,8(sp)
  8027d4:	dc400115 	stw	r17,4(sp)
  8027d8:	dc000015 	stw	r16,0(sp)
  8027dc:	dfc00415 	stw	ra,16(sp)
  8027e0:	2821883a 	mov	r16,r5
  8027e4:	9cde0704 	addi	r19,r19,30748
  8027e8:	2025883a 	mov	r18,r4
  8027ec:	08036540 	call	803654 <__malloc_lock>
  8027f0:	98800217 	ldw	r2,8(r19)
  8027f4:	14400117 	ldw	r17,4(r2)
  8027f8:	00bfff04 	movi	r2,-4
  8027fc:	88a2703a 	and	r17,r17,r2
  802800:	8c21c83a 	sub	r16,r17,r16
  802804:	8403fbc4 	addi	r16,r16,4079
  802808:	8020d33a 	srli	r16,r16,12
  80280c:	0083ffc4 	movi	r2,4095
  802810:	843fffc4 	addi	r16,r16,-1
  802814:	8020933a 	slli	r16,r16,12
  802818:	1400060e 	bge	r2,r16,802834 <_malloc_trim_r+0x70>
  80281c:	000b883a 	mov	r5,zero
  802820:	9009883a 	mov	r4,r18
  802824:	08020800 	call	802080 <_sbrk_r>
  802828:	98c00217 	ldw	r3,8(r19)
  80282c:	1c47883a 	add	r3,r3,r17
  802830:	10c00a26 	beq	r2,r3,80285c <_malloc_trim_r+0x98>
  802834:	9009883a 	mov	r4,r18
  802838:	08036780 	call	803678 <__malloc_unlock>
  80283c:	0005883a 	mov	r2,zero
  802840:	dfc00417 	ldw	ra,16(sp)
  802844:	dcc00317 	ldw	r19,12(sp)
  802848:	dc800217 	ldw	r18,8(sp)
  80284c:	dc400117 	ldw	r17,4(sp)
  802850:	dc000017 	ldw	r16,0(sp)
  802854:	dec00504 	addi	sp,sp,20
  802858:	f800283a 	ret
  80285c:	040bc83a 	sub	r5,zero,r16
  802860:	9009883a 	mov	r4,r18
  802864:	08020800 	call	802080 <_sbrk_r>
  802868:	00ffffc4 	movi	r3,-1
  80286c:	10c00d26 	beq	r2,r3,8028a4 <_malloc_trim_r+0xe0>
  802870:	00c02074 	movhi	r3,129
  802874:	18eb6504 	addi	r3,r3,-21100
  802878:	18800017 	ldw	r2,0(r3)
  80287c:	99000217 	ldw	r4,8(r19)
  802880:	8c23c83a 	sub	r17,r17,r16
  802884:	8c400054 	ori	r17,r17,1
  802888:	1421c83a 	sub	r16,r2,r16
  80288c:	24400115 	stw	r17,4(r4)
  802890:	9009883a 	mov	r4,r18
  802894:	1c000015 	stw	r16,0(r3)
  802898:	08036780 	call	803678 <__malloc_unlock>
  80289c:	00800044 	movi	r2,1
  8028a0:	003fe706 	br	802840 <__alt_data_end+0xff802840>
  8028a4:	000b883a 	mov	r5,zero
  8028a8:	9009883a 	mov	r4,r18
  8028ac:	08020800 	call	802080 <_sbrk_r>
  8028b0:	99000217 	ldw	r4,8(r19)
  8028b4:	014003c4 	movi	r5,15
  8028b8:	1107c83a 	sub	r3,r2,r4
  8028bc:	28ffdd0e 	bge	r5,r3,802834 <__alt_data_end+0xff802834>
  8028c0:	01402074 	movhi	r5,129
  8028c4:	29641e04 	addi	r5,r5,-28552
  8028c8:	29400017 	ldw	r5,0(r5)
  8028cc:	18c00054 	ori	r3,r3,1
  8028d0:	20c00115 	stw	r3,4(r4)
  8028d4:	00c02074 	movhi	r3,129
  8028d8:	1145c83a 	sub	r2,r2,r5
  8028dc:	18eb6504 	addi	r3,r3,-21100
  8028e0:	18800015 	stw	r2,0(r3)
  8028e4:	003fd306 	br	802834 <__alt_data_end+0xff802834>

008028e8 <_free_r>:
  8028e8:	28004126 	beq	r5,zero,8029f0 <_free_r+0x108>
  8028ec:	defffd04 	addi	sp,sp,-12
  8028f0:	dc400115 	stw	r17,4(sp)
  8028f4:	dc000015 	stw	r16,0(sp)
  8028f8:	2023883a 	mov	r17,r4
  8028fc:	2821883a 	mov	r16,r5
  802900:	dfc00215 	stw	ra,8(sp)
  802904:	08036540 	call	803654 <__malloc_lock>
  802908:	81ffff17 	ldw	r7,-4(r16)
  80290c:	00bfff84 	movi	r2,-2
  802910:	01002034 	movhi	r4,128
  802914:	81bffe04 	addi	r6,r16,-8
  802918:	3884703a 	and	r2,r7,r2
  80291c:	211e0704 	addi	r4,r4,30748
  802920:	308b883a 	add	r5,r6,r2
  802924:	2a400117 	ldw	r9,4(r5)
  802928:	22000217 	ldw	r8,8(r4)
  80292c:	00ffff04 	movi	r3,-4
  802930:	48c6703a 	and	r3,r9,r3
  802934:	2a005726 	beq	r5,r8,802a94 <_free_r+0x1ac>
  802938:	28c00115 	stw	r3,4(r5)
  80293c:	39c0004c 	andi	r7,r7,1
  802940:	3800091e 	bne	r7,zero,802968 <_free_r+0x80>
  802944:	823ffe17 	ldw	r8,-8(r16)
  802948:	22400204 	addi	r9,r4,8
  80294c:	320dc83a 	sub	r6,r6,r8
  802950:	31c00217 	ldw	r7,8(r6)
  802954:	1205883a 	add	r2,r2,r8
  802958:	3a406526 	beq	r7,r9,802af0 <_free_r+0x208>
  80295c:	32000317 	ldw	r8,12(r6)
  802960:	3a000315 	stw	r8,12(r7)
  802964:	41c00215 	stw	r7,8(r8)
  802968:	28cf883a 	add	r7,r5,r3
  80296c:	39c00117 	ldw	r7,4(r7)
  802970:	39c0004c 	andi	r7,r7,1
  802974:	38003a26 	beq	r7,zero,802a60 <_free_r+0x178>
  802978:	10c00054 	ori	r3,r2,1
  80297c:	30c00115 	stw	r3,4(r6)
  802980:	3087883a 	add	r3,r6,r2
  802984:	18800015 	stw	r2,0(r3)
  802988:	00c07fc4 	movi	r3,511
  80298c:	18801936 	bltu	r3,r2,8029f4 <_free_r+0x10c>
  802990:	1004d0fa 	srli	r2,r2,3
  802994:	01c00044 	movi	r7,1
  802998:	21400117 	ldw	r5,4(r4)
  80299c:	10c00044 	addi	r3,r2,1
  8029a0:	18c7883a 	add	r3,r3,r3
  8029a4:	1005d0ba 	srai	r2,r2,2
  8029a8:	18c7883a 	add	r3,r3,r3
  8029ac:	18c7883a 	add	r3,r3,r3
  8029b0:	1907883a 	add	r3,r3,r4
  8029b4:	3884983a 	sll	r2,r7,r2
  8029b8:	19c00017 	ldw	r7,0(r3)
  8029bc:	1a3ffe04 	addi	r8,r3,-8
  8029c0:	1144b03a 	or	r2,r2,r5
  8029c4:	32000315 	stw	r8,12(r6)
  8029c8:	31c00215 	stw	r7,8(r6)
  8029cc:	20800115 	stw	r2,4(r4)
  8029d0:	19800015 	stw	r6,0(r3)
  8029d4:	39800315 	stw	r6,12(r7)
  8029d8:	8809883a 	mov	r4,r17
  8029dc:	dfc00217 	ldw	ra,8(sp)
  8029e0:	dc400117 	ldw	r17,4(sp)
  8029e4:	dc000017 	ldw	r16,0(sp)
  8029e8:	dec00304 	addi	sp,sp,12
  8029ec:	08036781 	jmpi	803678 <__malloc_unlock>
  8029f0:	f800283a 	ret
  8029f4:	100ad27a 	srli	r5,r2,9
  8029f8:	00c00104 	movi	r3,4
  8029fc:	19404a36 	bltu	r3,r5,802b28 <_free_r+0x240>
  802a00:	100ad1ba 	srli	r5,r2,6
  802a04:	28c00e44 	addi	r3,r5,57
  802a08:	18c7883a 	add	r3,r3,r3
  802a0c:	29400e04 	addi	r5,r5,56
  802a10:	18c7883a 	add	r3,r3,r3
  802a14:	18c7883a 	add	r3,r3,r3
  802a18:	1909883a 	add	r4,r3,r4
  802a1c:	20c00017 	ldw	r3,0(r4)
  802a20:	01c02034 	movhi	r7,128
  802a24:	213ffe04 	addi	r4,r4,-8
  802a28:	39de0704 	addi	r7,r7,30748
  802a2c:	20c04426 	beq	r4,r3,802b40 <_free_r+0x258>
  802a30:	01ffff04 	movi	r7,-4
  802a34:	19400117 	ldw	r5,4(r3)
  802a38:	29ca703a 	and	r5,r5,r7
  802a3c:	1140022e 	bgeu	r2,r5,802a48 <_free_r+0x160>
  802a40:	18c00217 	ldw	r3,8(r3)
  802a44:	20fffb1e 	bne	r4,r3,802a34 <__alt_data_end+0xff802a34>
  802a48:	19000317 	ldw	r4,12(r3)
  802a4c:	31000315 	stw	r4,12(r6)
  802a50:	30c00215 	stw	r3,8(r6)
  802a54:	21800215 	stw	r6,8(r4)
  802a58:	19800315 	stw	r6,12(r3)
  802a5c:	003fde06 	br	8029d8 <__alt_data_end+0xff8029d8>
  802a60:	29c00217 	ldw	r7,8(r5)
  802a64:	10c5883a 	add	r2,r2,r3
  802a68:	00c02034 	movhi	r3,128
  802a6c:	18de0904 	addi	r3,r3,30756
  802a70:	38c03b26 	beq	r7,r3,802b60 <_free_r+0x278>
  802a74:	2a000317 	ldw	r8,12(r5)
  802a78:	11400054 	ori	r5,r2,1
  802a7c:	3087883a 	add	r3,r6,r2
  802a80:	3a000315 	stw	r8,12(r7)
  802a84:	41c00215 	stw	r7,8(r8)
  802a88:	31400115 	stw	r5,4(r6)
  802a8c:	18800015 	stw	r2,0(r3)
  802a90:	003fbd06 	br	802988 <__alt_data_end+0xff802988>
  802a94:	39c0004c 	andi	r7,r7,1
  802a98:	10c5883a 	add	r2,r2,r3
  802a9c:	3800071e 	bne	r7,zero,802abc <_free_r+0x1d4>
  802aa0:	81fffe17 	ldw	r7,-8(r16)
  802aa4:	31cdc83a 	sub	r6,r6,r7
  802aa8:	30c00317 	ldw	r3,12(r6)
  802aac:	31400217 	ldw	r5,8(r6)
  802ab0:	11c5883a 	add	r2,r2,r7
  802ab4:	28c00315 	stw	r3,12(r5)
  802ab8:	19400215 	stw	r5,8(r3)
  802abc:	10c00054 	ori	r3,r2,1
  802ac0:	30c00115 	stw	r3,4(r6)
  802ac4:	00c02074 	movhi	r3,129
  802ac8:	18e41f04 	addi	r3,r3,-28548
  802acc:	18c00017 	ldw	r3,0(r3)
  802ad0:	21800215 	stw	r6,8(r4)
  802ad4:	10ffc036 	bltu	r2,r3,8029d8 <__alt_data_end+0xff8029d8>
  802ad8:	00802074 	movhi	r2,129
  802adc:	10ab5c04 	addi	r2,r2,-21136
  802ae0:	11400017 	ldw	r5,0(r2)
  802ae4:	8809883a 	mov	r4,r17
  802ae8:	08027c40 	call	8027c4 <_malloc_trim_r>
  802aec:	003fba06 	br	8029d8 <__alt_data_end+0xff8029d8>
  802af0:	28c9883a 	add	r4,r5,r3
  802af4:	21000117 	ldw	r4,4(r4)
  802af8:	2100004c 	andi	r4,r4,1
  802afc:	2000391e 	bne	r4,zero,802be4 <_free_r+0x2fc>
  802b00:	29c00217 	ldw	r7,8(r5)
  802b04:	29000317 	ldw	r4,12(r5)
  802b08:	1885883a 	add	r2,r3,r2
  802b0c:	10c00054 	ori	r3,r2,1
  802b10:	39000315 	stw	r4,12(r7)
  802b14:	21c00215 	stw	r7,8(r4)
  802b18:	30c00115 	stw	r3,4(r6)
  802b1c:	308d883a 	add	r6,r6,r2
  802b20:	30800015 	stw	r2,0(r6)
  802b24:	003fac06 	br	8029d8 <__alt_data_end+0xff8029d8>
  802b28:	00c00504 	movi	r3,20
  802b2c:	19401536 	bltu	r3,r5,802b84 <_free_r+0x29c>
  802b30:	28c01704 	addi	r3,r5,92
  802b34:	18c7883a 	add	r3,r3,r3
  802b38:	294016c4 	addi	r5,r5,91
  802b3c:	003fb406 	br	802a10 <__alt_data_end+0xff802a10>
  802b40:	280bd0ba 	srai	r5,r5,2
  802b44:	00c00044 	movi	r3,1
  802b48:	38800117 	ldw	r2,4(r7)
  802b4c:	194a983a 	sll	r5,r3,r5
  802b50:	2007883a 	mov	r3,r4
  802b54:	2884b03a 	or	r2,r5,r2
  802b58:	38800115 	stw	r2,4(r7)
  802b5c:	003fbb06 	br	802a4c <__alt_data_end+0xff802a4c>
  802b60:	21800515 	stw	r6,20(r4)
  802b64:	21800415 	stw	r6,16(r4)
  802b68:	10c00054 	ori	r3,r2,1
  802b6c:	31c00315 	stw	r7,12(r6)
  802b70:	31c00215 	stw	r7,8(r6)
  802b74:	30c00115 	stw	r3,4(r6)
  802b78:	308d883a 	add	r6,r6,r2
  802b7c:	30800015 	stw	r2,0(r6)
  802b80:	003f9506 	br	8029d8 <__alt_data_end+0xff8029d8>
  802b84:	00c01504 	movi	r3,84
  802b88:	19400536 	bltu	r3,r5,802ba0 <_free_r+0x2b8>
  802b8c:	100ad33a 	srli	r5,r2,12
  802b90:	28c01bc4 	addi	r3,r5,111
  802b94:	18c7883a 	add	r3,r3,r3
  802b98:	29401b84 	addi	r5,r5,110
  802b9c:	003f9c06 	br	802a10 <__alt_data_end+0xff802a10>
  802ba0:	00c05504 	movi	r3,340
  802ba4:	19400536 	bltu	r3,r5,802bbc <_free_r+0x2d4>
  802ba8:	100ad3fa 	srli	r5,r2,15
  802bac:	28c01e04 	addi	r3,r5,120
  802bb0:	18c7883a 	add	r3,r3,r3
  802bb4:	29401dc4 	addi	r5,r5,119
  802bb8:	003f9506 	br	802a10 <__alt_data_end+0xff802a10>
  802bbc:	00c15504 	movi	r3,1364
  802bc0:	19400536 	bltu	r3,r5,802bd8 <_free_r+0x2f0>
  802bc4:	100ad4ba 	srli	r5,r2,18
  802bc8:	28c01f44 	addi	r3,r5,125
  802bcc:	18c7883a 	add	r3,r3,r3
  802bd0:	29401f04 	addi	r5,r5,124
  802bd4:	003f8e06 	br	802a10 <__alt_data_end+0xff802a10>
  802bd8:	00c03f84 	movi	r3,254
  802bdc:	01401f84 	movi	r5,126
  802be0:	003f8b06 	br	802a10 <__alt_data_end+0xff802a10>
  802be4:	10c00054 	ori	r3,r2,1
  802be8:	30c00115 	stw	r3,4(r6)
  802bec:	308d883a 	add	r6,r6,r2
  802bf0:	30800015 	stw	r2,0(r6)
  802bf4:	003f7806 	br	8029d8 <__alt_data_end+0xff8029d8>

00802bf8 <_lseek_r>:
  802bf8:	defffd04 	addi	sp,sp,-12
  802bfc:	2805883a 	mov	r2,r5
  802c00:	dc000015 	stw	r16,0(sp)
  802c04:	04002074 	movhi	r16,129
  802c08:	dc400115 	stw	r17,4(sp)
  802c0c:	300b883a 	mov	r5,r6
  802c10:	842b5d04 	addi	r16,r16,-21132
  802c14:	2023883a 	mov	r17,r4
  802c18:	380d883a 	mov	r6,r7
  802c1c:	1009883a 	mov	r4,r2
  802c20:	dfc00215 	stw	ra,8(sp)
  802c24:	80000015 	stw	zero,0(r16)
  802c28:	08035040 	call	803504 <lseek>
  802c2c:	00ffffc4 	movi	r3,-1
  802c30:	10c00526 	beq	r2,r3,802c48 <_lseek_r+0x50>
  802c34:	dfc00217 	ldw	ra,8(sp)
  802c38:	dc400117 	ldw	r17,4(sp)
  802c3c:	dc000017 	ldw	r16,0(sp)
  802c40:	dec00304 	addi	sp,sp,12
  802c44:	f800283a 	ret
  802c48:	80c00017 	ldw	r3,0(r16)
  802c4c:	183ff926 	beq	r3,zero,802c34 <__alt_data_end+0xff802c34>
  802c50:	88c00015 	stw	r3,0(r17)
  802c54:	003ff706 	br	802c34 <__alt_data_end+0xff802c34>

00802c58 <__smakebuf_r>:
  802c58:	2880030b 	ldhu	r2,12(r5)
  802c5c:	10c0008c 	andi	r3,r2,2
  802c60:	1800411e 	bne	r3,zero,802d68 <__smakebuf_r+0x110>
  802c64:	deffec04 	addi	sp,sp,-80
  802c68:	dc000f15 	stw	r16,60(sp)
  802c6c:	2821883a 	mov	r16,r5
  802c70:	2940038f 	ldh	r5,14(r5)
  802c74:	dc401015 	stw	r17,64(sp)
  802c78:	dfc01315 	stw	ra,76(sp)
  802c7c:	dcc01215 	stw	r19,72(sp)
  802c80:	dc801115 	stw	r18,68(sp)
  802c84:	2023883a 	mov	r17,r4
  802c88:	28001c16 	blt	r5,zero,802cfc <__smakebuf_r+0xa4>
  802c8c:	d80d883a 	mov	r6,sp
  802c90:	0802e740 	call	802e74 <_fstat_r>
  802c94:	10001816 	blt	r2,zero,802cf8 <__smakebuf_r+0xa0>
  802c98:	d8800117 	ldw	r2,4(sp)
  802c9c:	00e00014 	movui	r3,32768
  802ca0:	10bc000c 	andi	r2,r2,61440
  802ca4:	14c80020 	cmpeqi	r19,r2,8192
  802ca8:	10c03726 	beq	r2,r3,802d88 <__smakebuf_r+0x130>
  802cac:	80c0030b 	ldhu	r3,12(r16)
  802cb0:	18c20014 	ori	r3,r3,2048
  802cb4:	80c0030d 	sth	r3,12(r16)
  802cb8:	00c80004 	movi	r3,8192
  802cbc:	10c0521e 	bne	r2,r3,802e08 <__smakebuf_r+0x1b0>
  802cc0:	8140038f 	ldh	r5,14(r16)
  802cc4:	8809883a 	mov	r4,r17
  802cc8:	0802ed00 	call	802ed0 <_isatty_r>
  802ccc:	10004c26 	beq	r2,zero,802e00 <__smakebuf_r+0x1a8>
  802cd0:	8080030b 	ldhu	r2,12(r16)
  802cd4:	80c010c4 	addi	r3,r16,67
  802cd8:	80c00015 	stw	r3,0(r16)
  802cdc:	10800054 	ori	r2,r2,1
  802ce0:	8080030d 	sth	r2,12(r16)
  802ce4:	00800044 	movi	r2,1
  802ce8:	80c00415 	stw	r3,16(r16)
  802cec:	80800515 	stw	r2,20(r16)
  802cf0:	04810004 	movi	r18,1024
  802cf4:	00000706 	br	802d14 <__smakebuf_r+0xbc>
  802cf8:	8080030b 	ldhu	r2,12(r16)
  802cfc:	10c0200c 	andi	r3,r2,128
  802d00:	18001f1e 	bne	r3,zero,802d80 <__smakebuf_r+0x128>
  802d04:	04810004 	movi	r18,1024
  802d08:	10820014 	ori	r2,r2,2048
  802d0c:	8080030d 	sth	r2,12(r16)
  802d10:	0027883a 	mov	r19,zero
  802d14:	900b883a 	mov	r5,r18
  802d18:	8809883a 	mov	r4,r17
  802d1c:	0800e600 	call	800e60 <_malloc_r>
  802d20:	10002c26 	beq	r2,zero,802dd4 <__smakebuf_r+0x17c>
  802d24:	80c0030b 	ldhu	r3,12(r16)
  802d28:	01002034 	movhi	r4,128
  802d2c:	21012104 	addi	r4,r4,1156
  802d30:	89000f15 	stw	r4,60(r17)
  802d34:	18c02014 	ori	r3,r3,128
  802d38:	80c0030d 	sth	r3,12(r16)
  802d3c:	80800015 	stw	r2,0(r16)
  802d40:	80800415 	stw	r2,16(r16)
  802d44:	84800515 	stw	r18,20(r16)
  802d48:	98001a1e 	bne	r19,zero,802db4 <__smakebuf_r+0x15c>
  802d4c:	dfc01317 	ldw	ra,76(sp)
  802d50:	dcc01217 	ldw	r19,72(sp)
  802d54:	dc801117 	ldw	r18,68(sp)
  802d58:	dc401017 	ldw	r17,64(sp)
  802d5c:	dc000f17 	ldw	r16,60(sp)
  802d60:	dec01404 	addi	sp,sp,80
  802d64:	f800283a 	ret
  802d68:	288010c4 	addi	r2,r5,67
  802d6c:	28800015 	stw	r2,0(r5)
  802d70:	28800415 	stw	r2,16(r5)
  802d74:	00800044 	movi	r2,1
  802d78:	28800515 	stw	r2,20(r5)
  802d7c:	f800283a 	ret
  802d80:	04801004 	movi	r18,64
  802d84:	003fe006 	br	802d08 <__alt_data_end+0xff802d08>
  802d88:	81000a17 	ldw	r4,40(r16)
  802d8c:	00c02034 	movhi	r3,128
  802d90:	18c86b04 	addi	r3,r3,8620
  802d94:	20ffc51e 	bne	r4,r3,802cac <__alt_data_end+0xff802cac>
  802d98:	8080030b 	ldhu	r2,12(r16)
  802d9c:	04810004 	movi	r18,1024
  802da0:	84801315 	stw	r18,76(r16)
  802da4:	1484b03a 	or	r2,r2,r18
  802da8:	8080030d 	sth	r2,12(r16)
  802dac:	0027883a 	mov	r19,zero
  802db0:	003fd806 	br	802d14 <__alt_data_end+0xff802d14>
  802db4:	8140038f 	ldh	r5,14(r16)
  802db8:	8809883a 	mov	r4,r17
  802dbc:	0802ed00 	call	802ed0 <_isatty_r>
  802dc0:	103fe226 	beq	r2,zero,802d4c <__alt_data_end+0xff802d4c>
  802dc4:	8080030b 	ldhu	r2,12(r16)
  802dc8:	10800054 	ori	r2,r2,1
  802dcc:	8080030d 	sth	r2,12(r16)
  802dd0:	003fde06 	br	802d4c <__alt_data_end+0xff802d4c>
  802dd4:	8080030b 	ldhu	r2,12(r16)
  802dd8:	10c0800c 	andi	r3,r2,512
  802ddc:	183fdb1e 	bne	r3,zero,802d4c <__alt_data_end+0xff802d4c>
  802de0:	10800094 	ori	r2,r2,2
  802de4:	80c010c4 	addi	r3,r16,67
  802de8:	8080030d 	sth	r2,12(r16)
  802dec:	00800044 	movi	r2,1
  802df0:	80c00015 	stw	r3,0(r16)
  802df4:	80c00415 	stw	r3,16(r16)
  802df8:	80800515 	stw	r2,20(r16)
  802dfc:	003fd306 	br	802d4c <__alt_data_end+0xff802d4c>
  802e00:	04810004 	movi	r18,1024
  802e04:	003fc306 	br	802d14 <__alt_data_end+0xff802d14>
  802e08:	0027883a 	mov	r19,zero
  802e0c:	04810004 	movi	r18,1024
  802e10:	003fc006 	br	802d14 <__alt_data_end+0xff802d14>

00802e14 <_read_r>:
  802e14:	defffd04 	addi	sp,sp,-12
  802e18:	2805883a 	mov	r2,r5
  802e1c:	dc000015 	stw	r16,0(sp)
  802e20:	04002074 	movhi	r16,129
  802e24:	dc400115 	stw	r17,4(sp)
  802e28:	300b883a 	mov	r5,r6
  802e2c:	842b5d04 	addi	r16,r16,-21132
  802e30:	2023883a 	mov	r17,r4
  802e34:	380d883a 	mov	r6,r7
  802e38:	1009883a 	mov	r4,r2
  802e3c:	dfc00215 	stw	ra,8(sp)
  802e40:	80000015 	stw	zero,0(r16)
  802e44:	08036d80 	call	8036d8 <read>
  802e48:	00ffffc4 	movi	r3,-1
  802e4c:	10c00526 	beq	r2,r3,802e64 <_read_r+0x50>
  802e50:	dfc00217 	ldw	ra,8(sp)
  802e54:	dc400117 	ldw	r17,4(sp)
  802e58:	dc000017 	ldw	r16,0(sp)
  802e5c:	dec00304 	addi	sp,sp,12
  802e60:	f800283a 	ret
  802e64:	80c00017 	ldw	r3,0(r16)
  802e68:	183ff926 	beq	r3,zero,802e50 <__alt_data_end+0xff802e50>
  802e6c:	88c00015 	stw	r3,0(r17)
  802e70:	003ff706 	br	802e50 <__alt_data_end+0xff802e50>

00802e74 <_fstat_r>:
  802e74:	defffd04 	addi	sp,sp,-12
  802e78:	2805883a 	mov	r2,r5
  802e7c:	dc000015 	stw	r16,0(sp)
  802e80:	04002074 	movhi	r16,129
  802e84:	dc400115 	stw	r17,4(sp)
  802e88:	842b5d04 	addi	r16,r16,-21132
  802e8c:	2023883a 	mov	r17,r4
  802e90:	300b883a 	mov	r5,r6
  802e94:	1009883a 	mov	r4,r2
  802e98:	dfc00215 	stw	ra,8(sp)
  802e9c:	80000015 	stw	zero,0(r16)
  802ea0:	080324c0 	call	80324c <fstat>
  802ea4:	00ffffc4 	movi	r3,-1
  802ea8:	10c00526 	beq	r2,r3,802ec0 <_fstat_r+0x4c>
  802eac:	dfc00217 	ldw	ra,8(sp)
  802eb0:	dc400117 	ldw	r17,4(sp)
  802eb4:	dc000017 	ldw	r16,0(sp)
  802eb8:	dec00304 	addi	sp,sp,12
  802ebc:	f800283a 	ret
  802ec0:	80c00017 	ldw	r3,0(r16)
  802ec4:	183ff926 	beq	r3,zero,802eac <__alt_data_end+0xff802eac>
  802ec8:	88c00015 	stw	r3,0(r17)
  802ecc:	003ff706 	br	802eac <__alt_data_end+0xff802eac>

00802ed0 <_isatty_r>:
  802ed0:	defffd04 	addi	sp,sp,-12
  802ed4:	dc000015 	stw	r16,0(sp)
  802ed8:	04002074 	movhi	r16,129
  802edc:	dc400115 	stw	r17,4(sp)
  802ee0:	842b5d04 	addi	r16,r16,-21132
  802ee4:	2023883a 	mov	r17,r4
  802ee8:	2809883a 	mov	r4,r5
  802eec:	dfc00215 	stw	ra,8(sp)
  802ef0:	80000015 	stw	zero,0(r16)
  802ef4:	08033380 	call	803338 <isatty>
  802ef8:	00ffffc4 	movi	r3,-1
  802efc:	10c00526 	beq	r2,r3,802f14 <_isatty_r+0x44>
  802f00:	dfc00217 	ldw	ra,8(sp)
  802f04:	dc400117 	ldw	r17,4(sp)
  802f08:	dc000017 	ldw	r16,0(sp)
  802f0c:	dec00304 	addi	sp,sp,12
  802f10:	f800283a 	ret
  802f14:	80c00017 	ldw	r3,0(r16)
  802f18:	183ff926 	beq	r3,zero,802f00 <__alt_data_end+0xff802f00>
  802f1c:	88c00015 	stw	r3,0(r17)
  802f20:	003ff706 	br	802f00 <__alt_data_end+0xff802f00>

00802f24 <__divsi3>:
  802f24:	20001b16 	blt	r4,zero,802f94 <__divsi3+0x70>
  802f28:	000f883a 	mov	r7,zero
  802f2c:	28001616 	blt	r5,zero,802f88 <__divsi3+0x64>
  802f30:	200d883a 	mov	r6,r4
  802f34:	29001a2e 	bgeu	r5,r4,802fa0 <__divsi3+0x7c>
  802f38:	00800804 	movi	r2,32
  802f3c:	00c00044 	movi	r3,1
  802f40:	00000106 	br	802f48 <__divsi3+0x24>
  802f44:	10000d26 	beq	r2,zero,802f7c <__divsi3+0x58>
  802f48:	294b883a 	add	r5,r5,r5
  802f4c:	10bfffc4 	addi	r2,r2,-1
  802f50:	18c7883a 	add	r3,r3,r3
  802f54:	293ffb36 	bltu	r5,r4,802f44 <__alt_data_end+0xff802f44>
  802f58:	0005883a 	mov	r2,zero
  802f5c:	18000726 	beq	r3,zero,802f7c <__divsi3+0x58>
  802f60:	0005883a 	mov	r2,zero
  802f64:	31400236 	bltu	r6,r5,802f70 <__divsi3+0x4c>
  802f68:	314dc83a 	sub	r6,r6,r5
  802f6c:	10c4b03a 	or	r2,r2,r3
  802f70:	1806d07a 	srli	r3,r3,1
  802f74:	280ad07a 	srli	r5,r5,1
  802f78:	183ffa1e 	bne	r3,zero,802f64 <__alt_data_end+0xff802f64>
  802f7c:	38000126 	beq	r7,zero,802f84 <__divsi3+0x60>
  802f80:	0085c83a 	sub	r2,zero,r2
  802f84:	f800283a 	ret
  802f88:	014bc83a 	sub	r5,zero,r5
  802f8c:	39c0005c 	xori	r7,r7,1
  802f90:	003fe706 	br	802f30 <__alt_data_end+0xff802f30>
  802f94:	0109c83a 	sub	r4,zero,r4
  802f98:	01c00044 	movi	r7,1
  802f9c:	003fe306 	br	802f2c <__alt_data_end+0xff802f2c>
  802fa0:	00c00044 	movi	r3,1
  802fa4:	003fee06 	br	802f60 <__alt_data_end+0xff802f60>

00802fa8 <__modsi3>:
  802fa8:	20001716 	blt	r4,zero,803008 <__modsi3+0x60>
  802fac:	000f883a 	mov	r7,zero
  802fb0:	2005883a 	mov	r2,r4
  802fb4:	28001216 	blt	r5,zero,803000 <__modsi3+0x58>
  802fb8:	2900162e 	bgeu	r5,r4,803014 <__modsi3+0x6c>
  802fbc:	01800804 	movi	r6,32
  802fc0:	00c00044 	movi	r3,1
  802fc4:	00000106 	br	802fcc <__modsi3+0x24>
  802fc8:	30000a26 	beq	r6,zero,802ff4 <__modsi3+0x4c>
  802fcc:	294b883a 	add	r5,r5,r5
  802fd0:	31bfffc4 	addi	r6,r6,-1
  802fd4:	18c7883a 	add	r3,r3,r3
  802fd8:	293ffb36 	bltu	r5,r4,802fc8 <__alt_data_end+0xff802fc8>
  802fdc:	18000526 	beq	r3,zero,802ff4 <__modsi3+0x4c>
  802fe0:	1806d07a 	srli	r3,r3,1
  802fe4:	11400136 	bltu	r2,r5,802fec <__modsi3+0x44>
  802fe8:	1145c83a 	sub	r2,r2,r5
  802fec:	280ad07a 	srli	r5,r5,1
  802ff0:	183ffb1e 	bne	r3,zero,802fe0 <__alt_data_end+0xff802fe0>
  802ff4:	38000126 	beq	r7,zero,802ffc <__modsi3+0x54>
  802ff8:	0085c83a 	sub	r2,zero,r2
  802ffc:	f800283a 	ret
  803000:	014bc83a 	sub	r5,zero,r5
  803004:	003fec06 	br	802fb8 <__alt_data_end+0xff802fb8>
  803008:	0109c83a 	sub	r4,zero,r4
  80300c:	01c00044 	movi	r7,1
  803010:	003fe706 	br	802fb0 <__alt_data_end+0xff802fb0>
  803014:	00c00044 	movi	r3,1
  803018:	003ff106 	br	802fe0 <__alt_data_end+0xff802fe0>

0080301c <__udivsi3>:
  80301c:	200d883a 	mov	r6,r4
  803020:	2900152e 	bgeu	r5,r4,803078 <__udivsi3+0x5c>
  803024:	28001416 	blt	r5,zero,803078 <__udivsi3+0x5c>
  803028:	00800804 	movi	r2,32
  80302c:	00c00044 	movi	r3,1
  803030:	00000206 	br	80303c <__udivsi3+0x20>
  803034:	10000e26 	beq	r2,zero,803070 <__udivsi3+0x54>
  803038:	28000516 	blt	r5,zero,803050 <__udivsi3+0x34>
  80303c:	294b883a 	add	r5,r5,r5
  803040:	10bfffc4 	addi	r2,r2,-1
  803044:	18c7883a 	add	r3,r3,r3
  803048:	293ffa36 	bltu	r5,r4,803034 <__alt_data_end+0xff803034>
  80304c:	18000826 	beq	r3,zero,803070 <__udivsi3+0x54>
  803050:	0005883a 	mov	r2,zero
  803054:	31400236 	bltu	r6,r5,803060 <__udivsi3+0x44>
  803058:	314dc83a 	sub	r6,r6,r5
  80305c:	10c4b03a 	or	r2,r2,r3
  803060:	1806d07a 	srli	r3,r3,1
  803064:	280ad07a 	srli	r5,r5,1
  803068:	183ffa1e 	bne	r3,zero,803054 <__alt_data_end+0xff803054>
  80306c:	f800283a 	ret
  803070:	0005883a 	mov	r2,zero
  803074:	f800283a 	ret
  803078:	00c00044 	movi	r3,1
  80307c:	003ff406 	br	803050 <__alt_data_end+0xff803050>

00803080 <__umodsi3>:
  803080:	2005883a 	mov	r2,r4
  803084:	2900122e 	bgeu	r5,r4,8030d0 <__umodsi3+0x50>
  803088:	28001116 	blt	r5,zero,8030d0 <__umodsi3+0x50>
  80308c:	01800804 	movi	r6,32
  803090:	00c00044 	movi	r3,1
  803094:	00000206 	br	8030a0 <__umodsi3+0x20>
  803098:	30000c26 	beq	r6,zero,8030cc <__umodsi3+0x4c>
  80309c:	28000516 	blt	r5,zero,8030b4 <__umodsi3+0x34>
  8030a0:	294b883a 	add	r5,r5,r5
  8030a4:	31bfffc4 	addi	r6,r6,-1
  8030a8:	18c7883a 	add	r3,r3,r3
  8030ac:	293ffa36 	bltu	r5,r4,803098 <__alt_data_end+0xff803098>
  8030b0:	18000626 	beq	r3,zero,8030cc <__umodsi3+0x4c>
  8030b4:	1806d07a 	srli	r3,r3,1
  8030b8:	11400136 	bltu	r2,r5,8030c0 <__umodsi3+0x40>
  8030bc:	1145c83a 	sub	r2,r2,r5
  8030c0:	280ad07a 	srli	r5,r5,1
  8030c4:	183ffb1e 	bne	r3,zero,8030b4 <__alt_data_end+0xff8030b4>
  8030c8:	f800283a 	ret
  8030cc:	f800283a 	ret
  8030d0:	00c00044 	movi	r3,1
  8030d4:	003ff706 	br	8030b4 <__alt_data_end+0xff8030b4>

008030d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8030d8:	defffe04 	addi	sp,sp,-8
  8030dc:	dfc00115 	stw	ra,4(sp)
  8030e0:	df000015 	stw	fp,0(sp)
  8030e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8030e8:	d0a00917 	ldw	r2,-32732(gp)
  8030ec:	10000326 	beq	r2,zero,8030fc <alt_get_errno+0x24>
  8030f0:	d0a00917 	ldw	r2,-32732(gp)
  8030f4:	103ee83a 	callr	r2
  8030f8:	00000106 	br	803100 <alt_get_errno+0x28>
  8030fc:	d0a74104 	addi	r2,gp,-25340
}
  803100:	e037883a 	mov	sp,fp
  803104:	dfc00117 	ldw	ra,4(sp)
  803108:	df000017 	ldw	fp,0(sp)
  80310c:	dec00204 	addi	sp,sp,8
  803110:	f800283a 	ret

00803114 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  803114:	defffb04 	addi	sp,sp,-20
  803118:	dfc00415 	stw	ra,16(sp)
  80311c:	df000315 	stw	fp,12(sp)
  803120:	df000304 	addi	fp,sp,12
  803124:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803128:	e0bfff17 	ldw	r2,-4(fp)
  80312c:	10000616 	blt	r2,zero,803148 <close+0x34>
  803130:	e0bfff17 	ldw	r2,-4(fp)
  803134:	10c00324 	muli	r3,r2,12
  803138:	00802034 	movhi	r2,128
  80313c:	109f1304 	addi	r2,r2,31820
  803140:	1885883a 	add	r2,r3,r2
  803144:	00000106 	br	80314c <close+0x38>
  803148:	0005883a 	mov	r2,zero
  80314c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  803150:	e0bffd17 	ldw	r2,-12(fp)
  803154:	10001926 	beq	r2,zero,8031bc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803158:	e0bffd17 	ldw	r2,-12(fp)
  80315c:	10800017 	ldw	r2,0(r2)
  803160:	10800417 	ldw	r2,16(r2)
  803164:	10000626 	beq	r2,zero,803180 <close+0x6c>
  803168:	e0bffd17 	ldw	r2,-12(fp)
  80316c:	10800017 	ldw	r2,0(r2)
  803170:	10800417 	ldw	r2,16(r2)
  803174:	e13ffd17 	ldw	r4,-12(fp)
  803178:	103ee83a 	callr	r2
  80317c:	00000106 	br	803184 <close+0x70>
  803180:	0005883a 	mov	r2,zero
  803184:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  803188:	e13fff17 	ldw	r4,-4(fp)
  80318c:	08037d40 	call	8037d4 <alt_release_fd>
    if (rval < 0)
  803190:	e0bffe17 	ldw	r2,-8(fp)
  803194:	1000070e 	bge	r2,zero,8031b4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  803198:	08030d80 	call	8030d8 <alt_get_errno>
  80319c:	1007883a 	mov	r3,r2
  8031a0:	e0bffe17 	ldw	r2,-8(fp)
  8031a4:	0085c83a 	sub	r2,zero,r2
  8031a8:	18800015 	stw	r2,0(r3)
      return -1;
  8031ac:	00bfffc4 	movi	r2,-1
  8031b0:	00000706 	br	8031d0 <close+0xbc>
    }
    return 0;
  8031b4:	0005883a 	mov	r2,zero
  8031b8:	00000506 	br	8031d0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8031bc:	08030d80 	call	8030d8 <alt_get_errno>
  8031c0:	1007883a 	mov	r3,r2
  8031c4:	00801444 	movi	r2,81
  8031c8:	18800015 	stw	r2,0(r3)
    return -1;
  8031cc:	00bfffc4 	movi	r2,-1
  }
}
  8031d0:	e037883a 	mov	sp,fp
  8031d4:	dfc00117 	ldw	ra,4(sp)
  8031d8:	df000017 	ldw	fp,0(sp)
  8031dc:	dec00204 	addi	sp,sp,8
  8031e0:	f800283a 	ret

008031e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8031e4:	defffc04 	addi	sp,sp,-16
  8031e8:	df000315 	stw	fp,12(sp)
  8031ec:	df000304 	addi	fp,sp,12
  8031f0:	e13ffd15 	stw	r4,-12(fp)
  8031f4:	e17ffe15 	stw	r5,-8(fp)
  8031f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8031fc:	e0bfff17 	ldw	r2,-4(fp)
}
  803200:	e037883a 	mov	sp,fp
  803204:	df000017 	ldw	fp,0(sp)
  803208:	dec00104 	addi	sp,sp,4
  80320c:	f800283a 	ret

00803210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803210:	defffe04 	addi	sp,sp,-8
  803214:	dfc00115 	stw	ra,4(sp)
  803218:	df000015 	stw	fp,0(sp)
  80321c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803220:	d0a00917 	ldw	r2,-32732(gp)
  803224:	10000326 	beq	r2,zero,803234 <alt_get_errno+0x24>
  803228:	d0a00917 	ldw	r2,-32732(gp)
  80322c:	103ee83a 	callr	r2
  803230:	00000106 	br	803238 <alt_get_errno+0x28>
  803234:	d0a74104 	addi	r2,gp,-25340
}
  803238:	e037883a 	mov	sp,fp
  80323c:	dfc00117 	ldw	ra,4(sp)
  803240:	df000017 	ldw	fp,0(sp)
  803244:	dec00204 	addi	sp,sp,8
  803248:	f800283a 	ret

0080324c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80324c:	defffb04 	addi	sp,sp,-20
  803250:	dfc00415 	stw	ra,16(sp)
  803254:	df000315 	stw	fp,12(sp)
  803258:	df000304 	addi	fp,sp,12
  80325c:	e13ffe15 	stw	r4,-8(fp)
  803260:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803264:	e0bffe17 	ldw	r2,-8(fp)
  803268:	10000616 	blt	r2,zero,803284 <fstat+0x38>
  80326c:	e0bffe17 	ldw	r2,-8(fp)
  803270:	10c00324 	muli	r3,r2,12
  803274:	00802034 	movhi	r2,128
  803278:	109f1304 	addi	r2,r2,31820
  80327c:	1885883a 	add	r2,r3,r2
  803280:	00000106 	br	803288 <fstat+0x3c>
  803284:	0005883a 	mov	r2,zero
  803288:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80328c:	e0bffd17 	ldw	r2,-12(fp)
  803290:	10001026 	beq	r2,zero,8032d4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  803294:	e0bffd17 	ldw	r2,-12(fp)
  803298:	10800017 	ldw	r2,0(r2)
  80329c:	10800817 	ldw	r2,32(r2)
  8032a0:	10000726 	beq	r2,zero,8032c0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  8032a4:	e0bffd17 	ldw	r2,-12(fp)
  8032a8:	10800017 	ldw	r2,0(r2)
  8032ac:	10800817 	ldw	r2,32(r2)
  8032b0:	e17fff17 	ldw	r5,-4(fp)
  8032b4:	e13ffd17 	ldw	r4,-12(fp)
  8032b8:	103ee83a 	callr	r2
  8032bc:	00000a06 	br	8032e8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8032c0:	e0bfff17 	ldw	r2,-4(fp)
  8032c4:	00c80004 	movi	r3,8192
  8032c8:	10c00115 	stw	r3,4(r2)
      return 0;
  8032cc:	0005883a 	mov	r2,zero
  8032d0:	00000506 	br	8032e8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8032d4:	08032100 	call	803210 <alt_get_errno>
  8032d8:	1007883a 	mov	r3,r2
  8032dc:	00801444 	movi	r2,81
  8032e0:	18800015 	stw	r2,0(r3)
    return -1;
  8032e4:	00bfffc4 	movi	r2,-1
  }
}
  8032e8:	e037883a 	mov	sp,fp
  8032ec:	dfc00117 	ldw	ra,4(sp)
  8032f0:	df000017 	ldw	fp,0(sp)
  8032f4:	dec00204 	addi	sp,sp,8
  8032f8:	f800283a 	ret

008032fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8032fc:	defffe04 	addi	sp,sp,-8
  803300:	dfc00115 	stw	ra,4(sp)
  803304:	df000015 	stw	fp,0(sp)
  803308:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80330c:	d0a00917 	ldw	r2,-32732(gp)
  803310:	10000326 	beq	r2,zero,803320 <alt_get_errno+0x24>
  803314:	d0a00917 	ldw	r2,-32732(gp)
  803318:	103ee83a 	callr	r2
  80331c:	00000106 	br	803324 <alt_get_errno+0x28>
  803320:	d0a74104 	addi	r2,gp,-25340
}
  803324:	e037883a 	mov	sp,fp
  803328:	dfc00117 	ldw	ra,4(sp)
  80332c:	df000017 	ldw	fp,0(sp)
  803330:	dec00204 	addi	sp,sp,8
  803334:	f800283a 	ret

00803338 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  803338:	deffed04 	addi	sp,sp,-76
  80333c:	dfc01215 	stw	ra,72(sp)
  803340:	df001115 	stw	fp,68(sp)
  803344:	df001104 	addi	fp,sp,68
  803348:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80334c:	e0bfff17 	ldw	r2,-4(fp)
  803350:	10000616 	blt	r2,zero,80336c <isatty+0x34>
  803354:	e0bfff17 	ldw	r2,-4(fp)
  803358:	10c00324 	muli	r3,r2,12
  80335c:	00802034 	movhi	r2,128
  803360:	109f1304 	addi	r2,r2,31820
  803364:	1885883a 	add	r2,r3,r2
  803368:	00000106 	br	803370 <isatty+0x38>
  80336c:	0005883a 	mov	r2,zero
  803370:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  803374:	e0bfef17 	ldw	r2,-68(fp)
  803378:	10000e26 	beq	r2,zero,8033b4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80337c:	e0bfef17 	ldw	r2,-68(fp)
  803380:	10800017 	ldw	r2,0(r2)
  803384:	10800817 	ldw	r2,32(r2)
  803388:	1000021e 	bne	r2,zero,803394 <isatty+0x5c>
    {
      return 1;
  80338c:	00800044 	movi	r2,1
  803390:	00000d06 	br	8033c8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  803394:	e0bff004 	addi	r2,fp,-64
  803398:	100b883a 	mov	r5,r2
  80339c:	e13fff17 	ldw	r4,-4(fp)
  8033a0:	080324c0 	call	80324c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8033a4:	e0bff117 	ldw	r2,-60(fp)
  8033a8:	10880020 	cmpeqi	r2,r2,8192
  8033ac:	10803fcc 	andi	r2,r2,255
  8033b0:	00000506 	br	8033c8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8033b4:	08032fc0 	call	8032fc <alt_get_errno>
  8033b8:	1007883a 	mov	r3,r2
  8033bc:	00801444 	movi	r2,81
  8033c0:	18800015 	stw	r2,0(r3)
    return 0;
  8033c4:	0005883a 	mov	r2,zero
  }
}
  8033c8:	e037883a 	mov	sp,fp
  8033cc:	dfc00117 	ldw	ra,4(sp)
  8033d0:	df000017 	ldw	fp,0(sp)
  8033d4:	dec00204 	addi	sp,sp,8
  8033d8:	f800283a 	ret

008033dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8033dc:	defffc04 	addi	sp,sp,-16
  8033e0:	df000315 	stw	fp,12(sp)
  8033e4:	df000304 	addi	fp,sp,12
  8033e8:	e13ffd15 	stw	r4,-12(fp)
  8033ec:	e17ffe15 	stw	r5,-8(fp)
  8033f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8033f4:	e0fffe17 	ldw	r3,-8(fp)
  8033f8:	e0bffd17 	ldw	r2,-12(fp)
  8033fc:	18800c26 	beq	r3,r2,803430 <alt_load_section+0x54>
  {
    while( to != end )
  803400:	00000806 	br	803424 <alt_load_section+0x48>
    {
      *to++ = *from++;
  803404:	e0bffe17 	ldw	r2,-8(fp)
  803408:	10c00104 	addi	r3,r2,4
  80340c:	e0fffe15 	stw	r3,-8(fp)
  803410:	e0fffd17 	ldw	r3,-12(fp)
  803414:	19000104 	addi	r4,r3,4
  803418:	e13ffd15 	stw	r4,-12(fp)
  80341c:	18c00017 	ldw	r3,0(r3)
  803420:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  803424:	e0fffe17 	ldw	r3,-8(fp)
  803428:	e0bfff17 	ldw	r2,-4(fp)
  80342c:	18bff51e 	bne	r3,r2,803404 <__alt_data_end+0xff803404>
    {
      *to++ = *from++;
    }
  }
}
  803430:	0001883a 	nop
  803434:	e037883a 	mov	sp,fp
  803438:	df000017 	ldw	fp,0(sp)
  80343c:	dec00104 	addi	sp,sp,4
  803440:	f800283a 	ret

00803444 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  803444:	defffe04 	addi	sp,sp,-8
  803448:	dfc00115 	stw	ra,4(sp)
  80344c:	df000015 	stw	fp,0(sp)
  803450:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  803454:	01802074 	movhi	r6,129
  803458:	31a42c04 	addi	r6,r6,-28496
  80345c:	01402034 	movhi	r5,128
  803460:	295cfe04 	addi	r5,r5,29688
  803464:	01002074 	movhi	r4,129
  803468:	21242c04 	addi	r4,r4,-28496
  80346c:	08033dc0 	call	8033dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  803470:	01802034 	movhi	r6,128
  803474:	31809204 	addi	r6,r6,584
  803478:	01402034 	movhi	r5,128
  80347c:	29400804 	addi	r5,r5,32
  803480:	01002034 	movhi	r4,128
  803484:	21000804 	addi	r4,r4,32
  803488:	08033dc0 	call	8033dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80348c:	01802034 	movhi	r6,128
  803490:	319cfe04 	addi	r6,r6,29688
  803494:	01402034 	movhi	r5,128
  803498:	295c3904 	addi	r5,r5,28900
  80349c:	01002034 	movhi	r4,128
  8034a0:	211c3904 	addi	r4,r4,28900
  8034a4:	08033dc0 	call	8033dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8034a8:	0805f680 	call	805f68 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8034ac:	08061500 	call	806150 <alt_icache_flush_all>
}
  8034b0:	0001883a 	nop
  8034b4:	e037883a 	mov	sp,fp
  8034b8:	dfc00117 	ldw	ra,4(sp)
  8034bc:	df000017 	ldw	fp,0(sp)
  8034c0:	dec00204 	addi	sp,sp,8
  8034c4:	f800283a 	ret

008034c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8034c8:	defffe04 	addi	sp,sp,-8
  8034cc:	dfc00115 	stw	ra,4(sp)
  8034d0:	df000015 	stw	fp,0(sp)
  8034d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8034d8:	d0a00917 	ldw	r2,-32732(gp)
  8034dc:	10000326 	beq	r2,zero,8034ec <alt_get_errno+0x24>
  8034e0:	d0a00917 	ldw	r2,-32732(gp)
  8034e4:	103ee83a 	callr	r2
  8034e8:	00000106 	br	8034f0 <alt_get_errno+0x28>
  8034ec:	d0a74104 	addi	r2,gp,-25340
}
  8034f0:	e037883a 	mov	sp,fp
  8034f4:	dfc00117 	ldw	ra,4(sp)
  8034f8:	df000017 	ldw	fp,0(sp)
  8034fc:	dec00204 	addi	sp,sp,8
  803500:	f800283a 	ret

00803504 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  803504:	defff904 	addi	sp,sp,-28
  803508:	dfc00615 	stw	ra,24(sp)
  80350c:	df000515 	stw	fp,20(sp)
  803510:	df000504 	addi	fp,sp,20
  803514:	e13ffd15 	stw	r4,-12(fp)
  803518:	e17ffe15 	stw	r5,-8(fp)
  80351c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  803520:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803524:	e0bffd17 	ldw	r2,-12(fp)
  803528:	10000616 	blt	r2,zero,803544 <lseek+0x40>
  80352c:	e0bffd17 	ldw	r2,-12(fp)
  803530:	10c00324 	muli	r3,r2,12
  803534:	00802034 	movhi	r2,128
  803538:	109f1304 	addi	r2,r2,31820
  80353c:	1885883a 	add	r2,r3,r2
  803540:	00000106 	br	803548 <lseek+0x44>
  803544:	0005883a 	mov	r2,zero
  803548:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80354c:	e0bffc17 	ldw	r2,-16(fp)
  803550:	10001026 	beq	r2,zero,803594 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  803554:	e0bffc17 	ldw	r2,-16(fp)
  803558:	10800017 	ldw	r2,0(r2)
  80355c:	10800717 	ldw	r2,28(r2)
  803560:	10000926 	beq	r2,zero,803588 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  803564:	e0bffc17 	ldw	r2,-16(fp)
  803568:	10800017 	ldw	r2,0(r2)
  80356c:	10800717 	ldw	r2,28(r2)
  803570:	e1bfff17 	ldw	r6,-4(fp)
  803574:	e17ffe17 	ldw	r5,-8(fp)
  803578:	e13ffc17 	ldw	r4,-16(fp)
  80357c:	103ee83a 	callr	r2
  803580:	e0bffb15 	stw	r2,-20(fp)
  803584:	00000506 	br	80359c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  803588:	00bfde84 	movi	r2,-134
  80358c:	e0bffb15 	stw	r2,-20(fp)
  803590:	00000206 	br	80359c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  803594:	00bfebc4 	movi	r2,-81
  803598:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80359c:	e0bffb17 	ldw	r2,-20(fp)
  8035a0:	1000070e 	bge	r2,zero,8035c0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  8035a4:	08034c80 	call	8034c8 <alt_get_errno>
  8035a8:	1007883a 	mov	r3,r2
  8035ac:	e0bffb17 	ldw	r2,-20(fp)
  8035b0:	0085c83a 	sub	r2,zero,r2
  8035b4:	18800015 	stw	r2,0(r3)
    rc = -1;
  8035b8:	00bfffc4 	movi	r2,-1
  8035bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  8035c0:	e0bffb17 	ldw	r2,-20(fp)
}
  8035c4:	e037883a 	mov	sp,fp
  8035c8:	dfc00117 	ldw	ra,4(sp)
  8035cc:	df000017 	ldw	fp,0(sp)
  8035d0:	dec00204 	addi	sp,sp,8
  8035d4:	f800283a 	ret

008035d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8035d8:	defffd04 	addi	sp,sp,-12
  8035dc:	dfc00215 	stw	ra,8(sp)
  8035e0:	df000115 	stw	fp,4(sp)
  8035e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8035e8:	0009883a 	mov	r4,zero
  8035ec:	0803a500 	call	803a50 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8035f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8035f4:	0803a880 	call	803a88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8035f8:	01802034 	movhi	r6,128
  8035fc:	319c4304 	addi	r6,r6,28940
  803600:	01402034 	movhi	r5,128
  803604:	295c4304 	addi	r5,r5,28940
  803608:	01002034 	movhi	r4,128
  80360c:	211c4304 	addi	r4,r4,28940
  803610:	08062480 	call	806248 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  803614:	08060900 	call	806090 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803618:	01002034 	movhi	r4,128
  80361c:	21183c04 	addi	r4,r4,24816
  803620:	0806d500 	call	806d50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803624:	d0a74217 	ldw	r2,-25336(gp)
  803628:	d0e74317 	ldw	r3,-25332(gp)
  80362c:	d1274417 	ldw	r4,-25328(gp)
  803630:	200d883a 	mov	r6,r4
  803634:	180b883a 	mov	r5,r3
  803638:	1009883a 	mov	r4,r2
  80363c:	08002940 	call	800294 <main>
  803640:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  803644:	01000044 	movi	r4,1
  803648:	08031140 	call	803114 <close>
  exit (result);
  80364c:	e13fff17 	ldw	r4,-4(fp)
  803650:	0806d640 	call	806d64 <exit>

00803654 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  803654:	defffe04 	addi	sp,sp,-8
  803658:	df000115 	stw	fp,4(sp)
  80365c:	df000104 	addi	fp,sp,4
  803660:	e13fff15 	stw	r4,-4(fp)
}
  803664:	0001883a 	nop
  803668:	e037883a 	mov	sp,fp
  80366c:	df000017 	ldw	fp,0(sp)
  803670:	dec00104 	addi	sp,sp,4
  803674:	f800283a 	ret

00803678 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  803678:	defffe04 	addi	sp,sp,-8
  80367c:	df000115 	stw	fp,4(sp)
  803680:	df000104 	addi	fp,sp,4
  803684:	e13fff15 	stw	r4,-4(fp)
}
  803688:	0001883a 	nop
  80368c:	e037883a 	mov	sp,fp
  803690:	df000017 	ldw	fp,0(sp)
  803694:	dec00104 	addi	sp,sp,4
  803698:	f800283a 	ret

0080369c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80369c:	defffe04 	addi	sp,sp,-8
  8036a0:	dfc00115 	stw	ra,4(sp)
  8036a4:	df000015 	stw	fp,0(sp)
  8036a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8036ac:	d0a00917 	ldw	r2,-32732(gp)
  8036b0:	10000326 	beq	r2,zero,8036c0 <alt_get_errno+0x24>
  8036b4:	d0a00917 	ldw	r2,-32732(gp)
  8036b8:	103ee83a 	callr	r2
  8036bc:	00000106 	br	8036c4 <alt_get_errno+0x28>
  8036c0:	d0a74104 	addi	r2,gp,-25340
}
  8036c4:	e037883a 	mov	sp,fp
  8036c8:	dfc00117 	ldw	ra,4(sp)
  8036cc:	df000017 	ldw	fp,0(sp)
  8036d0:	dec00204 	addi	sp,sp,8
  8036d4:	f800283a 	ret

008036d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8036d8:	defff904 	addi	sp,sp,-28
  8036dc:	dfc00615 	stw	ra,24(sp)
  8036e0:	df000515 	stw	fp,20(sp)
  8036e4:	df000504 	addi	fp,sp,20
  8036e8:	e13ffd15 	stw	r4,-12(fp)
  8036ec:	e17ffe15 	stw	r5,-8(fp)
  8036f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8036f4:	e0bffd17 	ldw	r2,-12(fp)
  8036f8:	10000616 	blt	r2,zero,803714 <read+0x3c>
  8036fc:	e0bffd17 	ldw	r2,-12(fp)
  803700:	10c00324 	muli	r3,r2,12
  803704:	00802034 	movhi	r2,128
  803708:	109f1304 	addi	r2,r2,31820
  80370c:	1885883a 	add	r2,r3,r2
  803710:	00000106 	br	803718 <read+0x40>
  803714:	0005883a 	mov	r2,zero
  803718:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80371c:	e0bffb17 	ldw	r2,-20(fp)
  803720:	10002226 	beq	r2,zero,8037ac <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803724:	e0bffb17 	ldw	r2,-20(fp)
  803728:	10800217 	ldw	r2,8(r2)
  80372c:	108000cc 	andi	r2,r2,3
  803730:	10800060 	cmpeqi	r2,r2,1
  803734:	1000181e 	bne	r2,zero,803798 <read+0xc0>
        (fd->dev->read))
  803738:	e0bffb17 	ldw	r2,-20(fp)
  80373c:	10800017 	ldw	r2,0(r2)
  803740:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  803744:	10001426 	beq	r2,zero,803798 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  803748:	e0bffb17 	ldw	r2,-20(fp)
  80374c:	10800017 	ldw	r2,0(r2)
  803750:	10800517 	ldw	r2,20(r2)
  803754:	e0ffff17 	ldw	r3,-4(fp)
  803758:	180d883a 	mov	r6,r3
  80375c:	e17ffe17 	ldw	r5,-8(fp)
  803760:	e13ffb17 	ldw	r4,-20(fp)
  803764:	103ee83a 	callr	r2
  803768:	e0bffc15 	stw	r2,-16(fp)
  80376c:	e0bffc17 	ldw	r2,-16(fp)
  803770:	1000070e 	bge	r2,zero,803790 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  803774:	080369c0 	call	80369c <alt_get_errno>
  803778:	1007883a 	mov	r3,r2
  80377c:	e0bffc17 	ldw	r2,-16(fp)
  803780:	0085c83a 	sub	r2,zero,r2
  803784:	18800015 	stw	r2,0(r3)
          return -1;
  803788:	00bfffc4 	movi	r2,-1
  80378c:	00000c06 	br	8037c0 <read+0xe8>
        }
        return rval;
  803790:	e0bffc17 	ldw	r2,-16(fp)
  803794:	00000a06 	br	8037c0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  803798:	080369c0 	call	80369c <alt_get_errno>
  80379c:	1007883a 	mov	r3,r2
  8037a0:	00800344 	movi	r2,13
  8037a4:	18800015 	stw	r2,0(r3)
  8037a8:	00000406 	br	8037bc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8037ac:	080369c0 	call	80369c <alt_get_errno>
  8037b0:	1007883a 	mov	r3,r2
  8037b4:	00801444 	movi	r2,81
  8037b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8037bc:	00bfffc4 	movi	r2,-1
}
  8037c0:	e037883a 	mov	sp,fp
  8037c4:	dfc00117 	ldw	ra,4(sp)
  8037c8:	df000017 	ldw	fp,0(sp)
  8037cc:	dec00204 	addi	sp,sp,8
  8037d0:	f800283a 	ret

008037d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8037d4:	defffe04 	addi	sp,sp,-8
  8037d8:	df000115 	stw	fp,4(sp)
  8037dc:	df000104 	addi	fp,sp,4
  8037e0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8037e4:	e0bfff17 	ldw	r2,-4(fp)
  8037e8:	108000d0 	cmplti	r2,r2,3
  8037ec:	10000d1e 	bne	r2,zero,803824 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8037f0:	00802034 	movhi	r2,128
  8037f4:	109f1304 	addi	r2,r2,31820
  8037f8:	e0ffff17 	ldw	r3,-4(fp)
  8037fc:	18c00324 	muli	r3,r3,12
  803800:	10c5883a 	add	r2,r2,r3
  803804:	10800204 	addi	r2,r2,8
  803808:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80380c:	00802034 	movhi	r2,128
  803810:	109f1304 	addi	r2,r2,31820
  803814:	e0ffff17 	ldw	r3,-4(fp)
  803818:	18c00324 	muli	r3,r3,12
  80381c:	10c5883a 	add	r2,r2,r3
  803820:	10000015 	stw	zero,0(r2)
  }
}
  803824:	0001883a 	nop
  803828:	e037883a 	mov	sp,fp
  80382c:	df000017 	ldw	fp,0(sp)
  803830:	dec00104 	addi	sp,sp,4
  803834:	f800283a 	ret

00803838 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  803838:	defff904 	addi	sp,sp,-28
  80383c:	df000615 	stw	fp,24(sp)
  803840:	df000604 	addi	fp,sp,24
  803844:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803848:	0005303a 	rdctl	r2,status
  80384c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803850:	e0fffe17 	ldw	r3,-8(fp)
  803854:	00bfff84 	movi	r2,-2
  803858:	1884703a 	and	r2,r3,r2
  80385c:	1001703a 	wrctl	status,r2
  
  return context;
  803860:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  803864:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  803868:	d0a00a17 	ldw	r2,-32728(gp)
  80386c:	10c000c4 	addi	r3,r2,3
  803870:	00bfff04 	movi	r2,-4
  803874:	1884703a 	and	r2,r3,r2
  803878:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80387c:	d0e00a17 	ldw	r3,-32728(gp)
  803880:	e0bfff17 	ldw	r2,-4(fp)
  803884:	1887883a 	add	r3,r3,r2
  803888:	00804034 	movhi	r2,256
  80388c:	10800004 	addi	r2,r2,0
  803890:	10c0062e 	bgeu	r2,r3,8038ac <sbrk+0x74>
  803894:	e0bffb17 	ldw	r2,-20(fp)
  803898:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80389c:	e0bffa17 	ldw	r2,-24(fp)
  8038a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8038a4:	00bfffc4 	movi	r2,-1
  8038a8:	00000b06 	br	8038d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  8038ac:	d0a00a17 	ldw	r2,-32728(gp)
  8038b0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  8038b4:	d0e00a17 	ldw	r3,-32728(gp)
  8038b8:	e0bfff17 	ldw	r2,-4(fp)
  8038bc:	1885883a 	add	r2,r3,r2
  8038c0:	d0a00a15 	stw	r2,-32728(gp)
  8038c4:	e0bffb17 	ldw	r2,-20(fp)
  8038c8:	e0bffc15 	stw	r2,-16(fp)
  8038cc:	e0bffc17 	ldw	r2,-16(fp)
  8038d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8038d4:	e0bffd17 	ldw	r2,-12(fp)
} 
  8038d8:	e037883a 	mov	sp,fp
  8038dc:	df000017 	ldw	fp,0(sp)
  8038e0:	dec00104 	addi	sp,sp,4
  8038e4:	f800283a 	ret

008038e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8038e8:	defffe04 	addi	sp,sp,-8
  8038ec:	dfc00115 	stw	ra,4(sp)
  8038f0:	df000015 	stw	fp,0(sp)
  8038f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8038f8:	d0a00917 	ldw	r2,-32732(gp)
  8038fc:	10000326 	beq	r2,zero,80390c <alt_get_errno+0x24>
  803900:	d0a00917 	ldw	r2,-32732(gp)
  803904:	103ee83a 	callr	r2
  803908:	00000106 	br	803910 <alt_get_errno+0x28>
  80390c:	d0a74104 	addi	r2,gp,-25340
}
  803910:	e037883a 	mov	sp,fp
  803914:	dfc00117 	ldw	ra,4(sp)
  803918:	df000017 	ldw	fp,0(sp)
  80391c:	dec00204 	addi	sp,sp,8
  803920:	f800283a 	ret

00803924 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803924:	defff904 	addi	sp,sp,-28
  803928:	dfc00615 	stw	ra,24(sp)
  80392c:	df000515 	stw	fp,20(sp)
  803930:	df000504 	addi	fp,sp,20
  803934:	e13ffd15 	stw	r4,-12(fp)
  803938:	e17ffe15 	stw	r5,-8(fp)
  80393c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803940:	e0bffd17 	ldw	r2,-12(fp)
  803944:	10000616 	blt	r2,zero,803960 <write+0x3c>
  803948:	e0bffd17 	ldw	r2,-12(fp)
  80394c:	10c00324 	muli	r3,r2,12
  803950:	00802034 	movhi	r2,128
  803954:	109f1304 	addi	r2,r2,31820
  803958:	1885883a 	add	r2,r3,r2
  80395c:	00000106 	br	803964 <write+0x40>
  803960:	0005883a 	mov	r2,zero
  803964:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  803968:	e0bffb17 	ldw	r2,-20(fp)
  80396c:	10002126 	beq	r2,zero,8039f4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803970:	e0bffb17 	ldw	r2,-20(fp)
  803974:	10800217 	ldw	r2,8(r2)
  803978:	108000cc 	andi	r2,r2,3
  80397c:	10001826 	beq	r2,zero,8039e0 <write+0xbc>
  803980:	e0bffb17 	ldw	r2,-20(fp)
  803984:	10800017 	ldw	r2,0(r2)
  803988:	10800617 	ldw	r2,24(r2)
  80398c:	10001426 	beq	r2,zero,8039e0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803990:	e0bffb17 	ldw	r2,-20(fp)
  803994:	10800017 	ldw	r2,0(r2)
  803998:	10800617 	ldw	r2,24(r2)
  80399c:	e0ffff17 	ldw	r3,-4(fp)
  8039a0:	180d883a 	mov	r6,r3
  8039a4:	e17ffe17 	ldw	r5,-8(fp)
  8039a8:	e13ffb17 	ldw	r4,-20(fp)
  8039ac:	103ee83a 	callr	r2
  8039b0:	e0bffc15 	stw	r2,-16(fp)
  8039b4:	e0bffc17 	ldw	r2,-16(fp)
  8039b8:	1000070e 	bge	r2,zero,8039d8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8039bc:	08038e80 	call	8038e8 <alt_get_errno>
  8039c0:	1007883a 	mov	r3,r2
  8039c4:	e0bffc17 	ldw	r2,-16(fp)
  8039c8:	0085c83a 	sub	r2,zero,r2
  8039cc:	18800015 	stw	r2,0(r3)
        return -1;
  8039d0:	00bfffc4 	movi	r2,-1
  8039d4:	00000c06 	br	803a08 <write+0xe4>
      }
      return rval;
  8039d8:	e0bffc17 	ldw	r2,-16(fp)
  8039dc:	00000a06 	br	803a08 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8039e0:	08038e80 	call	8038e8 <alt_get_errno>
  8039e4:	1007883a 	mov	r3,r2
  8039e8:	00800344 	movi	r2,13
  8039ec:	18800015 	stw	r2,0(r3)
  8039f0:	00000406 	br	803a04 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8039f4:	08038e80 	call	8038e8 <alt_get_errno>
  8039f8:	1007883a 	mov	r3,r2
  8039fc:	00801444 	movi	r2,81
  803a00:	18800015 	stw	r2,0(r3)
  }
  return -1;
  803a04:	00bfffc4 	movi	r2,-1
}
  803a08:	e037883a 	mov	sp,fp
  803a0c:	dfc00117 	ldw	ra,4(sp)
  803a10:	df000017 	ldw	fp,0(sp)
  803a14:	dec00204 	addi	sp,sp,8
  803a18:	f800283a 	ret

00803a1c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  803a1c:	defffd04 	addi	sp,sp,-12
  803a20:	dfc00215 	stw	ra,8(sp)
  803a24:	df000115 	stw	fp,4(sp)
  803a28:	df000104 	addi	fp,sp,4
  803a2c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  803a30:	d1600604 	addi	r5,gp,-32744
  803a34:	e13fff17 	ldw	r4,-4(fp)
  803a38:	0805fec0 	call	805fec <alt_dev_llist_insert>
}
  803a3c:	e037883a 	mov	sp,fp
  803a40:	dfc00117 	ldw	ra,4(sp)
  803a44:	df000017 	ldw	fp,0(sp)
  803a48:	dec00204 	addi	sp,sp,8
  803a4c:	f800283a 	ret

00803a50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  803a50:	defffd04 	addi	sp,sp,-12
  803a54:	dfc00215 	stw	ra,8(sp)
  803a58:	df000115 	stw	fp,4(sp)
  803a5c:	df000104 	addi	fp,sp,4
  803a60:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  803a64:	080686c0 	call	80686c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  803a68:	00800044 	movi	r2,1
  803a6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  803a70:	0001883a 	nop
  803a74:	e037883a 	mov	sp,fp
  803a78:	dfc00117 	ldw	ra,4(sp)
  803a7c:	df000017 	ldw	fp,0(sp)
  803a80:	dec00204 	addi	sp,sp,8
  803a84:	f800283a 	ret

00803a88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  803a88:	defffe04 	addi	sp,sp,-8
  803a8c:	dfc00115 	stw	ra,4(sp)
  803a90:	df000015 	stw	fp,0(sp)
  803a94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  803a98:	01c0fa04 	movi	r7,1000
  803a9c:	01800104 	movi	r6,4
  803aa0:	000b883a 	mov	r5,zero
  803aa4:	01004034 	movhi	r4,256
  803aa8:	21042004 	addi	r4,r4,4224
  803aac:	08054f40 	call	8054f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  803ab0:	000d883a 	mov	r6,zero
  803ab4:	000b883a 	mov	r5,zero
  803ab8:	01002034 	movhi	r4,128
  803abc:	211f7d04 	addi	r4,r4,32244
  803ac0:	0803ca00 	call	803ca0 <altera_avalon_jtag_uart_init>
  803ac4:	01002034 	movhi	r4,128
  803ac8:	211f7304 	addi	r4,r4,32204
  803acc:	0803a1c0 	call	803a1c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  803ad0:	01002074 	movhi	r4,129
  803ad4:	21239504 	addi	r4,r4,-29100
  803ad8:	08052e40 	call	8052e4 <altera_avalon_lcd_16207_init>
  803adc:	01002074 	movhi	r4,129
  803ae0:	21238b04 	addi	r4,r4,-29140
  803ae4:	0803a1c0 	call	803a1c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  803ae8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  803aec:	018000c4 	movi	r6,3
  803af0:	000b883a 	mov	r5,zero
  803af4:	01002074 	movhi	r4,129
  803af8:	2123dd04 	addi	r4,r4,-28812
  803afc:	08056780 	call	805678 <altera_avalon_uart_init>
  803b00:	01002074 	movhi	r4,129
  803b04:	2123d304 	addi	r4,r4,-28852
  803b08:	0803a1c0 	call	803a1c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  803b0c:	01002074 	movhi	r4,129
  803b10:	21240404 	addi	r4,r4,-28656
  803b14:	0803a1c0 	call	803a1c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  803b18:	01002074 	movhi	r4,129
  803b1c:	21241004 	addi	r4,r4,-28608
  803b20:	0803a1c0 	call	803a1c <alt_dev_reg>
}
  803b24:	0001883a 	nop
  803b28:	e037883a 	mov	sp,fp
  803b2c:	dfc00117 	ldw	ra,4(sp)
  803b30:	df000017 	ldw	fp,0(sp)
  803b34:	dec00204 	addi	sp,sp,8
  803b38:	f800283a 	ret

00803b3c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  803b3c:	defffa04 	addi	sp,sp,-24
  803b40:	dfc00515 	stw	ra,20(sp)
  803b44:	df000415 	stw	fp,16(sp)
  803b48:	df000404 	addi	fp,sp,16
  803b4c:	e13ffd15 	stw	r4,-12(fp)
  803b50:	e17ffe15 	stw	r5,-8(fp)
  803b54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803b58:	e0bffd17 	ldw	r2,-12(fp)
  803b5c:	10800017 	ldw	r2,0(r2)
  803b60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  803b64:	e0bffc17 	ldw	r2,-16(fp)
  803b68:	10c00a04 	addi	r3,r2,40
  803b6c:	e0bffd17 	ldw	r2,-12(fp)
  803b70:	10800217 	ldw	r2,8(r2)
  803b74:	100f883a 	mov	r7,r2
  803b78:	e1bfff17 	ldw	r6,-4(fp)
  803b7c:	e17ffe17 	ldw	r5,-8(fp)
  803b80:	1809883a 	mov	r4,r3
  803b84:	080415c0 	call	80415c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  803b88:	e037883a 	mov	sp,fp
  803b8c:	dfc00117 	ldw	ra,4(sp)
  803b90:	df000017 	ldw	fp,0(sp)
  803b94:	dec00204 	addi	sp,sp,8
  803b98:	f800283a 	ret

00803b9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  803b9c:	defffa04 	addi	sp,sp,-24
  803ba0:	dfc00515 	stw	ra,20(sp)
  803ba4:	df000415 	stw	fp,16(sp)
  803ba8:	df000404 	addi	fp,sp,16
  803bac:	e13ffd15 	stw	r4,-12(fp)
  803bb0:	e17ffe15 	stw	r5,-8(fp)
  803bb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803bb8:	e0bffd17 	ldw	r2,-12(fp)
  803bbc:	10800017 	ldw	r2,0(r2)
  803bc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  803bc4:	e0bffc17 	ldw	r2,-16(fp)
  803bc8:	10c00a04 	addi	r3,r2,40
  803bcc:	e0bffd17 	ldw	r2,-12(fp)
  803bd0:	10800217 	ldw	r2,8(r2)
  803bd4:	100f883a 	mov	r7,r2
  803bd8:	e1bfff17 	ldw	r6,-4(fp)
  803bdc:	e17ffe17 	ldw	r5,-8(fp)
  803be0:	1809883a 	mov	r4,r3
  803be4:	08043780 	call	804378 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  803be8:	e037883a 	mov	sp,fp
  803bec:	dfc00117 	ldw	ra,4(sp)
  803bf0:	df000017 	ldw	fp,0(sp)
  803bf4:	dec00204 	addi	sp,sp,8
  803bf8:	f800283a 	ret

00803bfc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  803bfc:	defffc04 	addi	sp,sp,-16
  803c00:	dfc00315 	stw	ra,12(sp)
  803c04:	df000215 	stw	fp,8(sp)
  803c08:	df000204 	addi	fp,sp,8
  803c0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  803c10:	e0bfff17 	ldw	r2,-4(fp)
  803c14:	10800017 	ldw	r2,0(r2)
  803c18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  803c1c:	e0bffe17 	ldw	r2,-8(fp)
  803c20:	10c00a04 	addi	r3,r2,40
  803c24:	e0bfff17 	ldw	r2,-4(fp)
  803c28:	10800217 	ldw	r2,8(r2)
  803c2c:	100b883a 	mov	r5,r2
  803c30:	1809883a 	mov	r4,r3
  803c34:	08040040 	call	804004 <altera_avalon_jtag_uart_close>
}
  803c38:	e037883a 	mov	sp,fp
  803c3c:	dfc00117 	ldw	ra,4(sp)
  803c40:	df000017 	ldw	fp,0(sp)
  803c44:	dec00204 	addi	sp,sp,8
  803c48:	f800283a 	ret

00803c4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  803c4c:	defffa04 	addi	sp,sp,-24
  803c50:	dfc00515 	stw	ra,20(sp)
  803c54:	df000415 	stw	fp,16(sp)
  803c58:	df000404 	addi	fp,sp,16
  803c5c:	e13ffd15 	stw	r4,-12(fp)
  803c60:	e17ffe15 	stw	r5,-8(fp)
  803c64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  803c68:	e0bffd17 	ldw	r2,-12(fp)
  803c6c:	10800017 	ldw	r2,0(r2)
  803c70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  803c74:	e0bffc17 	ldw	r2,-16(fp)
  803c78:	10800a04 	addi	r2,r2,40
  803c7c:	e1bfff17 	ldw	r6,-4(fp)
  803c80:	e17ffe17 	ldw	r5,-8(fp)
  803c84:	1009883a 	mov	r4,r2
  803c88:	080406c0 	call	80406c <altera_avalon_jtag_uart_ioctl>
}
  803c8c:	e037883a 	mov	sp,fp
  803c90:	dfc00117 	ldw	ra,4(sp)
  803c94:	df000017 	ldw	fp,0(sp)
  803c98:	dec00204 	addi	sp,sp,8
  803c9c:	f800283a 	ret

00803ca0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  803ca0:	defffb04 	addi	sp,sp,-20
  803ca4:	dfc00415 	stw	ra,16(sp)
  803ca8:	df000315 	stw	fp,12(sp)
  803cac:	df000304 	addi	fp,sp,12
  803cb0:	e13ffd15 	stw	r4,-12(fp)
  803cb4:	e17ffe15 	stw	r5,-8(fp)
  803cb8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803cbc:	e0bffd17 	ldw	r2,-12(fp)
  803cc0:	00c00044 	movi	r3,1
  803cc4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  803cc8:	e0bffd17 	ldw	r2,-12(fp)
  803ccc:	10800017 	ldw	r2,0(r2)
  803cd0:	10800104 	addi	r2,r2,4
  803cd4:	1007883a 	mov	r3,r2
  803cd8:	e0bffd17 	ldw	r2,-12(fp)
  803cdc:	10800817 	ldw	r2,32(r2)
  803ce0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  803ce4:	e0bfff17 	ldw	r2,-4(fp)
  803ce8:	01802034 	movhi	r6,128
  803cec:	318f5504 	addi	r6,r6,15700
  803cf0:	e17ffd17 	ldw	r5,-12(fp)
  803cf4:	1009883a 	mov	r4,r2
  803cf8:	08062c40 	call	8062c4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  803cfc:	e0bffd17 	ldw	r2,-12(fp)
  803d00:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  803d04:	e0bffd17 	ldw	r2,-12(fp)
  803d08:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  803d0c:	d0e74617 	ldw	r3,-25320(gp)
  803d10:	e1fffd17 	ldw	r7,-12(fp)
  803d14:	01802034 	movhi	r6,128
  803d18:	318fd904 	addi	r6,r6,16228
  803d1c:	180b883a 	mov	r5,r3
  803d20:	1009883a 	mov	r4,r2
  803d24:	0805e3c0 	call	805e3c <alt_alarm_start>
  803d28:	1000040e 	bge	r2,zero,803d3c <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  803d2c:	e0fffd17 	ldw	r3,-12(fp)
  803d30:	00a00034 	movhi	r2,32768
  803d34:	10bfffc4 	addi	r2,r2,-1
  803d38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  803d3c:	0001883a 	nop
  803d40:	e037883a 	mov	sp,fp
  803d44:	dfc00117 	ldw	ra,4(sp)
  803d48:	df000017 	ldw	fp,0(sp)
  803d4c:	dec00204 	addi	sp,sp,8
  803d50:	f800283a 	ret

00803d54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  803d54:	defff704 	addi	sp,sp,-36
  803d58:	df000815 	stw	fp,32(sp)
  803d5c:	df000804 	addi	fp,sp,32
  803d60:	e13ffe15 	stw	r4,-8(fp)
  803d64:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  803d68:	e0bffe17 	ldw	r2,-8(fp)
  803d6c:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  803d70:	e0bffa17 	ldw	r2,-24(fp)
  803d74:	10800017 	ldw	r2,0(r2)
  803d78:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803d7c:	e0bffb17 	ldw	r2,-20(fp)
  803d80:	10800104 	addi	r2,r2,4
  803d84:	10800037 	ldwio	r2,0(r2)
  803d88:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  803d8c:	e0bffc17 	ldw	r2,-16(fp)
  803d90:	1080c00c 	andi	r2,r2,768
  803d94:	10006d26 	beq	r2,zero,803f4c <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  803d98:	e0bffc17 	ldw	r2,-16(fp)
  803d9c:	1080400c 	andi	r2,r2,256
  803da0:	10003526 	beq	r2,zero,803e78 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  803da4:	00800074 	movhi	r2,1
  803da8:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803dac:	e0bffa17 	ldw	r2,-24(fp)
  803db0:	10800a17 	ldw	r2,40(r2)
  803db4:	10800044 	addi	r2,r2,1
  803db8:	1081ffcc 	andi	r2,r2,2047
  803dbc:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  803dc0:	e0bffa17 	ldw	r2,-24(fp)
  803dc4:	10c00b17 	ldw	r3,44(r2)
  803dc8:	e0bffd17 	ldw	r2,-12(fp)
  803dcc:	18801526 	beq	r3,r2,803e24 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  803dd0:	e0bffb17 	ldw	r2,-20(fp)
  803dd4:	10800037 	ldwio	r2,0(r2)
  803dd8:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  803ddc:	e0bff817 	ldw	r2,-32(fp)
  803de0:	10a0000c 	andi	r2,r2,32768
  803de4:	10001126 	beq	r2,zero,803e2c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  803de8:	e0bffa17 	ldw	r2,-24(fp)
  803dec:	10800a17 	ldw	r2,40(r2)
  803df0:	e0fff817 	ldw	r3,-32(fp)
  803df4:	1809883a 	mov	r4,r3
  803df8:	e0fffa17 	ldw	r3,-24(fp)
  803dfc:	1885883a 	add	r2,r3,r2
  803e00:	10800e04 	addi	r2,r2,56
  803e04:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803e08:	e0bffa17 	ldw	r2,-24(fp)
  803e0c:	10800a17 	ldw	r2,40(r2)
  803e10:	10800044 	addi	r2,r2,1
  803e14:	10c1ffcc 	andi	r3,r2,2047
  803e18:	e0bffa17 	ldw	r2,-24(fp)
  803e1c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  803e20:	003fe206 	br	803dac <__alt_data_end+0xff803dac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  803e24:	0001883a 	nop
  803e28:	00000106 	br	803e30 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  803e2c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  803e30:	e0bff817 	ldw	r2,-32(fp)
  803e34:	10bfffec 	andhi	r2,r2,65535
  803e38:	10000f26 	beq	r2,zero,803e78 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  803e3c:	e0bffa17 	ldw	r2,-24(fp)
  803e40:	10c00817 	ldw	r3,32(r2)
  803e44:	00bfff84 	movi	r2,-2
  803e48:	1886703a 	and	r3,r3,r2
  803e4c:	e0bffa17 	ldw	r2,-24(fp)
  803e50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  803e54:	e0bffb17 	ldw	r2,-20(fp)
  803e58:	10800104 	addi	r2,r2,4
  803e5c:	1007883a 	mov	r3,r2
  803e60:	e0bffa17 	ldw	r2,-24(fp)
  803e64:	10800817 	ldw	r2,32(r2)
  803e68:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803e6c:	e0bffb17 	ldw	r2,-20(fp)
  803e70:	10800104 	addi	r2,r2,4
  803e74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  803e78:	e0bffc17 	ldw	r2,-16(fp)
  803e7c:	1080800c 	andi	r2,r2,512
  803e80:	103fbe26 	beq	r2,zero,803d7c <__alt_data_end+0xff803d7c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  803e84:	e0bffc17 	ldw	r2,-16(fp)
  803e88:	1004d43a 	srli	r2,r2,16
  803e8c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  803e90:	00001406 	br	803ee4 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  803e94:	e0bffb17 	ldw	r2,-20(fp)
  803e98:	e0fffa17 	ldw	r3,-24(fp)
  803e9c:	18c00d17 	ldw	r3,52(r3)
  803ea0:	e13ffa17 	ldw	r4,-24(fp)
  803ea4:	20c7883a 	add	r3,r4,r3
  803ea8:	18c20e04 	addi	r3,r3,2104
  803eac:	18c00003 	ldbu	r3,0(r3)
  803eb0:	18c03fcc 	andi	r3,r3,255
  803eb4:	18c0201c 	xori	r3,r3,128
  803eb8:	18ffe004 	addi	r3,r3,-128
  803ebc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  803ec0:	e0bffa17 	ldw	r2,-24(fp)
  803ec4:	10800d17 	ldw	r2,52(r2)
  803ec8:	10800044 	addi	r2,r2,1
  803ecc:	10c1ffcc 	andi	r3,r2,2047
  803ed0:	e0bffa17 	ldw	r2,-24(fp)
  803ed4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  803ed8:	e0bff917 	ldw	r2,-28(fp)
  803edc:	10bfffc4 	addi	r2,r2,-1
  803ee0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  803ee4:	e0bff917 	ldw	r2,-28(fp)
  803ee8:	10000526 	beq	r2,zero,803f00 <altera_avalon_jtag_uart_irq+0x1ac>
  803eec:	e0bffa17 	ldw	r2,-24(fp)
  803ef0:	10c00d17 	ldw	r3,52(r2)
  803ef4:	e0bffa17 	ldw	r2,-24(fp)
  803ef8:	10800c17 	ldw	r2,48(r2)
  803efc:	18bfe51e 	bne	r3,r2,803e94 <__alt_data_end+0xff803e94>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  803f00:	e0bff917 	ldw	r2,-28(fp)
  803f04:	103f9d26 	beq	r2,zero,803d7c <__alt_data_end+0xff803d7c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  803f08:	e0bffa17 	ldw	r2,-24(fp)
  803f0c:	10c00817 	ldw	r3,32(r2)
  803f10:	00bfff44 	movi	r2,-3
  803f14:	1886703a 	and	r3,r3,r2
  803f18:	e0bffa17 	ldw	r2,-24(fp)
  803f1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  803f20:	e0bffa17 	ldw	r2,-24(fp)
  803f24:	10800017 	ldw	r2,0(r2)
  803f28:	10800104 	addi	r2,r2,4
  803f2c:	1007883a 	mov	r3,r2
  803f30:	e0bffa17 	ldw	r2,-24(fp)
  803f34:	10800817 	ldw	r2,32(r2)
  803f38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  803f3c:	e0bffb17 	ldw	r2,-20(fp)
  803f40:	10800104 	addi	r2,r2,4
  803f44:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  803f48:	003f8c06 	br	803d7c <__alt_data_end+0xff803d7c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  803f4c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  803f50:	0001883a 	nop
  803f54:	e037883a 	mov	sp,fp
  803f58:	df000017 	ldw	fp,0(sp)
  803f5c:	dec00104 	addi	sp,sp,4
  803f60:	f800283a 	ret

00803f64 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  803f64:	defff804 	addi	sp,sp,-32
  803f68:	df000715 	stw	fp,28(sp)
  803f6c:	df000704 	addi	fp,sp,28
  803f70:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  803f74:	e0bffb17 	ldw	r2,-20(fp)
  803f78:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  803f7c:	e0bff917 	ldw	r2,-28(fp)
  803f80:	10800017 	ldw	r2,0(r2)
  803f84:	10800104 	addi	r2,r2,4
  803f88:	10800037 	ldwio	r2,0(r2)
  803f8c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  803f90:	e0bffa17 	ldw	r2,-24(fp)
  803f94:	1081000c 	andi	r2,r2,1024
  803f98:	10000b26 	beq	r2,zero,803fc8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  803f9c:	e0bff917 	ldw	r2,-28(fp)
  803fa0:	10800017 	ldw	r2,0(r2)
  803fa4:	10800104 	addi	r2,r2,4
  803fa8:	1007883a 	mov	r3,r2
  803fac:	e0bff917 	ldw	r2,-28(fp)
  803fb0:	10800817 	ldw	r2,32(r2)
  803fb4:	10810014 	ori	r2,r2,1024
  803fb8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  803fbc:	e0bff917 	ldw	r2,-28(fp)
  803fc0:	10000915 	stw	zero,36(r2)
  803fc4:	00000a06 	br	803ff0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  803fc8:	e0bff917 	ldw	r2,-28(fp)
  803fcc:	10c00917 	ldw	r3,36(r2)
  803fd0:	00a00034 	movhi	r2,32768
  803fd4:	10bfff04 	addi	r2,r2,-4
  803fd8:	10c00536 	bltu	r2,r3,803ff0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  803fdc:	e0bff917 	ldw	r2,-28(fp)
  803fe0:	10800917 	ldw	r2,36(r2)
  803fe4:	10c00044 	addi	r3,r2,1
  803fe8:	e0bff917 	ldw	r2,-28(fp)
  803fec:	10c00915 	stw	r3,36(r2)
  803ff0:	d0a74617 	ldw	r2,-25320(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  803ff4:	e037883a 	mov	sp,fp
  803ff8:	df000017 	ldw	fp,0(sp)
  803ffc:	dec00104 	addi	sp,sp,4
  804000:	f800283a 	ret

00804004 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  804004:	defffd04 	addi	sp,sp,-12
  804008:	df000215 	stw	fp,8(sp)
  80400c:	df000204 	addi	fp,sp,8
  804010:	e13ffe15 	stw	r4,-8(fp)
  804014:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804018:	00000506 	br	804030 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80401c:	e0bfff17 	ldw	r2,-4(fp)
  804020:	1090000c 	andi	r2,r2,16384
  804024:	10000226 	beq	r2,zero,804030 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  804028:	00bffd44 	movi	r2,-11
  80402c:	00000b06 	br	80405c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  804030:	e0bffe17 	ldw	r2,-8(fp)
  804034:	10c00d17 	ldw	r3,52(r2)
  804038:	e0bffe17 	ldw	r2,-8(fp)
  80403c:	10800c17 	ldw	r2,48(r2)
  804040:	18800526 	beq	r3,r2,804058 <altera_avalon_jtag_uart_close+0x54>
  804044:	e0bffe17 	ldw	r2,-8(fp)
  804048:	10c00917 	ldw	r3,36(r2)
  80404c:	e0bffe17 	ldw	r2,-8(fp)
  804050:	10800117 	ldw	r2,4(r2)
  804054:	18bff136 	bltu	r3,r2,80401c <__alt_data_end+0xff80401c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  804058:	0005883a 	mov	r2,zero
}
  80405c:	e037883a 	mov	sp,fp
  804060:	df000017 	ldw	fp,0(sp)
  804064:	dec00104 	addi	sp,sp,4
  804068:	f800283a 	ret

0080406c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80406c:	defffa04 	addi	sp,sp,-24
  804070:	df000515 	stw	fp,20(sp)
  804074:	df000504 	addi	fp,sp,20
  804078:	e13ffd15 	stw	r4,-12(fp)
  80407c:	e17ffe15 	stw	r5,-8(fp)
  804080:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  804084:	00bff9c4 	movi	r2,-25
  804088:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80408c:	e0bffe17 	ldw	r2,-8(fp)
  804090:	10da8060 	cmpeqi	r3,r2,27137
  804094:	1800031e 	bne	r3,zero,8040a4 <altera_avalon_jtag_uart_ioctl+0x38>
  804098:	109a80a0 	cmpeqi	r2,r2,27138
  80409c:	1000181e 	bne	r2,zero,804100 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  8040a0:	00002906 	br	804148 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8040a4:	e0bffd17 	ldw	r2,-12(fp)
  8040a8:	10c00117 	ldw	r3,4(r2)
  8040ac:	00a00034 	movhi	r2,32768
  8040b0:	10bfffc4 	addi	r2,r2,-1
  8040b4:	18802126 	beq	r3,r2,80413c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  8040b8:	e0bfff17 	ldw	r2,-4(fp)
  8040bc:	10800017 	ldw	r2,0(r2)
  8040c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8040c4:	e0bffc17 	ldw	r2,-16(fp)
  8040c8:	10800090 	cmplti	r2,r2,2
  8040cc:	1000061e 	bne	r2,zero,8040e8 <altera_avalon_jtag_uart_ioctl+0x7c>
  8040d0:	e0fffc17 	ldw	r3,-16(fp)
  8040d4:	00a00034 	movhi	r2,32768
  8040d8:	10bfffc4 	addi	r2,r2,-1
  8040dc:	18800226 	beq	r3,r2,8040e8 <altera_avalon_jtag_uart_ioctl+0x7c>
  8040e0:	e0bffc17 	ldw	r2,-16(fp)
  8040e4:	00000206 	br	8040f0 <altera_avalon_jtag_uart_ioctl+0x84>
  8040e8:	00a00034 	movhi	r2,32768
  8040ec:	10bfff84 	addi	r2,r2,-2
  8040f0:	e0fffd17 	ldw	r3,-12(fp)
  8040f4:	18800115 	stw	r2,4(r3)
      rc = 0;
  8040f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8040fc:	00000f06 	br	80413c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  804100:	e0bffd17 	ldw	r2,-12(fp)
  804104:	10c00117 	ldw	r3,4(r2)
  804108:	00a00034 	movhi	r2,32768
  80410c:	10bfffc4 	addi	r2,r2,-1
  804110:	18800c26 	beq	r3,r2,804144 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  804114:	e0bffd17 	ldw	r2,-12(fp)
  804118:	10c00917 	ldw	r3,36(r2)
  80411c:	e0bffd17 	ldw	r2,-12(fp)
  804120:	10800117 	ldw	r2,4(r2)
  804124:	1885803a 	cmpltu	r2,r3,r2
  804128:	10c03fcc 	andi	r3,r2,255
  80412c:	e0bfff17 	ldw	r2,-4(fp)
  804130:	10c00015 	stw	r3,0(r2)
      rc = 0;
  804134:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  804138:	00000206 	br	804144 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80413c:	0001883a 	nop
  804140:	00000106 	br	804148 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  804144:	0001883a 	nop

  default:
    break;
  }

  return rc;
  804148:	e0bffb17 	ldw	r2,-20(fp)
}
  80414c:	e037883a 	mov	sp,fp
  804150:	df000017 	ldw	fp,0(sp)
  804154:	dec00104 	addi	sp,sp,4
  804158:	f800283a 	ret

0080415c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80415c:	defff304 	addi	sp,sp,-52
  804160:	dfc00c15 	stw	ra,48(sp)
  804164:	df000b15 	stw	fp,44(sp)
  804168:	df000b04 	addi	fp,sp,44
  80416c:	e13ffc15 	stw	r4,-16(fp)
  804170:	e17ffd15 	stw	r5,-12(fp)
  804174:	e1bffe15 	stw	r6,-8(fp)
  804178:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80417c:	e0bffd17 	ldw	r2,-12(fp)
  804180:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  804184:	00004706 	br	8042a4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  804188:	e0bffc17 	ldw	r2,-16(fp)
  80418c:	10800a17 	ldw	r2,40(r2)
  804190:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  804194:	e0bffc17 	ldw	r2,-16(fp)
  804198:	10800b17 	ldw	r2,44(r2)
  80419c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  8041a0:	e0fff717 	ldw	r3,-36(fp)
  8041a4:	e0bff817 	ldw	r2,-32(fp)
  8041a8:	18800536 	bltu	r3,r2,8041c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8041ac:	e0fff717 	ldw	r3,-36(fp)
  8041b0:	e0bff817 	ldw	r2,-32(fp)
  8041b4:	1885c83a 	sub	r2,r3,r2
  8041b8:	e0bff615 	stw	r2,-40(fp)
  8041bc:	00000406 	br	8041d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8041c0:	00c20004 	movi	r3,2048
  8041c4:	e0bff817 	ldw	r2,-32(fp)
  8041c8:	1885c83a 	sub	r2,r3,r2
  8041cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8041d0:	e0bff617 	ldw	r2,-40(fp)
  8041d4:	10001e26 	beq	r2,zero,804250 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8041d8:	e0fffe17 	ldw	r3,-8(fp)
  8041dc:	e0bff617 	ldw	r2,-40(fp)
  8041e0:	1880022e 	bgeu	r3,r2,8041ec <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8041e4:	e0bffe17 	ldw	r2,-8(fp)
  8041e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8041ec:	e0bffc17 	ldw	r2,-16(fp)
  8041f0:	10c00e04 	addi	r3,r2,56
  8041f4:	e0bff817 	ldw	r2,-32(fp)
  8041f8:	1885883a 	add	r2,r3,r2
  8041fc:	e1bff617 	ldw	r6,-40(fp)
  804200:	100b883a 	mov	r5,r2
  804204:	e13ff517 	ldw	r4,-44(fp)
  804208:	08017500 	call	801750 <memcpy>
      ptr   += n;
  80420c:	e0fff517 	ldw	r3,-44(fp)
  804210:	e0bff617 	ldw	r2,-40(fp)
  804214:	1885883a 	add	r2,r3,r2
  804218:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80421c:	e0fffe17 	ldw	r3,-8(fp)
  804220:	e0bff617 	ldw	r2,-40(fp)
  804224:	1885c83a 	sub	r2,r3,r2
  804228:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80422c:	e0fff817 	ldw	r3,-32(fp)
  804230:	e0bff617 	ldw	r2,-40(fp)
  804234:	1885883a 	add	r2,r3,r2
  804238:	10c1ffcc 	andi	r3,r2,2047
  80423c:	e0bffc17 	ldw	r2,-16(fp)
  804240:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  804244:	e0bffe17 	ldw	r2,-8(fp)
  804248:	00bfcf16 	blt	zero,r2,804188 <__alt_data_end+0xff804188>
  80424c:	00000106 	br	804254 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  804250:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  804254:	e0fff517 	ldw	r3,-44(fp)
  804258:	e0bffd17 	ldw	r2,-12(fp)
  80425c:	1880141e 	bne	r3,r2,8042b0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  804260:	e0bfff17 	ldw	r2,-4(fp)
  804264:	1090000c 	andi	r2,r2,16384
  804268:	1000131e 	bne	r2,zero,8042b8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80426c:	0001883a 	nop
  804270:	e0bffc17 	ldw	r2,-16(fp)
  804274:	10c00a17 	ldw	r3,40(r2)
  804278:	e0bff717 	ldw	r2,-36(fp)
  80427c:	1880051e 	bne	r3,r2,804294 <altera_avalon_jtag_uart_read+0x138>
  804280:	e0bffc17 	ldw	r2,-16(fp)
  804284:	10c00917 	ldw	r3,36(r2)
  804288:	e0bffc17 	ldw	r2,-16(fp)
  80428c:	10800117 	ldw	r2,4(r2)
  804290:	18bff736 	bltu	r3,r2,804270 <__alt_data_end+0xff804270>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  804294:	e0bffc17 	ldw	r2,-16(fp)
  804298:	10c00a17 	ldw	r3,40(r2)
  80429c:	e0bff717 	ldw	r2,-36(fp)
  8042a0:	18800726 	beq	r3,r2,8042c0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8042a4:	e0bffe17 	ldw	r2,-8(fp)
  8042a8:	00bfb716 	blt	zero,r2,804188 <__alt_data_end+0xff804188>
  8042ac:	00000506 	br	8042c4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8042b0:	0001883a 	nop
  8042b4:	00000306 	br	8042c4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8042b8:	0001883a 	nop
  8042bc:	00000106 	br	8042c4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8042c0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8042c4:	e0fff517 	ldw	r3,-44(fp)
  8042c8:	e0bffd17 	ldw	r2,-12(fp)
  8042cc:	18801826 	beq	r3,r2,804330 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8042d0:	0005303a 	rdctl	r2,status
  8042d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8042d8:	e0fffb17 	ldw	r3,-20(fp)
  8042dc:	00bfff84 	movi	r2,-2
  8042e0:	1884703a 	and	r2,r3,r2
  8042e4:	1001703a 	wrctl	status,r2
  
  return context;
  8042e8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8042ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8042f0:	e0bffc17 	ldw	r2,-16(fp)
  8042f4:	10800817 	ldw	r2,32(r2)
  8042f8:	10c00054 	ori	r3,r2,1
  8042fc:	e0bffc17 	ldw	r2,-16(fp)
  804300:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  804304:	e0bffc17 	ldw	r2,-16(fp)
  804308:	10800017 	ldw	r2,0(r2)
  80430c:	10800104 	addi	r2,r2,4
  804310:	1007883a 	mov	r3,r2
  804314:	e0bffc17 	ldw	r2,-16(fp)
  804318:	10800817 	ldw	r2,32(r2)
  80431c:	18800035 	stwio	r2,0(r3)
  804320:	e0bffa17 	ldw	r2,-24(fp)
  804324:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804328:	e0bff917 	ldw	r2,-28(fp)
  80432c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  804330:	e0fff517 	ldw	r3,-44(fp)
  804334:	e0bffd17 	ldw	r2,-12(fp)
  804338:	18800426 	beq	r3,r2,80434c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80433c:	e0fff517 	ldw	r3,-44(fp)
  804340:	e0bffd17 	ldw	r2,-12(fp)
  804344:	1885c83a 	sub	r2,r3,r2
  804348:	00000606 	br	804364 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80434c:	e0bfff17 	ldw	r2,-4(fp)
  804350:	1090000c 	andi	r2,r2,16384
  804354:	10000226 	beq	r2,zero,804360 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  804358:	00bffd44 	movi	r2,-11
  80435c:	00000106 	br	804364 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  804360:	00bffec4 	movi	r2,-5
}
  804364:	e037883a 	mov	sp,fp
  804368:	dfc00117 	ldw	ra,4(sp)
  80436c:	df000017 	ldw	fp,0(sp)
  804370:	dec00204 	addi	sp,sp,8
  804374:	f800283a 	ret

00804378 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  804378:	defff304 	addi	sp,sp,-52
  80437c:	dfc00c15 	stw	ra,48(sp)
  804380:	df000b15 	stw	fp,44(sp)
  804384:	df000b04 	addi	fp,sp,44
  804388:	e13ffc15 	stw	r4,-16(fp)
  80438c:	e17ffd15 	stw	r5,-12(fp)
  804390:	e1bffe15 	stw	r6,-8(fp)
  804394:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  804398:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80439c:	e0bffd17 	ldw	r2,-12(fp)
  8043a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8043a4:	00003706 	br	804484 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8043a8:	e0bffc17 	ldw	r2,-16(fp)
  8043ac:	10800c17 	ldw	r2,48(r2)
  8043b0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8043b4:	e0bffc17 	ldw	r2,-16(fp)
  8043b8:	10800d17 	ldw	r2,52(r2)
  8043bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8043c0:	e0fff917 	ldw	r3,-28(fp)
  8043c4:	e0bff517 	ldw	r2,-44(fp)
  8043c8:	1880062e 	bgeu	r3,r2,8043e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8043cc:	e0fff517 	ldw	r3,-44(fp)
  8043d0:	e0bff917 	ldw	r2,-28(fp)
  8043d4:	1885c83a 	sub	r2,r3,r2
  8043d8:	10bfffc4 	addi	r2,r2,-1
  8043dc:	e0bff615 	stw	r2,-40(fp)
  8043e0:	00000b06 	br	804410 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8043e4:	e0bff517 	ldw	r2,-44(fp)
  8043e8:	10000526 	beq	r2,zero,804400 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8043ec:	00c20004 	movi	r3,2048
  8043f0:	e0bff917 	ldw	r2,-28(fp)
  8043f4:	1885c83a 	sub	r2,r3,r2
  8043f8:	e0bff615 	stw	r2,-40(fp)
  8043fc:	00000406 	br	804410 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  804400:	00c1ffc4 	movi	r3,2047
  804404:	e0bff917 	ldw	r2,-28(fp)
  804408:	1885c83a 	sub	r2,r3,r2
  80440c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  804410:	e0bff617 	ldw	r2,-40(fp)
  804414:	10001e26 	beq	r2,zero,804490 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  804418:	e0fffe17 	ldw	r3,-8(fp)
  80441c:	e0bff617 	ldw	r2,-40(fp)
  804420:	1880022e 	bgeu	r3,r2,80442c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  804424:	e0bffe17 	ldw	r2,-8(fp)
  804428:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80442c:	e0bffc17 	ldw	r2,-16(fp)
  804430:	10c20e04 	addi	r3,r2,2104
  804434:	e0bff917 	ldw	r2,-28(fp)
  804438:	1885883a 	add	r2,r3,r2
  80443c:	e1bff617 	ldw	r6,-40(fp)
  804440:	e17ffd17 	ldw	r5,-12(fp)
  804444:	1009883a 	mov	r4,r2
  804448:	08017500 	call	801750 <memcpy>
      ptr   += n;
  80444c:	e0fffd17 	ldw	r3,-12(fp)
  804450:	e0bff617 	ldw	r2,-40(fp)
  804454:	1885883a 	add	r2,r3,r2
  804458:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80445c:	e0fffe17 	ldw	r3,-8(fp)
  804460:	e0bff617 	ldw	r2,-40(fp)
  804464:	1885c83a 	sub	r2,r3,r2
  804468:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80446c:	e0fff917 	ldw	r3,-28(fp)
  804470:	e0bff617 	ldw	r2,-40(fp)
  804474:	1885883a 	add	r2,r3,r2
  804478:	10c1ffcc 	andi	r3,r2,2047
  80447c:	e0bffc17 	ldw	r2,-16(fp)
  804480:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  804484:	e0bffe17 	ldw	r2,-8(fp)
  804488:	00bfc716 	blt	zero,r2,8043a8 <__alt_data_end+0xff8043a8>
  80448c:	00000106 	br	804494 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  804490:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804494:	0005303a 	rdctl	r2,status
  804498:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80449c:	e0fffb17 	ldw	r3,-20(fp)
  8044a0:	00bfff84 	movi	r2,-2
  8044a4:	1884703a 	and	r2,r3,r2
  8044a8:	1001703a 	wrctl	status,r2
  
  return context;
  8044ac:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8044b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8044b4:	e0bffc17 	ldw	r2,-16(fp)
  8044b8:	10800817 	ldw	r2,32(r2)
  8044bc:	10c00094 	ori	r3,r2,2
  8044c0:	e0bffc17 	ldw	r2,-16(fp)
  8044c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8044c8:	e0bffc17 	ldw	r2,-16(fp)
  8044cc:	10800017 	ldw	r2,0(r2)
  8044d0:	10800104 	addi	r2,r2,4
  8044d4:	1007883a 	mov	r3,r2
  8044d8:	e0bffc17 	ldw	r2,-16(fp)
  8044dc:	10800817 	ldw	r2,32(r2)
  8044e0:	18800035 	stwio	r2,0(r3)
  8044e4:	e0bffa17 	ldw	r2,-24(fp)
  8044e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8044ec:	e0bff817 	ldw	r2,-32(fp)
  8044f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8044f4:	e0bffe17 	ldw	r2,-8(fp)
  8044f8:	0080100e 	bge	zero,r2,80453c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8044fc:	e0bfff17 	ldw	r2,-4(fp)
  804500:	1090000c 	andi	r2,r2,16384
  804504:	1000101e 	bne	r2,zero,804548 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  804508:	0001883a 	nop
  80450c:	e0bffc17 	ldw	r2,-16(fp)
  804510:	10c00d17 	ldw	r3,52(r2)
  804514:	e0bff517 	ldw	r2,-44(fp)
  804518:	1880051e 	bne	r3,r2,804530 <altera_avalon_jtag_uart_write+0x1b8>
  80451c:	e0bffc17 	ldw	r2,-16(fp)
  804520:	10c00917 	ldw	r3,36(r2)
  804524:	e0bffc17 	ldw	r2,-16(fp)
  804528:	10800117 	ldw	r2,4(r2)
  80452c:	18bff736 	bltu	r3,r2,80450c <__alt_data_end+0xff80450c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  804530:	e0bffc17 	ldw	r2,-16(fp)
  804534:	10800917 	ldw	r2,36(r2)
  804538:	1000051e 	bne	r2,zero,804550 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80453c:	e0bffe17 	ldw	r2,-8(fp)
  804540:	00bfd016 	blt	zero,r2,804484 <__alt_data_end+0xff804484>
  804544:	00000306 	br	804554 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  804548:	0001883a 	nop
  80454c:	00000106 	br	804554 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  804550:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  804554:	e0fffd17 	ldw	r3,-12(fp)
  804558:	e0bff717 	ldw	r2,-36(fp)
  80455c:	18800426 	beq	r3,r2,804570 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  804560:	e0fffd17 	ldw	r3,-12(fp)
  804564:	e0bff717 	ldw	r2,-36(fp)
  804568:	1885c83a 	sub	r2,r3,r2
  80456c:	00000606 	br	804588 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  804570:	e0bfff17 	ldw	r2,-4(fp)
  804574:	1090000c 	andi	r2,r2,16384
  804578:	10000226 	beq	r2,zero,804584 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80457c:	00bffd44 	movi	r2,-11
  804580:	00000106 	br	804588 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  804584:	00bffec4 	movi	r2,-5
}
  804588:	e037883a 	mov	sp,fp
  80458c:	dfc00117 	ldw	ra,4(sp)
  804590:	df000017 	ldw	fp,0(sp)
  804594:	dec00204 	addi	sp,sp,8
  804598:	f800283a 	ret

0080459c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80459c:	defffa04 	addi	sp,sp,-24
  8045a0:	dfc00515 	stw	ra,20(sp)
  8045a4:	df000415 	stw	fp,16(sp)
  8045a8:	df000404 	addi	fp,sp,16
  8045ac:	e13ffe15 	stw	r4,-8(fp)
  8045b0:	2805883a 	mov	r2,r5
  8045b4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8045b8:	e0bffe17 	ldw	r2,-8(fp)
  8045bc:	10800017 	ldw	r2,0(r2)
  8045c0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8045c4:	008003f4 	movhi	r2,15
  8045c8:	10909004 	addi	r2,r2,16960
  8045cc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8045d0:	e0bffe17 	ldw	r2,-8(fp)
  8045d4:	10800803 	ldbu	r2,32(r2)
  8045d8:	10803fcc 	andi	r2,r2,255
  8045dc:	1080201c 	xori	r2,r2,128
  8045e0:	10bfe004 	addi	r2,r2,-128
  8045e4:	1000151e 	bne	r2,zero,80463c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8045e8:	00000906 	br	804610 <lcd_write_command+0x74>
    if (--i == 0)
  8045ec:	e0bffc17 	ldw	r2,-16(fp)
  8045f0:	10bfffc4 	addi	r2,r2,-1
  8045f4:	e0bffc15 	stw	r2,-16(fp)
  8045f8:	e0bffc17 	ldw	r2,-16(fp)
  8045fc:	1000041e 	bne	r2,zero,804610 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  804600:	e0bffe17 	ldw	r2,-8(fp)
  804604:	00c00044 	movi	r3,1
  804608:	10c00805 	stb	r3,32(r2)
      return;
  80460c:	00000c06 	br	804640 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  804610:	e0bffd17 	ldw	r2,-12(fp)
  804614:	10800104 	addi	r2,r2,4
  804618:	10800037 	ldwio	r2,0(r2)
  80461c:	1080200c 	andi	r2,r2,128
  804620:	103ff21e 	bne	r2,zero,8045ec <__alt_data_end+0xff8045ec>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  804624:	01001904 	movi	r4,100
  804628:	080683c0 	call	80683c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80462c:	e0bffd17 	ldw	r2,-12(fp)
  804630:	e0ffff03 	ldbu	r3,-4(fp)
  804634:	10c00035 	stwio	r3,0(r2)
  804638:	00000106 	br	804640 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80463c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  804640:	e037883a 	mov	sp,fp
  804644:	dfc00117 	ldw	ra,4(sp)
  804648:	df000017 	ldw	fp,0(sp)
  80464c:	dec00204 	addi	sp,sp,8
  804650:	f800283a 	ret

00804654 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  804654:	defffa04 	addi	sp,sp,-24
  804658:	dfc00515 	stw	ra,20(sp)
  80465c:	df000415 	stw	fp,16(sp)
  804660:	df000404 	addi	fp,sp,16
  804664:	e13ffe15 	stw	r4,-8(fp)
  804668:	2805883a 	mov	r2,r5
  80466c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  804670:	e0bffe17 	ldw	r2,-8(fp)
  804674:	10800017 	ldw	r2,0(r2)
  804678:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80467c:	008003f4 	movhi	r2,15
  804680:	10909004 	addi	r2,r2,16960
  804684:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  804688:	e0bffe17 	ldw	r2,-8(fp)
  80468c:	10800803 	ldbu	r2,32(r2)
  804690:	10803fcc 	andi	r2,r2,255
  804694:	1080201c 	xori	r2,r2,128
  804698:	10bfe004 	addi	r2,r2,-128
  80469c:	10001d1e 	bne	r2,zero,804714 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8046a0:	00000906 	br	8046c8 <lcd_write_data+0x74>
    if (--i == 0)
  8046a4:	e0bffc17 	ldw	r2,-16(fp)
  8046a8:	10bfffc4 	addi	r2,r2,-1
  8046ac:	e0bffc15 	stw	r2,-16(fp)
  8046b0:	e0bffc17 	ldw	r2,-16(fp)
  8046b4:	1000041e 	bne	r2,zero,8046c8 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8046b8:	e0bffe17 	ldw	r2,-8(fp)
  8046bc:	00c00044 	movi	r3,1
  8046c0:	10c00805 	stb	r3,32(r2)
      return;
  8046c4:	00001406 	br	804718 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8046c8:	e0bffd17 	ldw	r2,-12(fp)
  8046cc:	10800104 	addi	r2,r2,4
  8046d0:	10800037 	ldwio	r2,0(r2)
  8046d4:	1080200c 	andi	r2,r2,128
  8046d8:	103ff21e 	bne	r2,zero,8046a4 <__alt_data_end+0xff8046a4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8046dc:	01001904 	movi	r4,100
  8046e0:	080683c0 	call	80683c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8046e4:	e0bffd17 	ldw	r2,-12(fp)
  8046e8:	10800204 	addi	r2,r2,8
  8046ec:	1007883a 	mov	r3,r2
  8046f0:	e0bfff03 	ldbu	r2,-4(fp)
  8046f4:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8046f8:	e0bffe17 	ldw	r2,-8(fp)
  8046fc:	108008c3 	ldbu	r2,35(r2)
  804700:	10800044 	addi	r2,r2,1
  804704:	1007883a 	mov	r3,r2
  804708:	e0bffe17 	ldw	r2,-8(fp)
  80470c:	10c008c5 	stb	r3,35(r2)
  804710:	00000106 	br	804718 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  804714:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  804718:	e037883a 	mov	sp,fp
  80471c:	dfc00117 	ldw	ra,4(sp)
  804720:	df000017 	ldw	fp,0(sp)
  804724:	dec00204 	addi	sp,sp,8
  804728:	f800283a 	ret

0080472c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80472c:	defffc04 	addi	sp,sp,-16
  804730:	dfc00315 	stw	ra,12(sp)
  804734:	df000215 	stw	fp,8(sp)
  804738:	df000204 	addi	fp,sp,8
  80473c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  804740:	01400044 	movi	r5,1
  804744:	e13fff17 	ldw	r4,-4(fp)
  804748:	080459c0 	call	80459c <lcd_write_command>

  sp->x = 0;
  80474c:	e0bfff17 	ldw	r2,-4(fp)
  804750:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  804754:	e0bfff17 	ldw	r2,-4(fp)
  804758:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80475c:	e0bfff17 	ldw	r2,-4(fp)
  804760:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804764:	e03ffe15 	stw	zero,-8(fp)
  804768:	00001b06 	br	8047d8 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80476c:	e0bffe17 	ldw	r2,-8(fp)
  804770:	108018e4 	muli	r2,r2,99
  804774:	10801004 	addi	r2,r2,64
  804778:	e0ffff17 	ldw	r3,-4(fp)
  80477c:	1885883a 	add	r2,r3,r2
  804780:	01801444 	movi	r6,81
  804784:	01400804 	movi	r5,32
  804788:	1009883a 	mov	r4,r2
  80478c:	08019f40 	call	8019f4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  804790:	e0bffe17 	ldw	r2,-8(fp)
  804794:	108018e4 	muli	r2,r2,99
  804798:	10800c04 	addi	r2,r2,48
  80479c:	e0ffff17 	ldw	r3,-4(fp)
  8047a0:	1885883a 	add	r2,r3,r2
  8047a4:	01800404 	movi	r6,16
  8047a8:	01400804 	movi	r5,32
  8047ac:	1009883a 	mov	r4,r2
  8047b0:	08019f40 	call	8019f4 <memset>
    sp->line[y].width = 0;
  8047b4:	e0ffff17 	ldw	r3,-4(fp)
  8047b8:	e0bffe17 	ldw	r2,-8(fp)
  8047bc:	108018e4 	muli	r2,r2,99
  8047c0:	1885883a 	add	r2,r3,r2
  8047c4:	10802444 	addi	r2,r2,145
  8047c8:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8047cc:	e0bffe17 	ldw	r2,-8(fp)
  8047d0:	10800044 	addi	r2,r2,1
  8047d4:	e0bffe15 	stw	r2,-8(fp)
  8047d8:	e0bffe17 	ldw	r2,-8(fp)
  8047dc:	10800090 	cmplti	r2,r2,2
  8047e0:	103fe21e 	bne	r2,zero,80476c <__alt_data_end+0xff80476c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8047e4:	0001883a 	nop
  8047e8:	e037883a 	mov	sp,fp
  8047ec:	dfc00117 	ldw	ra,4(sp)
  8047f0:	df000017 	ldw	fp,0(sp)
  8047f4:	dec00204 	addi	sp,sp,8
  8047f8:	f800283a 	ret

008047fc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8047fc:	defff704 	addi	sp,sp,-36
  804800:	dfc00815 	stw	ra,32(sp)
  804804:	df000715 	stw	fp,28(sp)
  804808:	df000704 	addi	fp,sp,28
  80480c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  804810:	e0bfff17 	ldw	r2,-4(fp)
  804814:	10800943 	ldbu	r2,37(r2)
  804818:	10803fcc 	andi	r2,r2,255
  80481c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804820:	e03ff915 	stw	zero,-28(fp)
  804824:	00006706 	br	8049c4 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  804828:	e0ffff17 	ldw	r3,-4(fp)
  80482c:	e0bff917 	ldw	r2,-28(fp)
  804830:	108018e4 	muli	r2,r2,99
  804834:	1885883a 	add	r2,r3,r2
  804838:	10802444 	addi	r2,r2,145
  80483c:	10800003 	ldbu	r2,0(r2)
  804840:	10803fcc 	andi	r2,r2,255
  804844:	1080201c 	xori	r2,r2,128
  804848:	10bfe004 	addi	r2,r2,-128
  80484c:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  804850:	e0ffff17 	ldw	r3,-4(fp)
  804854:	e0bff917 	ldw	r2,-28(fp)
  804858:	108018e4 	muli	r2,r2,99
  80485c:	1885883a 	add	r2,r3,r2
  804860:	10802484 	addi	r2,r2,146
  804864:	10800003 	ldbu	r2,0(r2)
  804868:	10c03fcc 	andi	r3,r2,255
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	1885383a 	mul	r2,r3,r2
  804874:	1005d23a 	srai	r2,r2,8
  804878:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80487c:	e0fffb17 	ldw	r3,-20(fp)
  804880:	e0bffd17 	ldw	r2,-12(fp)
  804884:	18800116 	blt	r3,r2,80488c <lcd_repaint_screen+0x90>
      offset = 0;
  804888:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80488c:	e03ffa15 	stw	zero,-24(fp)
  804890:	00004606 	br	8049ac <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  804894:	e0fffa17 	ldw	r3,-24(fp)
  804898:	e0bffb17 	ldw	r2,-20(fp)
  80489c:	1885883a 	add	r2,r3,r2
  8048a0:	e17ffd17 	ldw	r5,-12(fp)
  8048a4:	1009883a 	mov	r4,r2
  8048a8:	0802fa80 	call	802fa8 <__modsi3>
  8048ac:	1009883a 	mov	r4,r2
  8048b0:	e0ffff17 	ldw	r3,-4(fp)
  8048b4:	e0bff917 	ldw	r2,-28(fp)
  8048b8:	108018e4 	muli	r2,r2,99
  8048bc:	1885883a 	add	r2,r3,r2
  8048c0:	1105883a 	add	r2,r2,r4
  8048c4:	10801004 	addi	r2,r2,64
  8048c8:	10800003 	ldbu	r2,0(r2)
  8048cc:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8048d0:	e0ffff17 	ldw	r3,-4(fp)
  8048d4:	e0bff917 	ldw	r2,-28(fp)
  8048d8:	108018e4 	muli	r2,r2,99
  8048dc:	1887883a 	add	r3,r3,r2
  8048e0:	e0bffa17 	ldw	r2,-24(fp)
  8048e4:	1885883a 	add	r2,r3,r2
  8048e8:	10800c04 	addi	r2,r2,48
  8048ec:	10800003 	ldbu	r2,0(r2)
  8048f0:	10c03fcc 	andi	r3,r2,255
  8048f4:	18c0201c 	xori	r3,r3,128
  8048f8:	18ffe004 	addi	r3,r3,-128
  8048fc:	e0bffe07 	ldb	r2,-8(fp)
  804900:	18802726 	beq	r3,r2,8049a0 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  804904:	e0fff917 	ldw	r3,-28(fp)
  804908:	d0a00b04 	addi	r2,gp,-32724
  80490c:	1885883a 	add	r2,r3,r2
  804910:	10800003 	ldbu	r2,0(r2)
  804914:	1007883a 	mov	r3,r2
  804918:	e0bffa17 	ldw	r2,-24(fp)
  80491c:	1885883a 	add	r2,r3,r2
  804920:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  804924:	e0fffe43 	ldbu	r3,-7(fp)
  804928:	e0bfff17 	ldw	r2,-4(fp)
  80492c:	108008c3 	ldbu	r2,35(r2)
  804930:	10803fcc 	andi	r2,r2,255
  804934:	1080201c 	xori	r2,r2,128
  804938:	10bfe004 	addi	r2,r2,-128
  80493c:	18800a26 	beq	r3,r2,804968 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  804940:	e0fffe43 	ldbu	r3,-7(fp)
  804944:	00bfe004 	movi	r2,-128
  804948:	1884b03a 	or	r2,r3,r2
  80494c:	10803fcc 	andi	r2,r2,255
  804950:	100b883a 	mov	r5,r2
  804954:	e13fff17 	ldw	r4,-4(fp)
  804958:	080459c0 	call	80459c <lcd_write_command>
          sp->address = address;
  80495c:	e0fffe43 	ldbu	r3,-7(fp)
  804960:	e0bfff17 	ldw	r2,-4(fp)
  804964:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  804968:	e0bffe03 	ldbu	r2,-8(fp)
  80496c:	10803fcc 	andi	r2,r2,255
  804970:	100b883a 	mov	r5,r2
  804974:	e13fff17 	ldw	r4,-4(fp)
  804978:	08046540 	call	804654 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80497c:	e0ffff17 	ldw	r3,-4(fp)
  804980:	e0bff917 	ldw	r2,-28(fp)
  804984:	108018e4 	muli	r2,r2,99
  804988:	1887883a 	add	r3,r3,r2
  80498c:	e0bffa17 	ldw	r2,-24(fp)
  804990:	1885883a 	add	r2,r3,r2
  804994:	10800c04 	addi	r2,r2,48
  804998:	e0fffe03 	ldbu	r3,-8(fp)
  80499c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8049a0:	e0bffa17 	ldw	r2,-24(fp)
  8049a4:	10800044 	addi	r2,r2,1
  8049a8:	e0bffa15 	stw	r2,-24(fp)
  8049ac:	e0bffa17 	ldw	r2,-24(fp)
  8049b0:	10800410 	cmplti	r2,r2,16
  8049b4:	103fb71e 	bne	r2,zero,804894 <__alt_data_end+0xff804894>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8049b8:	e0bff917 	ldw	r2,-28(fp)
  8049bc:	10800044 	addi	r2,r2,1
  8049c0:	e0bff915 	stw	r2,-28(fp)
  8049c4:	e0bff917 	ldw	r2,-28(fp)
  8049c8:	10800090 	cmplti	r2,r2,2
  8049cc:	103f961e 	bne	r2,zero,804828 <__alt_data_end+0xff804828>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8049d0:	0001883a 	nop
  8049d4:	e037883a 	mov	sp,fp
  8049d8:	dfc00117 	ldw	ra,4(sp)
  8049dc:	df000017 	ldw	fp,0(sp)
  8049e0:	dec00204 	addi	sp,sp,8
  8049e4:	f800283a 	ret

008049e8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8049e8:	defffc04 	addi	sp,sp,-16
  8049ec:	dfc00315 	stw	ra,12(sp)
  8049f0:	df000215 	stw	fp,8(sp)
  8049f4:	df000204 	addi	fp,sp,8
  8049f8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8049fc:	e03ffe15 	stw	zero,-8(fp)
  804a00:	00001d06 	br	804a78 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  804a04:	e0bffe17 	ldw	r2,-8(fp)
  804a08:	00800f16 	blt	zero,r2,804a48 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  804a0c:	e0bffe17 	ldw	r2,-8(fp)
  804a10:	108018e4 	muli	r2,r2,99
  804a14:	10801004 	addi	r2,r2,64
  804a18:	e0ffff17 	ldw	r3,-4(fp)
  804a1c:	1889883a 	add	r4,r3,r2
  804a20:	e0bffe17 	ldw	r2,-8(fp)
  804a24:	10800044 	addi	r2,r2,1
  804a28:	108018e4 	muli	r2,r2,99
  804a2c:	10801004 	addi	r2,r2,64
  804a30:	e0ffff17 	ldw	r3,-4(fp)
  804a34:	1885883a 	add	r2,r3,r2
  804a38:	01801404 	movi	r6,80
  804a3c:	100b883a 	mov	r5,r2
  804a40:	08017500 	call	801750 <memcpy>
  804a44:	00000906 	br	804a6c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  804a48:	e0bffe17 	ldw	r2,-8(fp)
  804a4c:	108018e4 	muli	r2,r2,99
  804a50:	10801004 	addi	r2,r2,64
  804a54:	e0ffff17 	ldw	r3,-4(fp)
  804a58:	1885883a 	add	r2,r3,r2
  804a5c:	01801404 	movi	r6,80
  804a60:	01400804 	movi	r5,32
  804a64:	1009883a 	mov	r4,r2
  804a68:	08019f40 	call	8019f4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  804a6c:	e0bffe17 	ldw	r2,-8(fp)
  804a70:	10800044 	addi	r2,r2,1
  804a74:	e0bffe15 	stw	r2,-8(fp)
  804a78:	e0bffe17 	ldw	r2,-8(fp)
  804a7c:	10800090 	cmplti	r2,r2,2
  804a80:	103fe01e 	bne	r2,zero,804a04 <__alt_data_end+0xff804a04>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  804a84:	e0bfff17 	ldw	r2,-4(fp)
  804a88:	10800883 	ldbu	r2,34(r2)
  804a8c:	10bfffc4 	addi	r2,r2,-1
  804a90:	1007883a 	mov	r3,r2
  804a94:	e0bfff17 	ldw	r2,-4(fp)
  804a98:	10c00885 	stb	r3,34(r2)
}
  804a9c:	0001883a 	nop
  804aa0:	e037883a 	mov	sp,fp
  804aa4:	dfc00117 	ldw	ra,4(sp)
  804aa8:	df000017 	ldw	fp,0(sp)
  804aac:	dec00204 	addi	sp,sp,8
  804ab0:	f800283a 	ret

00804ab4 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  804ab4:	defff904 	addi	sp,sp,-28
  804ab8:	dfc00615 	stw	ra,24(sp)
  804abc:	df000515 	stw	fp,20(sp)
  804ac0:	df000504 	addi	fp,sp,20
  804ac4:	e13ffe15 	stw	r4,-8(fp)
  804ac8:	2805883a 	mov	r2,r5
  804acc:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  804ad0:	e03ffb15 	stw	zero,-20(fp)
  804ad4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  804ad8:	e0bffe17 	ldw	r2,-8(fp)
  804adc:	10800a03 	ldbu	r2,40(r2)
  804ae0:	10803fcc 	andi	r2,r2,255
  804ae4:	1080201c 	xori	r2,r2,128
  804ae8:	10bfe004 	addi	r2,r2,-128
  804aec:	108016d8 	cmpnei	r2,r2,91
  804af0:	1000411e 	bne	r2,zero,804bf8 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  804af4:	e0bffe17 	ldw	r2,-8(fp)
  804af8:	10800a04 	addi	r2,r2,40
  804afc:	10800044 	addi	r2,r2,1
  804b00:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  804b04:	00000c06 	br	804b38 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  804b08:	e0bffb17 	ldw	r2,-20(fp)
  804b0c:	10c002a4 	muli	r3,r2,10
  804b10:	e0bffd17 	ldw	r2,-12(fp)
  804b14:	11000044 	addi	r4,r2,1
  804b18:	e13ffd15 	stw	r4,-12(fp)
  804b1c:	10800003 	ldbu	r2,0(r2)
  804b20:	10803fcc 	andi	r2,r2,255
  804b24:	1080201c 	xori	r2,r2,128
  804b28:	10bfe004 	addi	r2,r2,-128
  804b2c:	10bff404 	addi	r2,r2,-48
  804b30:	1885883a 	add	r2,r3,r2
  804b34:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  804b38:	d0e00f17 	ldw	r3,-32708(gp)
  804b3c:	e0bffd17 	ldw	r2,-12(fp)
  804b40:	10800003 	ldbu	r2,0(r2)
  804b44:	10803fcc 	andi	r2,r2,255
  804b48:	1080201c 	xori	r2,r2,128
  804b4c:	10bfe004 	addi	r2,r2,-128
  804b50:	10800044 	addi	r2,r2,1
  804b54:	1885883a 	add	r2,r3,r2
  804b58:	10800003 	ldbu	r2,0(r2)
  804b5c:	10803fcc 	andi	r2,r2,255
  804b60:	1080010c 	andi	r2,r2,4
  804b64:	103fe81e 	bne	r2,zero,804b08 <__alt_data_end+0xff804b08>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  804b68:	e0bffd17 	ldw	r2,-12(fp)
  804b6c:	10800003 	ldbu	r2,0(r2)
  804b70:	10803fcc 	andi	r2,r2,255
  804b74:	1080201c 	xori	r2,r2,128
  804b78:	10bfe004 	addi	r2,r2,-128
  804b7c:	10800ed8 	cmpnei	r2,r2,59
  804b80:	10001f1e 	bne	r2,zero,804c00 <lcd_handle_escape+0x14c>
    {
      ptr++;
  804b84:	e0bffd17 	ldw	r2,-12(fp)
  804b88:	10800044 	addi	r2,r2,1
  804b8c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  804b90:	00000c06 	br	804bc4 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  804b94:	e0bffc17 	ldw	r2,-16(fp)
  804b98:	10c002a4 	muli	r3,r2,10
  804b9c:	e0bffd17 	ldw	r2,-12(fp)
  804ba0:	11000044 	addi	r4,r2,1
  804ba4:	e13ffd15 	stw	r4,-12(fp)
  804ba8:	10800003 	ldbu	r2,0(r2)
  804bac:	10803fcc 	andi	r2,r2,255
  804bb0:	1080201c 	xori	r2,r2,128
  804bb4:	10bfe004 	addi	r2,r2,-128
  804bb8:	10bff404 	addi	r2,r2,-48
  804bbc:	1885883a 	add	r2,r3,r2
  804bc0:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  804bc4:	d0e00f17 	ldw	r3,-32708(gp)
  804bc8:	e0bffd17 	ldw	r2,-12(fp)
  804bcc:	10800003 	ldbu	r2,0(r2)
  804bd0:	10803fcc 	andi	r2,r2,255
  804bd4:	1080201c 	xori	r2,r2,128
  804bd8:	10bfe004 	addi	r2,r2,-128
  804bdc:	10800044 	addi	r2,r2,1
  804be0:	1885883a 	add	r2,r3,r2
  804be4:	10800003 	ldbu	r2,0(r2)
  804be8:	10803fcc 	andi	r2,r2,255
  804bec:	1080010c 	andi	r2,r2,4
  804bf0:	103fe81e 	bne	r2,zero,804b94 <__alt_data_end+0xff804b94>
  804bf4:	00000206 	br	804c00 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  804bf8:	00bfffc4 	movi	r2,-1
  804bfc:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  804c00:	e0bfff07 	ldb	r2,-4(fp)
  804c04:	10c012a0 	cmpeqi	r3,r2,74
  804c08:	1800291e 	bne	r3,zero,804cb0 <lcd_handle_escape+0x1fc>
  804c0c:	10c012c8 	cmpgei	r3,r2,75
  804c10:	1800031e 	bne	r3,zero,804c20 <lcd_handle_escape+0x16c>
  804c14:	10801220 	cmpeqi	r2,r2,72
  804c18:	1000061e 	bne	r2,zero,804c34 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  804c1c:	00004a06 	br	804d48 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  804c20:	10c012e0 	cmpeqi	r3,r2,75
  804c24:	1800281e 	bne	r3,zero,804cc8 <lcd_handle_escape+0x214>
  804c28:	108019a0 	cmpeqi	r2,r2,102
  804c2c:	1000011e 	bne	r2,zero,804c34 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  804c30:	00004506 	br	804d48 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	0080050e 	bge	zero,r2,804c50 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  804c3c:	e0bffc17 	ldw	r2,-16(fp)
  804c40:	10bfffc4 	addi	r2,r2,-1
  804c44:	1007883a 	mov	r3,r2
  804c48:	e0bffe17 	ldw	r2,-8(fp)
  804c4c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  804c50:	e0bffb17 	ldw	r2,-20(fp)
  804c54:	0080370e 	bge	zero,r2,804d34 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  804c58:	e0bffb17 	ldw	r2,-20(fp)
  804c5c:	10bfffc4 	addi	r2,r2,-1
  804c60:	1007883a 	mov	r3,r2
  804c64:	e0bffe17 	ldw	r2,-8(fp)
  804c68:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  804c6c:	e0bffe17 	ldw	r2,-8(fp)
  804c70:	10800883 	ldbu	r2,34(r2)
  804c74:	10803fcc 	andi	r2,r2,255
  804c78:	10800170 	cmpltui	r2,r2,5
  804c7c:	1000061e 	bne	r2,zero,804c98 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  804c80:	e0bffe17 	ldw	r2,-8(fp)
  804c84:	00c00104 	movi	r3,4
  804c88:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  804c8c:	00000206 	br	804c98 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  804c90:	e13ffe17 	ldw	r4,-8(fp)
  804c94:	08049e80 	call	8049e8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  804c98:	e0bffe17 	ldw	r2,-8(fp)
  804c9c:	10800883 	ldbu	r2,34(r2)
  804ca0:	10803fcc 	andi	r2,r2,255
  804ca4:	108000e8 	cmpgeui	r2,r2,3
  804ca8:	103ff91e 	bne	r2,zero,804c90 <__alt_data_end+0xff804c90>
        lcd_scroll_up(sp);
    }
    break;
  804cac:	00002106 	br	804d34 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  804cb0:	e0bffb17 	ldw	r2,-20(fp)
  804cb4:	10800098 	cmpnei	r2,r2,2
  804cb8:	1000201e 	bne	r2,zero,804d3c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  804cbc:	e13ffe17 	ldw	r4,-8(fp)
  804cc0:	080472c0 	call	80472c <lcd_clear_screen>
    break;
  804cc4:	00001d06 	br	804d3c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  804cc8:	e0bffb17 	ldw	r2,-20(fp)
  804ccc:	00801d16 	blt	zero,r2,804d44 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  804cd0:	e0bffe17 	ldw	r2,-8(fp)
  804cd4:	10800843 	ldbu	r2,33(r2)
  804cd8:	10803fcc 	andi	r2,r2,255
  804cdc:	10801428 	cmpgeui	r2,r2,80
  804ce0:	1000181e 	bne	r2,zero,804d44 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  804ce4:	e0bffe17 	ldw	r2,-8(fp)
  804ce8:	10800883 	ldbu	r2,34(r2)
  804cec:	10803fcc 	andi	r2,r2,255
  804cf0:	108018e4 	muli	r2,r2,99
  804cf4:	10801004 	addi	r2,r2,64
  804cf8:	e0fffe17 	ldw	r3,-8(fp)
  804cfc:	1887883a 	add	r3,r3,r2
  804d00:	e0bffe17 	ldw	r2,-8(fp)
  804d04:	10800843 	ldbu	r2,33(r2)
  804d08:	10803fcc 	andi	r2,r2,255
  804d0c:	1889883a 	add	r4,r3,r2
  804d10:	e0bffe17 	ldw	r2,-8(fp)
  804d14:	10800843 	ldbu	r2,33(r2)
  804d18:	10803fcc 	andi	r2,r2,255
  804d1c:	00c01404 	movi	r3,80
  804d20:	1885c83a 	sub	r2,r3,r2
  804d24:	100d883a 	mov	r6,r2
  804d28:	01400804 	movi	r5,32
  804d2c:	08019f40 	call	8019f4 <memset>
    }
    break;
  804d30:	00000406 	br	804d44 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  804d34:	0001883a 	nop
  804d38:	00000306 	br	804d48 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  804d3c:	0001883a 	nop
  804d40:	00000106 	br	804d48 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  804d44:	0001883a 	nop
  }
}
  804d48:	0001883a 	nop
  804d4c:	e037883a 	mov	sp,fp
  804d50:	dfc00117 	ldw	ra,4(sp)
  804d54:	df000017 	ldw	fp,0(sp)
  804d58:	dec00204 	addi	sp,sp,8
  804d5c:	f800283a 	ret

00804d60 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  804d60:	defff304 	addi	sp,sp,-52
  804d64:	dfc00c15 	stw	ra,48(sp)
  804d68:	df000b15 	stw	fp,44(sp)
  804d6c:	df000b04 	addi	fp,sp,44
  804d70:	e13ffc15 	stw	r4,-16(fp)
  804d74:	e17ffd15 	stw	r5,-12(fp)
  804d78:	e1bffe15 	stw	r6,-8(fp)
  804d7c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  804d80:	e0bffe17 	ldw	r2,-8(fp)
  804d84:	e0fffd17 	ldw	r3,-12(fp)
  804d88:	1885883a 	add	r2,r3,r2
  804d8c:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  804d90:	e0bffc17 	ldw	r2,-16(fp)
  804d94:	00c00044 	movi	r3,1
  804d98:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  804d9c:	00009906 	br	805004 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  804da0:	e0bffd17 	ldw	r2,-12(fp)
  804da4:	10800003 	ldbu	r2,0(r2)
  804da8:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  804dac:	e0bffc17 	ldw	r2,-16(fp)
  804db0:	10800903 	ldbu	r2,36(r2)
  804db4:	10803fcc 	andi	r2,r2,255
  804db8:	1080201c 	xori	r2,r2,128
  804dbc:	10bfe004 	addi	r2,r2,-128
  804dc0:	10003716 	blt	r2,zero,804ea0 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  804dc4:	e0bffc17 	ldw	r2,-16(fp)
  804dc8:	10800903 	ldbu	r2,36(r2)
  804dcc:	10803fcc 	andi	r2,r2,255
  804dd0:	1080201c 	xori	r2,r2,128
  804dd4:	10bfe004 	addi	r2,r2,-128
  804dd8:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  804ddc:	e0bffa17 	ldw	r2,-24(fp)
  804de0:	1000031e 	bne	r2,zero,804df0 <altera_avalon_lcd_16207_write+0x90>
  804de4:	e0bff907 	ldb	r2,-28(fp)
  804de8:	108016d8 	cmpnei	r2,r2,91
  804dec:	10000d1e 	bne	r2,zero,804e24 <altera_avalon_lcd_16207_write+0xc4>
  804df0:	e0bffa17 	ldw	r2,-24(fp)
  804df4:	10001826 	beq	r2,zero,804e58 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  804df8:	d0e00f17 	ldw	r3,-32708(gp)
  804dfc:	e0bff907 	ldb	r2,-28(fp)
  804e00:	10800044 	addi	r2,r2,1
  804e04:	1885883a 	add	r2,r3,r2
  804e08:	10800003 	ldbu	r2,0(r2)
  804e0c:	10803fcc 	andi	r2,r2,255
  804e10:	1080010c 	andi	r2,r2,4
  804e14:	1000101e 	bne	r2,zero,804e58 <altera_avalon_lcd_16207_write+0xf8>
  804e18:	e0bff907 	ldb	r2,-28(fp)
  804e1c:	10800ee0 	cmpeqi	r2,r2,59
  804e20:	10000d1e 	bne	r2,zero,804e58 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  804e24:	e0fffc17 	ldw	r3,-16(fp)
  804e28:	e0bffa17 	ldw	r2,-24(fp)
  804e2c:	1885883a 	add	r2,r3,r2
  804e30:	10800a04 	addi	r2,r2,40
  804e34:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  804e38:	e0bff907 	ldb	r2,-28(fp)
  804e3c:	100b883a 	mov	r5,r2
  804e40:	e13ffc17 	ldw	r4,-16(fp)
  804e44:	0804ab40 	call	804ab4 <lcd_handle_escape>

        sp->esccount = -1;
  804e48:	e0bffc17 	ldw	r2,-16(fp)
  804e4c:	00ffffc4 	movi	r3,-1
  804e50:	10c00905 	stb	r3,36(r2)
  804e54:	00006806 	br	804ff8 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  804e58:	e0bffc17 	ldw	r2,-16(fp)
  804e5c:	10800903 	ldbu	r2,36(r2)
  804e60:	10803fcc 	andi	r2,r2,255
  804e64:	108001e8 	cmpgeui	r2,r2,7
  804e68:	1000631e 	bne	r2,zero,804ff8 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  804e6c:	e0fffc17 	ldw	r3,-16(fp)
  804e70:	e0bffa17 	ldw	r2,-24(fp)
  804e74:	1885883a 	add	r2,r3,r2
  804e78:	10800a04 	addi	r2,r2,40
  804e7c:	e0fff903 	ldbu	r3,-28(fp)
  804e80:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  804e84:	e0bffc17 	ldw	r2,-16(fp)
  804e88:	10800903 	ldbu	r2,36(r2)
  804e8c:	10800044 	addi	r2,r2,1
  804e90:	1007883a 	mov	r3,r2
  804e94:	e0bffc17 	ldw	r2,-16(fp)
  804e98:	10c00905 	stb	r3,36(r2)
  804e9c:	00005606 	br	804ff8 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  804ea0:	e0bff907 	ldb	r2,-28(fp)
  804ea4:	108006d8 	cmpnei	r2,r2,27
  804ea8:	1000031e 	bne	r2,zero,804eb8 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  804eac:	e0bffc17 	ldw	r2,-16(fp)
  804eb0:	10000905 	stb	zero,36(r2)
  804eb4:	00005006 	br	804ff8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  804eb8:	e0bff907 	ldb	r2,-28(fp)
  804ebc:	10800358 	cmpnei	r2,r2,13
  804ec0:	1000031e 	bne	r2,zero,804ed0 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  804ec4:	e0bffc17 	ldw	r2,-16(fp)
  804ec8:	10000845 	stb	zero,33(r2)
  804ecc:	00004a06 	br	804ff8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  804ed0:	e0bff907 	ldb	r2,-28(fp)
  804ed4:	10800298 	cmpnei	r2,r2,10
  804ed8:	1000101e 	bne	r2,zero,804f1c <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  804edc:	e0bffc17 	ldw	r2,-16(fp)
  804ee0:	10000845 	stb	zero,33(r2)
      sp->y++;
  804ee4:	e0bffc17 	ldw	r2,-16(fp)
  804ee8:	10800883 	ldbu	r2,34(r2)
  804eec:	10800044 	addi	r2,r2,1
  804ef0:	1007883a 	mov	r3,r2
  804ef4:	e0bffc17 	ldw	r2,-16(fp)
  804ef8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  804efc:	e0bffc17 	ldw	r2,-16(fp)
  804f00:	10800883 	ldbu	r2,34(r2)
  804f04:	10803fcc 	andi	r2,r2,255
  804f08:	108000f0 	cmpltui	r2,r2,3
  804f0c:	10003a1e 	bne	r2,zero,804ff8 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  804f10:	e13ffc17 	ldw	r4,-16(fp)
  804f14:	08049e80 	call	8049e8 <lcd_scroll_up>
  804f18:	00003706 	br	804ff8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  804f1c:	e0bff907 	ldb	r2,-28(fp)
  804f20:	10800218 	cmpnei	r2,r2,8
  804f24:	10000b1e 	bne	r2,zero,804f54 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  804f28:	e0bffc17 	ldw	r2,-16(fp)
  804f2c:	10800843 	ldbu	r2,33(r2)
  804f30:	10803fcc 	andi	r2,r2,255
  804f34:	10003026 	beq	r2,zero,804ff8 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  804f38:	e0bffc17 	ldw	r2,-16(fp)
  804f3c:	10800843 	ldbu	r2,33(r2)
  804f40:	10bfffc4 	addi	r2,r2,-1
  804f44:	1007883a 	mov	r3,r2
  804f48:	e0bffc17 	ldw	r2,-16(fp)
  804f4c:	10c00845 	stb	r3,33(r2)
  804f50:	00002906 	br	804ff8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  804f54:	d0e00f17 	ldw	r3,-32708(gp)
  804f58:	e0bff907 	ldb	r2,-28(fp)
  804f5c:	10800044 	addi	r2,r2,1
  804f60:	1885883a 	add	r2,r3,r2
  804f64:	10800003 	ldbu	r2,0(r2)
  804f68:	10803fcc 	andi	r2,r2,255
  804f6c:	1080201c 	xori	r2,r2,128
  804f70:	10bfe004 	addi	r2,r2,-128
  804f74:	108025cc 	andi	r2,r2,151
  804f78:	10001f26 	beq	r2,zero,804ff8 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  804f7c:	e0bffc17 	ldw	r2,-16(fp)
  804f80:	10800883 	ldbu	r2,34(r2)
  804f84:	10803fcc 	andi	r2,r2,255
  804f88:	108000b0 	cmpltui	r2,r2,2
  804f8c:	1000021e 	bne	r2,zero,804f98 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  804f90:	e13ffc17 	ldw	r4,-16(fp)
  804f94:	08049e80 	call	8049e8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  804f98:	e0bffc17 	ldw	r2,-16(fp)
  804f9c:	10800843 	ldbu	r2,33(r2)
  804fa0:	10803fcc 	andi	r2,r2,255
  804fa4:	10801428 	cmpgeui	r2,r2,80
  804fa8:	10000d1e 	bne	r2,zero,804fe0 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  804fac:	e0bffc17 	ldw	r2,-16(fp)
  804fb0:	10800883 	ldbu	r2,34(r2)
  804fb4:	10c03fcc 	andi	r3,r2,255
  804fb8:	e0bffc17 	ldw	r2,-16(fp)
  804fbc:	10800843 	ldbu	r2,33(r2)
  804fc0:	10803fcc 	andi	r2,r2,255
  804fc4:	e13ffc17 	ldw	r4,-16(fp)
  804fc8:	18c018e4 	muli	r3,r3,99
  804fcc:	20c7883a 	add	r3,r4,r3
  804fd0:	1885883a 	add	r2,r3,r2
  804fd4:	10801004 	addi	r2,r2,64
  804fd8:	e0fff903 	ldbu	r3,-28(fp)
  804fdc:	10c00005 	stb	r3,0(r2)

      sp->x++;
  804fe0:	e0bffc17 	ldw	r2,-16(fp)
  804fe4:	10800843 	ldbu	r2,33(r2)
  804fe8:	10800044 	addi	r2,r2,1
  804fec:	1007883a 	mov	r3,r2
  804ff0:	e0bffc17 	ldw	r2,-16(fp)
  804ff4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  804ff8:	e0bffd17 	ldw	r2,-12(fp)
  804ffc:	10800044 	addi	r2,r2,1
  805000:	e0bffd15 	stw	r2,-12(fp)
  805004:	e0fffd17 	ldw	r3,-12(fp)
  805008:	e0bff817 	ldw	r2,-32(fp)
  80500c:	18bf6436 	bltu	r3,r2,804da0 <__alt_data_end+0xff804da0>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  805010:	00800404 	movi	r2,16
  805014:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805018:	e03ff515 	stw	zero,-44(fp)
  80501c:	00003706 	br	8050fc <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  805020:	00801404 	movi	r2,80
  805024:	e0bff715 	stw	r2,-36(fp)
  805028:	00001106 	br	805070 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80502c:	e0bff717 	ldw	r2,-36(fp)
  805030:	10bfffc4 	addi	r2,r2,-1
  805034:	e13ffc17 	ldw	r4,-16(fp)
  805038:	e0fff517 	ldw	r3,-44(fp)
  80503c:	18c018e4 	muli	r3,r3,99
  805040:	20c7883a 	add	r3,r4,r3
  805044:	1885883a 	add	r2,r3,r2
  805048:	10801004 	addi	r2,r2,64
  80504c:	10800003 	ldbu	r2,0(r2)
  805050:	10803fcc 	andi	r2,r2,255
  805054:	1080201c 	xori	r2,r2,128
  805058:	10bfe004 	addi	r2,r2,-128
  80505c:	10800820 	cmpeqi	r2,r2,32
  805060:	10000626 	beq	r2,zero,80507c <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  805064:	e0bff717 	ldw	r2,-36(fp)
  805068:	10bfffc4 	addi	r2,r2,-1
  80506c:	e0bff715 	stw	r2,-36(fp)
  805070:	e0bff717 	ldw	r2,-36(fp)
  805074:	00bfed16 	blt	zero,r2,80502c <__alt_data_end+0xff80502c>
  805078:	00000106 	br	805080 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80507c:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  805080:	e0bff717 	ldw	r2,-36(fp)
  805084:	10800448 	cmpgei	r2,r2,17
  805088:	1000031e 	bne	r2,zero,805098 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80508c:	00800404 	movi	r2,16
  805090:	e0bff715 	stw	r2,-36(fp)
  805094:	00000306 	br	8050a4 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  805098:	e0bff717 	ldw	r2,-36(fp)
  80509c:	10800044 	addi	r2,r2,1
  8050a0:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  8050a4:	e0bff717 	ldw	r2,-36(fp)
  8050a8:	1009883a 	mov	r4,r2
  8050ac:	e0fffc17 	ldw	r3,-16(fp)
  8050b0:	e0bff517 	ldw	r2,-44(fp)
  8050b4:	108018e4 	muli	r2,r2,99
  8050b8:	1885883a 	add	r2,r3,r2
  8050bc:	10802444 	addi	r2,r2,145
  8050c0:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8050c4:	e0fff617 	ldw	r3,-40(fp)
  8050c8:	e0bff717 	ldw	r2,-36(fp)
  8050cc:	1880020e 	bge	r3,r2,8050d8 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8050d0:	e0bff717 	ldw	r2,-36(fp)
  8050d4:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8050d8:	e0fffc17 	ldw	r3,-16(fp)
  8050dc:	e0bff517 	ldw	r2,-44(fp)
  8050e0:	108018e4 	muli	r2,r2,99
  8050e4:	1885883a 	add	r2,r3,r2
  8050e8:	10802484 	addi	r2,r2,146
  8050ec:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8050f0:	e0bff517 	ldw	r2,-44(fp)
  8050f4:	10800044 	addi	r2,r2,1
  8050f8:	e0bff515 	stw	r2,-44(fp)
  8050fc:	e0bff517 	ldw	r2,-44(fp)
  805100:	10800090 	cmplti	r2,r2,2
  805104:	103fc61e 	bne	r2,zero,805020 <__alt_data_end+0xff805020>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  805108:	e0bff617 	ldw	r2,-40(fp)
  80510c:	10800448 	cmpgei	r2,r2,17
  805110:	1000031e 	bne	r2,zero,805120 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  805114:	e0bffc17 	ldw	r2,-16(fp)
  805118:	10000985 	stb	zero,38(r2)
  80511c:	00002e06 	br	8051d8 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  805120:	e0bff617 	ldw	r2,-40(fp)
  805124:	1085883a 	add	r2,r2,r2
  805128:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80512c:	e0bff617 	ldw	r2,-40(fp)
  805130:	1007883a 	mov	r3,r2
  805134:	e0bffc17 	ldw	r2,-16(fp)
  805138:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80513c:	e03ff515 	stw	zero,-44(fp)
  805140:	00002206 	br	8051cc <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  805144:	e0fffc17 	ldw	r3,-16(fp)
  805148:	e0bff517 	ldw	r2,-44(fp)
  80514c:	108018e4 	muli	r2,r2,99
  805150:	1885883a 	add	r2,r3,r2
  805154:	10802444 	addi	r2,r2,145
  805158:	10800003 	ldbu	r2,0(r2)
  80515c:	10803fcc 	andi	r2,r2,255
  805160:	1080201c 	xori	r2,r2,128
  805164:	10bfe004 	addi	r2,r2,-128
  805168:	10800450 	cmplti	r2,r2,17
  80516c:	1000141e 	bne	r2,zero,8051c0 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  805170:	e0fffc17 	ldw	r3,-16(fp)
  805174:	e0bff517 	ldw	r2,-44(fp)
  805178:	108018e4 	muli	r2,r2,99
  80517c:	1885883a 	add	r2,r3,r2
  805180:	10802444 	addi	r2,r2,145
  805184:	10800003 	ldbu	r2,0(r2)
  805188:	10803fcc 	andi	r2,r2,255
  80518c:	1080201c 	xori	r2,r2,128
  805190:	10bfe004 	addi	r2,r2,-128
  805194:	1004923a 	slli	r2,r2,8
  805198:	e17ff617 	ldw	r5,-40(fp)
  80519c:	1009883a 	mov	r4,r2
  8051a0:	0802f240 	call	802f24 <__divsi3>
  8051a4:	1009883a 	mov	r4,r2
  8051a8:	e0fffc17 	ldw	r3,-16(fp)
  8051ac:	e0bff517 	ldw	r2,-44(fp)
  8051b0:	108018e4 	muli	r2,r2,99
  8051b4:	1885883a 	add	r2,r3,r2
  8051b8:	10802484 	addi	r2,r2,146
  8051bc:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8051c0:	e0bff517 	ldw	r2,-44(fp)
  8051c4:	10800044 	addi	r2,r2,1
  8051c8:	e0bff515 	stw	r2,-44(fp)
  8051cc:	e0bff517 	ldw	r2,-44(fp)
  8051d0:	10800090 	cmplti	r2,r2,2
  8051d4:	103fdb1e 	bne	r2,zero,805144 <__alt_data_end+0xff805144>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8051d8:	e0bffc17 	ldw	r2,-16(fp)
  8051dc:	10800943 	ldbu	r2,37(r2)
  8051e0:	10803fcc 	andi	r2,r2,255
  8051e4:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8051e8:	e13ffc17 	ldw	r4,-16(fp)
  8051ec:	08047fc0 	call	8047fc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8051f0:	e0bffc17 	ldw	r2,-16(fp)
  8051f4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8051f8:	e0bffc17 	ldw	r2,-16(fp)
  8051fc:	10800943 	ldbu	r2,37(r2)
  805200:	10c03fcc 	andi	r3,r2,255
  805204:	e0bffb17 	ldw	r2,-20(fp)
  805208:	18800426 	beq	r3,r2,80521c <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80520c:	e0bffc17 	ldw	r2,-16(fp)
  805210:	00c00044 	movi	r3,1
  805214:	10c009c5 	stb	r3,39(r2)
  }
  805218:	003fef06 	br	8051d8 <__alt_data_end+0xff8051d8>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80521c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  805220:	e0bffe17 	ldw	r2,-8(fp)
}
  805224:	e037883a 	mov	sp,fp
  805228:	dfc00117 	ldw	ra,4(sp)
  80522c:	df000017 	ldw	fp,0(sp)
  805230:	dec00204 	addi	sp,sp,8
  805234:	f800283a 	ret

00805238 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  805238:	defffc04 	addi	sp,sp,-16
  80523c:	dfc00315 	stw	ra,12(sp)
  805240:	df000215 	stw	fp,8(sp)
  805244:	df000204 	addi	fp,sp,8
  805248:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80524c:	e0bfff17 	ldw	r2,-4(fp)
  805250:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  805254:	e0bffe17 	ldw	r2,-8(fp)
  805258:	10800943 	ldbu	r2,37(r2)
  80525c:	10803fcc 	andi	r2,r2,255
  805260:	10c00044 	addi	r3,r2,1
  805264:	e0bffe17 	ldw	r2,-8(fp)
  805268:	10800983 	ldbu	r2,38(r2)
  80526c:	10803fcc 	andi	r2,r2,255
  805270:	18800316 	blt	r3,r2,805280 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  805274:	e0bffe17 	ldw	r2,-8(fp)
  805278:	10000945 	stb	zero,37(r2)
  80527c:	00000606 	br	805298 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  805280:	e0bffe17 	ldw	r2,-8(fp)
  805284:	10800943 	ldbu	r2,37(r2)
  805288:	10800044 	addi	r2,r2,1
  80528c:	1007883a 	mov	r3,r2
  805290:	e0bffe17 	ldw	r2,-8(fp)
  805294:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  805298:	e0bffe17 	ldw	r2,-8(fp)
  80529c:	10800983 	ldbu	r2,38(r2)
  8052a0:	10803fcc 	andi	r2,r2,255
  8052a4:	10000826 	beq	r2,zero,8052c8 <alt_lcd_16207_timeout+0x90>
  8052a8:	e0bffe17 	ldw	r2,-8(fp)
  8052ac:	108009c3 	ldbu	r2,39(r2)
  8052b0:	10803fcc 	andi	r2,r2,255
  8052b4:	1080201c 	xori	r2,r2,128
  8052b8:	10bfe004 	addi	r2,r2,-128
  8052bc:	1000021e 	bne	r2,zero,8052c8 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8052c0:	e13ffe17 	ldw	r4,-8(fp)
  8052c4:	08047fc0 	call	8047fc <lcd_repaint_screen>

  return sp->period;
  8052c8:	e0bffe17 	ldw	r2,-8(fp)
  8052cc:	10800717 	ldw	r2,28(r2)
}
  8052d0:	e037883a 	mov	sp,fp
  8052d4:	dfc00117 	ldw	ra,4(sp)
  8052d8:	df000017 	ldw	fp,0(sp)
  8052dc:	dec00204 	addi	sp,sp,8
  8052e0:	f800283a 	ret

008052e4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8052e4:	defffc04 	addi	sp,sp,-16
  8052e8:	dfc00315 	stw	ra,12(sp)
  8052ec:	df000215 	stw	fp,8(sp)
  8052f0:	df000204 	addi	fp,sp,8
  8052f4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8052f8:	e0bfff17 	ldw	r2,-4(fp)
  8052fc:	10800017 	ldw	r2,0(r2)
  805300:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  805304:	e0bfff17 	ldw	r2,-4(fp)
  805308:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80530c:	010ea604 	movi	r4,15000
  805310:	080683c0 	call	80683c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  805314:	e0bffe17 	ldw	r2,-8(fp)
  805318:	00c00c04 	movi	r3,48
  80531c:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  805320:	01040104 	movi	r4,4100
  805324:	080683c0 	call	80683c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  805328:	e0bffe17 	ldw	r2,-8(fp)
  80532c:	00c00c04 	movi	r3,48
  805330:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  805334:	0100fa04 	movi	r4,1000
  805338:	080683c0 	call	80683c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80533c:	e0bffe17 	ldw	r2,-8(fp)
  805340:	00c00c04 	movi	r3,48
  805344:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  805348:	01400e04 	movi	r5,56
  80534c:	e13fff17 	ldw	r4,-4(fp)
  805350:	080459c0 	call	80459c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  805354:	01400204 	movi	r5,8
  805358:	e13fff17 	ldw	r4,-4(fp)
  80535c:	080459c0 	call	80459c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  805360:	e13fff17 	ldw	r4,-4(fp)
  805364:	080472c0 	call	80472c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  805368:	01400184 	movi	r5,6
  80536c:	e13fff17 	ldw	r4,-4(fp)
  805370:	080459c0 	call	80459c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  805374:	01400304 	movi	r5,12
  805378:	e13fff17 	ldw	r4,-4(fp)
  80537c:	080459c0 	call	80459c <lcd_write_command>

  sp->esccount = -1;
  805380:	e0bfff17 	ldw	r2,-4(fp)
  805384:	00ffffc4 	movi	r3,-1
  805388:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80538c:	e0bfff17 	ldw	r2,-4(fp)
  805390:	10800a04 	addi	r2,r2,40
  805394:	01800204 	movi	r6,8
  805398:	000b883a 	mov	r5,zero
  80539c:	1009883a 	mov	r4,r2
  8053a0:	08019f40 	call	8019f4 <memset>

  sp->scrollpos = 0;
  8053a4:	e0bfff17 	ldw	r2,-4(fp)
  8053a8:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8053ac:	e0bfff17 	ldw	r2,-4(fp)
  8053b0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8053b4:	e0bfff17 	ldw	r2,-4(fp)
  8053b8:	100009c5 	stb	zero,39(r2)
  8053bc:	d0a74617 	ldw	r2,-25320(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8053c0:	01400284 	movi	r5,10
  8053c4:	1009883a 	mov	r4,r2
  8053c8:	080301c0 	call	80301c <__udivsi3>
  8053cc:	1007883a 	mov	r3,r2
  8053d0:	e0bfff17 	ldw	r2,-4(fp)
  8053d4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8053d8:	e0bfff17 	ldw	r2,-4(fp)
  8053dc:	10c00104 	addi	r3,r2,4
  8053e0:	e0bfff17 	ldw	r2,-4(fp)
  8053e4:	10800717 	ldw	r2,28(r2)
  8053e8:	e1ffff17 	ldw	r7,-4(fp)
  8053ec:	01802034 	movhi	r6,128
  8053f0:	31948e04 	addi	r6,r6,21048
  8053f4:	100b883a 	mov	r5,r2
  8053f8:	1809883a 	mov	r4,r3
  8053fc:	0805e3c0 	call	805e3c <alt_alarm_start>
}
  805400:	0001883a 	nop
  805404:	e037883a 	mov	sp,fp
  805408:	dfc00117 	ldw	ra,4(sp)
  80540c:	df000017 	ldw	fp,0(sp)
  805410:	dec00204 	addi	sp,sp,8
  805414:	f800283a 	ret

00805418 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  805418:	defffa04 	addi	sp,sp,-24
  80541c:	dfc00515 	stw	ra,20(sp)
  805420:	df000415 	stw	fp,16(sp)
  805424:	df000404 	addi	fp,sp,16
  805428:	e13ffd15 	stw	r4,-12(fp)
  80542c:	e17ffe15 	stw	r5,-8(fp)
  805430:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  805434:	e0bffd17 	ldw	r2,-12(fp)
  805438:	10800017 	ldw	r2,0(r2)
  80543c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  805440:	e0bffc17 	ldw	r2,-16(fp)
  805444:	10c00a04 	addi	r3,r2,40
  805448:	e0bffd17 	ldw	r2,-12(fp)
  80544c:	10800217 	ldw	r2,8(r2)
  805450:	100f883a 	mov	r7,r2
  805454:	e1bfff17 	ldw	r6,-4(fp)
  805458:	e17ffe17 	ldw	r5,-8(fp)
  80545c:	1809883a 	mov	r4,r3
  805460:	0804d600 	call	804d60 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  805464:	e037883a 	mov	sp,fp
  805468:	dfc00117 	ldw	ra,4(sp)
  80546c:	df000017 	ldw	fp,0(sp)
  805470:	dec00204 	addi	sp,sp,8
  805474:	f800283a 	ret

00805478 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  805478:	defff904 	addi	sp,sp,-28
  80547c:	dfc00615 	stw	ra,24(sp)
  805480:	df000515 	stw	fp,20(sp)
  805484:	df000504 	addi	fp,sp,20
  805488:	e13ffe15 	stw	r4,-8(fp)
  80548c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  805490:	0007883a 	mov	r3,zero
  805494:	e0bffe17 	ldw	r2,-8(fp)
  805498:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80549c:	e0bffe17 	ldw	r2,-8(fp)
  8054a0:	10800104 	addi	r2,r2,4
  8054a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8054a8:	0005303a 	rdctl	r2,status
  8054ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8054b0:	e0fffc17 	ldw	r3,-16(fp)
  8054b4:	00bfff84 	movi	r2,-2
  8054b8:	1884703a 	and	r2,r3,r2
  8054bc:	1001703a 	wrctl	status,r2
  
  return context;
  8054c0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8054c4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  8054c8:	08067340 	call	806734 <alt_tick>
  8054cc:	e0bffb17 	ldw	r2,-20(fp)
  8054d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8054d4:	e0bffd17 	ldw	r2,-12(fp)
  8054d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8054dc:	0001883a 	nop
  8054e0:	e037883a 	mov	sp,fp
  8054e4:	dfc00117 	ldw	ra,4(sp)
  8054e8:	df000017 	ldw	fp,0(sp)
  8054ec:	dec00204 	addi	sp,sp,8
  8054f0:	f800283a 	ret

008054f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8054f4:	defff904 	addi	sp,sp,-28
  8054f8:	dfc00615 	stw	ra,24(sp)
  8054fc:	df000515 	stw	fp,20(sp)
  805500:	df000504 	addi	fp,sp,20
  805504:	e13ffc15 	stw	r4,-16(fp)
  805508:	e17ffd15 	stw	r5,-12(fp)
  80550c:	e1bffe15 	stw	r6,-8(fp)
  805510:	e1ffff15 	stw	r7,-4(fp)
  805514:	e0bfff17 	ldw	r2,-4(fp)
  805518:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80551c:	d0a74617 	ldw	r2,-25320(gp)
  805520:	1000021e 	bne	r2,zero,80552c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  805524:	e0bffb17 	ldw	r2,-20(fp)
  805528:	d0a74615 	stw	r2,-25320(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80552c:	e0bffc17 	ldw	r2,-16(fp)
  805530:	10800104 	addi	r2,r2,4
  805534:	00c001c4 	movi	r3,7
  805538:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  80553c:	01802034 	movhi	r6,128
  805540:	31951e04 	addi	r6,r6,21624
  805544:	e17ffc17 	ldw	r5,-16(fp)
  805548:	e13ffe17 	ldw	r4,-8(fp)
  80554c:	08062c40 	call	8062c4 <alt_irq_register>
#endif  
}
  805550:	0001883a 	nop
  805554:	e037883a 	mov	sp,fp
  805558:	dfc00117 	ldw	ra,4(sp)
  80555c:	df000017 	ldw	fp,0(sp)
  805560:	dec00204 	addi	sp,sp,8
  805564:	f800283a 	ret

00805568 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  805568:	defffa04 	addi	sp,sp,-24
  80556c:	dfc00515 	stw	ra,20(sp)
  805570:	df000415 	stw	fp,16(sp)
  805574:	df000404 	addi	fp,sp,16
  805578:	e13ffd15 	stw	r4,-12(fp)
  80557c:	e17ffe15 	stw	r5,-8(fp)
  805580:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  805584:	e0bffd17 	ldw	r2,-12(fp)
  805588:	10800017 	ldw	r2,0(r2)
  80558c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  805590:	e0bffc17 	ldw	r2,-16(fp)
  805594:	10c00a04 	addi	r3,r2,40
  805598:	e0bffd17 	ldw	r2,-12(fp)
  80559c:	10800217 	ldw	r2,8(r2)
  8055a0:	100f883a 	mov	r7,r2
  8055a4:	e1bfff17 	ldw	r6,-4(fp)
  8055a8:	e17ffe17 	ldw	r5,-8(fp)
  8055ac:	1809883a 	mov	r4,r3
  8055b0:	0805a780 	call	805a78 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8055b4:	e037883a 	mov	sp,fp
  8055b8:	dfc00117 	ldw	ra,4(sp)
  8055bc:	df000017 	ldw	fp,0(sp)
  8055c0:	dec00204 	addi	sp,sp,8
  8055c4:	f800283a 	ret

008055c8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8055c8:	defffa04 	addi	sp,sp,-24
  8055cc:	dfc00515 	stw	ra,20(sp)
  8055d0:	df000415 	stw	fp,16(sp)
  8055d4:	df000404 	addi	fp,sp,16
  8055d8:	e13ffd15 	stw	r4,-12(fp)
  8055dc:	e17ffe15 	stw	r5,-8(fp)
  8055e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8055e4:	e0bffd17 	ldw	r2,-12(fp)
  8055e8:	10800017 	ldw	r2,0(r2)
  8055ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8055f0:	e0bffc17 	ldw	r2,-16(fp)
  8055f4:	10c00a04 	addi	r3,r2,40
  8055f8:	e0bffd17 	ldw	r2,-12(fp)
  8055fc:	10800217 	ldw	r2,8(r2)
  805600:	100f883a 	mov	r7,r2
  805604:	e1bfff17 	ldw	r6,-4(fp)
  805608:	e17ffe17 	ldw	r5,-8(fp)
  80560c:	1809883a 	mov	r4,r3
  805610:	0805c900 	call	805c90 <altera_avalon_uart_write>
      fd->fd_flags);
}
  805614:	e037883a 	mov	sp,fp
  805618:	dfc00117 	ldw	ra,4(sp)
  80561c:	df000017 	ldw	fp,0(sp)
  805620:	dec00204 	addi	sp,sp,8
  805624:	f800283a 	ret

00805628 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  805628:	defffc04 	addi	sp,sp,-16
  80562c:	dfc00315 	stw	ra,12(sp)
  805630:	df000215 	stw	fp,8(sp)
  805634:	df000204 	addi	fp,sp,8
  805638:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80563c:	e0bfff17 	ldw	r2,-4(fp)
  805640:	10800017 	ldw	r2,0(r2)
  805644:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  805648:	e0bffe17 	ldw	r2,-8(fp)
  80564c:	10c00a04 	addi	r3,r2,40
  805650:	e0bfff17 	ldw	r2,-4(fp)
  805654:	10800217 	ldw	r2,8(r2)
  805658:	100b883a 	mov	r5,r2
  80565c:	1809883a 	mov	r4,r3
  805660:	08059e80 	call	8059e8 <altera_avalon_uart_close>
}
  805664:	e037883a 	mov	sp,fp
  805668:	dfc00117 	ldw	ra,4(sp)
  80566c:	df000017 	ldw	fp,0(sp)
  805670:	dec00204 	addi	sp,sp,8
  805674:	f800283a 	ret

00805678 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  805678:	defff904 	addi	sp,sp,-28
  80567c:	dfc00615 	stw	ra,24(sp)
  805680:	df000515 	stw	fp,20(sp)
  805684:	df000504 	addi	fp,sp,20
  805688:	e13ffd15 	stw	r4,-12(fp)
  80568c:	e17ffe15 	stw	r5,-8(fp)
  805690:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  805694:	e0bffd17 	ldw	r2,-12(fp)
  805698:	10800017 	ldw	r2,0(r2)
  80569c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8056a0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8056a4:	1000041e 	bne	r2,zero,8056b8 <altera_avalon_uart_init+0x40>
  8056a8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8056ac:	1000021e 	bne	r2,zero,8056b8 <altera_avalon_uart_init+0x40>
  8056b0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8056b4:	10000226 	beq	r2,zero,8056c0 <altera_avalon_uart_init+0x48>
  8056b8:	00800044 	movi	r2,1
  8056bc:	00000106 	br	8056c4 <altera_avalon_uart_init+0x4c>
  8056c0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8056c4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8056c8:	e0bffc17 	ldw	r2,-16(fp)
  8056cc:	10000d1e 	bne	r2,zero,805704 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8056d0:	e0bffd17 	ldw	r2,-12(fp)
  8056d4:	00c32004 	movi	r3,3200
  8056d8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8056dc:	e0bffb17 	ldw	r2,-20(fp)
  8056e0:	10800304 	addi	r2,r2,12
  8056e4:	e0fffd17 	ldw	r3,-12(fp)
  8056e8:	18c00117 	ldw	r3,4(r3)
  8056ec:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  8056f0:	01802034 	movhi	r6,128
  8056f4:	3195c704 	addi	r6,r6,22300
  8056f8:	e17ffd17 	ldw	r5,-12(fp)
  8056fc:	e13fff17 	ldw	r4,-4(fp)
  805700:	08062c40 	call	8062c4 <alt_irq_register>
#endif  
  }
}
  805704:	0001883a 	nop
  805708:	e037883a 	mov	sp,fp
  80570c:	dfc00117 	ldw	ra,4(sp)
  805710:	df000017 	ldw	fp,0(sp)
  805714:	dec00204 	addi	sp,sp,8
  805718:	f800283a 	ret

0080571c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80571c:	defff904 	addi	sp,sp,-28
  805720:	dfc00615 	stw	ra,24(sp)
  805724:	df000515 	stw	fp,20(sp)
  805728:	df000504 	addi	fp,sp,20
  80572c:	e13ffe15 	stw	r4,-8(fp)
  805730:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  805734:	e0bffe17 	ldw	r2,-8(fp)
  805738:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  80573c:	e0bffb17 	ldw	r2,-20(fp)
  805740:	10800017 	ldw	r2,0(r2)
  805744:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  805748:	e0bffc17 	ldw	r2,-16(fp)
  80574c:	10800204 	addi	r2,r2,8
  805750:	10800037 	ldwio	r2,0(r2)
  805754:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  805758:	e0bffc17 	ldw	r2,-16(fp)
  80575c:	10800204 	addi	r2,r2,8
  805760:	0007883a 	mov	r3,zero
  805764:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  805768:	e0bffc17 	ldw	r2,-16(fp)
  80576c:	10800204 	addi	r2,r2,8
  805770:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  805774:	e0bffd17 	ldw	r2,-12(fp)
  805778:	1080200c 	andi	r2,r2,128
  80577c:	10000326 	beq	r2,zero,80578c <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  805780:	e17ffd17 	ldw	r5,-12(fp)
  805784:	e13ffb17 	ldw	r4,-20(fp)
  805788:	08057bc0 	call	8057bc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80578c:	e0bffd17 	ldw	r2,-12(fp)
  805790:	1081100c 	andi	r2,r2,1088
  805794:	10000326 	beq	r2,zero,8057a4 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  805798:	e17ffd17 	ldw	r5,-12(fp)
  80579c:	e13ffb17 	ldw	r4,-20(fp)
  8057a0:	08058a00 	call	8058a0 <altera_avalon_uart_txirq>
  }
  

}
  8057a4:	0001883a 	nop
  8057a8:	e037883a 	mov	sp,fp
  8057ac:	dfc00117 	ldw	ra,4(sp)
  8057b0:	df000017 	ldw	fp,0(sp)
  8057b4:	dec00204 	addi	sp,sp,8
  8057b8:	f800283a 	ret

008057bc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8057bc:	defffc04 	addi	sp,sp,-16
  8057c0:	df000315 	stw	fp,12(sp)
  8057c4:	df000304 	addi	fp,sp,12
  8057c8:	e13ffe15 	stw	r4,-8(fp)
  8057cc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8057d0:	e0bfff17 	ldw	r2,-4(fp)
  8057d4:	108000cc 	andi	r2,r2,3
  8057d8:	10002c1e 	bne	r2,zero,80588c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8057dc:	e0bffe17 	ldw	r2,-8(fp)
  8057e0:	10800317 	ldw	r2,12(r2)
  8057e4:	e0bffe17 	ldw	r2,-8(fp)
  8057e8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8057ec:	e0bffe17 	ldw	r2,-8(fp)
  8057f0:	10800317 	ldw	r2,12(r2)
  8057f4:	10800044 	addi	r2,r2,1
  8057f8:	10800fcc 	andi	r2,r2,63
  8057fc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  805800:	e0bffe17 	ldw	r2,-8(fp)
  805804:	10800317 	ldw	r2,12(r2)
  805808:	e0fffe17 	ldw	r3,-8(fp)
  80580c:	18c00017 	ldw	r3,0(r3)
  805810:	18c00037 	ldwio	r3,0(r3)
  805814:	1809883a 	mov	r4,r3
  805818:	e0fffe17 	ldw	r3,-8(fp)
  80581c:	1885883a 	add	r2,r3,r2
  805820:	10800704 	addi	r2,r2,28
  805824:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  805828:	e0bffe17 	ldw	r2,-8(fp)
  80582c:	e0fffd17 	ldw	r3,-12(fp)
  805830:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  805834:	e0bffe17 	ldw	r2,-8(fp)
  805838:	10800317 	ldw	r2,12(r2)
  80583c:	10800044 	addi	r2,r2,1
  805840:	10800fcc 	andi	r2,r2,63
  805844:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  805848:	e0bffe17 	ldw	r2,-8(fp)
  80584c:	10c00217 	ldw	r3,8(r2)
  805850:	e0bffd17 	ldw	r2,-12(fp)
  805854:	18800e1e 	bne	r3,r2,805890 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  805858:	e0bffe17 	ldw	r2,-8(fp)
  80585c:	10c00117 	ldw	r3,4(r2)
  805860:	00bfdfc4 	movi	r2,-129
  805864:	1886703a 	and	r3,r3,r2
  805868:	e0bffe17 	ldw	r2,-8(fp)
  80586c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  805870:	e0bffe17 	ldw	r2,-8(fp)
  805874:	10800017 	ldw	r2,0(r2)
  805878:	10800304 	addi	r2,r2,12
  80587c:	e0fffe17 	ldw	r3,-8(fp)
  805880:	18c00117 	ldw	r3,4(r3)
  805884:	10c00035 	stwio	r3,0(r2)
  805888:	00000106 	br	805890 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80588c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  805890:	e037883a 	mov	sp,fp
  805894:	df000017 	ldw	fp,0(sp)
  805898:	dec00104 	addi	sp,sp,4
  80589c:	f800283a 	ret

008058a0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8058a0:	defffb04 	addi	sp,sp,-20
  8058a4:	df000415 	stw	fp,16(sp)
  8058a8:	df000404 	addi	fp,sp,16
  8058ac:	e13ffc15 	stw	r4,-16(fp)
  8058b0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8058b4:	e0bffc17 	ldw	r2,-16(fp)
  8058b8:	10c00417 	ldw	r3,16(r2)
  8058bc:	e0bffc17 	ldw	r2,-16(fp)
  8058c0:	10800517 	ldw	r2,20(r2)
  8058c4:	18803226 	beq	r3,r2,805990 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8058c8:	e0bffc17 	ldw	r2,-16(fp)
  8058cc:	10800617 	ldw	r2,24(r2)
  8058d0:	1080008c 	andi	r2,r2,2
  8058d4:	10000326 	beq	r2,zero,8058e4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8058d8:	e0bffd17 	ldw	r2,-12(fp)
  8058dc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8058e0:	10001d26 	beq	r2,zero,805958 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8058e4:	e0bffc17 	ldw	r2,-16(fp)
  8058e8:	10800417 	ldw	r2,16(r2)
  8058ec:	e0bffc17 	ldw	r2,-16(fp)
  8058f0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8058f4:	e0bffc17 	ldw	r2,-16(fp)
  8058f8:	10800017 	ldw	r2,0(r2)
  8058fc:	10800104 	addi	r2,r2,4
  805900:	e0fffc17 	ldw	r3,-16(fp)
  805904:	18c00417 	ldw	r3,16(r3)
  805908:	e13ffc17 	ldw	r4,-16(fp)
  80590c:	20c7883a 	add	r3,r4,r3
  805910:	18c01704 	addi	r3,r3,92
  805914:	18c00003 	ldbu	r3,0(r3)
  805918:	18c03fcc 	andi	r3,r3,255
  80591c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  805920:	e0bffc17 	ldw	r2,-16(fp)
  805924:	10800417 	ldw	r2,16(r2)
  805928:	10800044 	addi	r2,r2,1
  80592c:	e0fffc17 	ldw	r3,-16(fp)
  805930:	18800415 	stw	r2,16(r3)
  805934:	10c00fcc 	andi	r3,r2,63
  805938:	e0bffc17 	ldw	r2,-16(fp)
  80593c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  805940:	e0bffc17 	ldw	r2,-16(fp)
  805944:	10800117 	ldw	r2,4(r2)
  805948:	10c01014 	ori	r3,r2,64
  80594c:	e0bffc17 	ldw	r2,-16(fp)
  805950:	10c00115 	stw	r3,4(r2)
  805954:	00000e06 	br	805990 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  805958:	e0bffc17 	ldw	r2,-16(fp)
  80595c:	10800017 	ldw	r2,0(r2)
  805960:	10800204 	addi	r2,r2,8
  805964:	10800037 	ldwio	r2,0(r2)
  805968:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80596c:	e0bffd17 	ldw	r2,-12(fp)
  805970:	1082000c 	andi	r2,r2,2048
  805974:	1000061e 	bne	r2,zero,805990 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  805978:	e0bffc17 	ldw	r2,-16(fp)
  80597c:	10c00117 	ldw	r3,4(r2)
  805980:	00bfefc4 	movi	r2,-65
  805984:	1886703a 	and	r3,r3,r2
  805988:	e0bffc17 	ldw	r2,-16(fp)
  80598c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  805990:	e0bffc17 	ldw	r2,-16(fp)
  805994:	10c00417 	ldw	r3,16(r2)
  805998:	e0bffc17 	ldw	r2,-16(fp)
  80599c:	10800517 	ldw	r2,20(r2)
  8059a0:	1880061e 	bne	r3,r2,8059bc <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8059a4:	e0bffc17 	ldw	r2,-16(fp)
  8059a8:	10c00117 	ldw	r3,4(r2)
  8059ac:	00beefc4 	movi	r2,-1089
  8059b0:	1886703a 	and	r3,r3,r2
  8059b4:	e0bffc17 	ldw	r2,-16(fp)
  8059b8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8059bc:	e0bffc17 	ldw	r2,-16(fp)
  8059c0:	10800017 	ldw	r2,0(r2)
  8059c4:	10800304 	addi	r2,r2,12
  8059c8:	e0fffc17 	ldw	r3,-16(fp)
  8059cc:	18c00117 	ldw	r3,4(r3)
  8059d0:	10c00035 	stwio	r3,0(r2)
}
  8059d4:	0001883a 	nop
  8059d8:	e037883a 	mov	sp,fp
  8059dc:	df000017 	ldw	fp,0(sp)
  8059e0:	dec00104 	addi	sp,sp,4
  8059e4:	f800283a 	ret

008059e8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8059e8:	defffd04 	addi	sp,sp,-12
  8059ec:	df000215 	stw	fp,8(sp)
  8059f0:	df000204 	addi	fp,sp,8
  8059f4:	e13ffe15 	stw	r4,-8(fp)
  8059f8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8059fc:	00000506 	br	805a14 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  805a00:	e0bfff17 	ldw	r2,-4(fp)
  805a04:	1090000c 	andi	r2,r2,16384
  805a08:	10000226 	beq	r2,zero,805a14 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  805a0c:	00bffd44 	movi	r2,-11
  805a10:	00000606 	br	805a2c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  805a14:	e0bffe17 	ldw	r2,-8(fp)
  805a18:	10c00417 	ldw	r3,16(r2)
  805a1c:	e0bffe17 	ldw	r2,-8(fp)
  805a20:	10800517 	ldw	r2,20(r2)
  805a24:	18bff61e 	bne	r3,r2,805a00 <__alt_data_end+0xff805a00>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  805a28:	0005883a 	mov	r2,zero
}
  805a2c:	e037883a 	mov	sp,fp
  805a30:	df000017 	ldw	fp,0(sp)
  805a34:	dec00104 	addi	sp,sp,4
  805a38:	f800283a 	ret

00805a3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805a3c:	defffe04 	addi	sp,sp,-8
  805a40:	dfc00115 	stw	ra,4(sp)
  805a44:	df000015 	stw	fp,0(sp)
  805a48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805a4c:	d0a00917 	ldw	r2,-32732(gp)
  805a50:	10000326 	beq	r2,zero,805a60 <alt_get_errno+0x24>
  805a54:	d0a00917 	ldw	r2,-32732(gp)
  805a58:	103ee83a 	callr	r2
  805a5c:	00000106 	br	805a64 <alt_get_errno+0x28>
  805a60:	d0a74104 	addi	r2,gp,-25340
}
  805a64:	e037883a 	mov	sp,fp
  805a68:	dfc00117 	ldw	ra,4(sp)
  805a6c:	df000017 	ldw	fp,0(sp)
  805a70:	dec00204 	addi	sp,sp,8
  805a74:	f800283a 	ret

00805a78 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  805a78:	defff204 	addi	sp,sp,-56
  805a7c:	dfc00d15 	stw	ra,52(sp)
  805a80:	df000c15 	stw	fp,48(sp)
  805a84:	df000c04 	addi	fp,sp,48
  805a88:	e13ffc15 	stw	r4,-16(fp)
  805a8c:	e17ffd15 	stw	r5,-12(fp)
  805a90:	e1bffe15 	stw	r6,-8(fp)
  805a94:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  805a98:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  805a9c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  805aa0:	e0bfff17 	ldw	r2,-4(fp)
  805aa4:	1090000c 	andi	r2,r2,16384
  805aa8:	1005003a 	cmpeq	r2,r2,zero
  805aac:	10803fcc 	andi	r2,r2,255
  805ab0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  805ab4:	00001306 	br	805b04 <altera_avalon_uart_read+0x8c>
    {
      count++;
  805ab8:	e0bff517 	ldw	r2,-44(fp)
  805abc:	10800044 	addi	r2,r2,1
  805ac0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  805ac4:	e0bffd17 	ldw	r2,-12(fp)
  805ac8:	10c00044 	addi	r3,r2,1
  805acc:	e0fffd15 	stw	r3,-12(fp)
  805ad0:	e0fffc17 	ldw	r3,-16(fp)
  805ad4:	18c00217 	ldw	r3,8(r3)
  805ad8:	e13ffc17 	ldw	r4,-16(fp)
  805adc:	20c7883a 	add	r3,r4,r3
  805ae0:	18c00704 	addi	r3,r3,28
  805ae4:	18c00003 	ldbu	r3,0(r3)
  805ae8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  805aec:	e0bffc17 	ldw	r2,-16(fp)
  805af0:	10800217 	ldw	r2,8(r2)
  805af4:	10800044 	addi	r2,r2,1
  805af8:	10c00fcc 	andi	r3,r2,63
  805afc:	e0bffc17 	ldw	r2,-16(fp)
  805b00:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  805b04:	e0fff517 	ldw	r3,-44(fp)
  805b08:	e0bffe17 	ldw	r2,-8(fp)
  805b0c:	1880050e 	bge	r3,r2,805b24 <altera_avalon_uart_read+0xac>
  805b10:	e0bffc17 	ldw	r2,-16(fp)
  805b14:	10c00217 	ldw	r3,8(r2)
  805b18:	e0bffc17 	ldw	r2,-16(fp)
  805b1c:	10800317 	ldw	r2,12(r2)
  805b20:	18bfe51e 	bne	r3,r2,805ab8 <__alt_data_end+0xff805ab8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  805b24:	e0bff517 	ldw	r2,-44(fp)
  805b28:	1000251e 	bne	r2,zero,805bc0 <altera_avalon_uart_read+0x148>
  805b2c:	e0bffc17 	ldw	r2,-16(fp)
  805b30:	10c00217 	ldw	r3,8(r2)
  805b34:	e0bffc17 	ldw	r2,-16(fp)
  805b38:	10800317 	ldw	r2,12(r2)
  805b3c:	1880201e 	bne	r3,r2,805bc0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  805b40:	e0bff617 	ldw	r2,-40(fp)
  805b44:	1000071e 	bne	r2,zero,805b64 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  805b48:	0805a3c0 	call	805a3c <alt_get_errno>
  805b4c:	1007883a 	mov	r3,r2
  805b50:	008002c4 	movi	r2,11
  805b54:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  805b58:	00800044 	movi	r2,1
  805b5c:	e0bff405 	stb	r2,-48(fp)
        break;
  805b60:	00001b06 	br	805bd0 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805b64:	0005303a 	rdctl	r2,status
  805b68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805b6c:	e0fff917 	ldw	r3,-28(fp)
  805b70:	00bfff84 	movi	r2,-2
  805b74:	1884703a 	and	r2,r3,r2
  805b78:	1001703a 	wrctl	status,r2
  
  return context;
  805b7c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  805b80:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  805b84:	e0bffc17 	ldw	r2,-16(fp)
  805b88:	10800117 	ldw	r2,4(r2)
  805b8c:	10c02014 	ori	r3,r2,128
  805b90:	e0bffc17 	ldw	r2,-16(fp)
  805b94:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  805b98:	e0bffc17 	ldw	r2,-16(fp)
  805b9c:	10800017 	ldw	r2,0(r2)
  805ba0:	10800304 	addi	r2,r2,12
  805ba4:	e0fffc17 	ldw	r3,-16(fp)
  805ba8:	18c00117 	ldw	r3,4(r3)
  805bac:	10c00035 	stwio	r3,0(r2)
  805bb0:	e0bff817 	ldw	r2,-32(fp)
  805bb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805bb8:	e0bffa17 	ldw	r2,-24(fp)
  805bbc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  805bc0:	e0bff517 	ldw	r2,-44(fp)
  805bc4:	1000021e 	bne	r2,zero,805bd0 <altera_avalon_uart_read+0x158>
  805bc8:	e0bffe17 	ldw	r2,-8(fp)
  805bcc:	103fcd1e 	bne	r2,zero,805b04 <__alt_data_end+0xff805b04>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805bd0:	0005303a 	rdctl	r2,status
  805bd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805bd8:	e0fffb17 	ldw	r3,-20(fp)
  805bdc:	00bfff84 	movi	r2,-2
  805be0:	1884703a 	and	r2,r3,r2
  805be4:	1001703a 	wrctl	status,r2
  
  return context;
  805be8:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  805bec:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  805bf0:	e0bffc17 	ldw	r2,-16(fp)
  805bf4:	10800117 	ldw	r2,4(r2)
  805bf8:	10c02014 	ori	r3,r2,128
  805bfc:	e0bffc17 	ldw	r2,-16(fp)
  805c00:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  805c04:	e0bffc17 	ldw	r2,-16(fp)
  805c08:	10800017 	ldw	r2,0(r2)
  805c0c:	10800304 	addi	r2,r2,12
  805c10:	e0fffc17 	ldw	r3,-16(fp)
  805c14:	18c00117 	ldw	r3,4(r3)
  805c18:	10c00035 	stwio	r3,0(r2)
  805c1c:	e0bff817 	ldw	r2,-32(fp)
  805c20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805c24:	e0bff717 	ldw	r2,-36(fp)
  805c28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  805c2c:	e0bff403 	ldbu	r2,-48(fp)
  805c30:	10000226 	beq	r2,zero,805c3c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  805c34:	00bffd44 	movi	r2,-11
  805c38:	00000106 	br	805c40 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  805c3c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  805c40:	e037883a 	mov	sp,fp
  805c44:	dfc00117 	ldw	ra,4(sp)
  805c48:	df000017 	ldw	fp,0(sp)
  805c4c:	dec00204 	addi	sp,sp,8
  805c50:	f800283a 	ret

00805c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805c54:	defffe04 	addi	sp,sp,-8
  805c58:	dfc00115 	stw	ra,4(sp)
  805c5c:	df000015 	stw	fp,0(sp)
  805c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805c64:	d0a00917 	ldw	r2,-32732(gp)
  805c68:	10000326 	beq	r2,zero,805c78 <alt_get_errno+0x24>
  805c6c:	d0a00917 	ldw	r2,-32732(gp)
  805c70:	103ee83a 	callr	r2
  805c74:	00000106 	br	805c7c <alt_get_errno+0x28>
  805c78:	d0a74104 	addi	r2,gp,-25340
}
  805c7c:	e037883a 	mov	sp,fp
  805c80:	dfc00117 	ldw	ra,4(sp)
  805c84:	df000017 	ldw	fp,0(sp)
  805c88:	dec00204 	addi	sp,sp,8
  805c8c:	f800283a 	ret

00805c90 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  805c90:	defff204 	addi	sp,sp,-56
  805c94:	dfc00d15 	stw	ra,52(sp)
  805c98:	df000c15 	stw	fp,48(sp)
  805c9c:	df000c04 	addi	fp,sp,48
  805ca0:	e13ffc15 	stw	r4,-16(fp)
  805ca4:	e17ffd15 	stw	r5,-12(fp)
  805ca8:	e1bffe15 	stw	r6,-8(fp)
  805cac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  805cb0:	e0bffe17 	ldw	r2,-8(fp)
  805cb4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  805cb8:	e0bfff17 	ldw	r2,-4(fp)
  805cbc:	1090000c 	andi	r2,r2,16384
  805cc0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  805cc4:	00003c06 	br	805db8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  805cc8:	e0bffc17 	ldw	r2,-16(fp)
  805ccc:	10800517 	ldw	r2,20(r2)
  805cd0:	10800044 	addi	r2,r2,1
  805cd4:	10800fcc 	andi	r2,r2,63
  805cd8:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  805cdc:	e0bffc17 	ldw	r2,-16(fp)
  805ce0:	10c00417 	ldw	r3,16(r2)
  805ce4:	e0bff717 	ldw	r2,-36(fp)
  805ce8:	1880221e 	bne	r3,r2,805d74 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  805cec:	e0bff517 	ldw	r2,-44(fp)
  805cf0:	10000526 	beq	r2,zero,805d08 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  805cf4:	0805c540 	call	805c54 <alt_get_errno>
  805cf8:	1007883a 	mov	r3,r2
  805cfc:	008002c4 	movi	r2,11
  805d00:	18800015 	stw	r2,0(r3)
        break;
  805d04:	00002e06 	br	805dc0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805d08:	0005303a 	rdctl	r2,status
  805d0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805d10:	e0fff917 	ldw	r3,-28(fp)
  805d14:	00bfff84 	movi	r2,-2
  805d18:	1884703a 	and	r2,r3,r2
  805d1c:	1001703a 	wrctl	status,r2
  
  return context;
  805d20:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  805d24:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  805d28:	e0bffc17 	ldw	r2,-16(fp)
  805d2c:	10800117 	ldw	r2,4(r2)
  805d30:	10c11014 	ori	r3,r2,1088
  805d34:	e0bffc17 	ldw	r2,-16(fp)
  805d38:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  805d3c:	e0bffc17 	ldw	r2,-16(fp)
  805d40:	10800017 	ldw	r2,0(r2)
  805d44:	10800304 	addi	r2,r2,12
  805d48:	e0fffc17 	ldw	r3,-16(fp)
  805d4c:	18c00117 	ldw	r3,4(r3)
  805d50:	10c00035 	stwio	r3,0(r2)
  805d54:	e0bff817 	ldw	r2,-32(fp)
  805d58:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805d5c:	e0bff617 	ldw	r2,-40(fp)
  805d60:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  805d64:	e0bffc17 	ldw	r2,-16(fp)
  805d68:	10c00417 	ldw	r3,16(r2)
  805d6c:	e0bff717 	ldw	r2,-36(fp)
  805d70:	18bffc26 	beq	r3,r2,805d64 <__alt_data_end+0xff805d64>
      }
    }

    count--;
  805d74:	e0bff417 	ldw	r2,-48(fp)
  805d78:	10bfffc4 	addi	r2,r2,-1
  805d7c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  805d80:	e0bffc17 	ldw	r2,-16(fp)
  805d84:	10c00517 	ldw	r3,20(r2)
  805d88:	e0bffd17 	ldw	r2,-12(fp)
  805d8c:	11000044 	addi	r4,r2,1
  805d90:	e13ffd15 	stw	r4,-12(fp)
  805d94:	10800003 	ldbu	r2,0(r2)
  805d98:	1009883a 	mov	r4,r2
  805d9c:	e0bffc17 	ldw	r2,-16(fp)
  805da0:	10c5883a 	add	r2,r2,r3
  805da4:	10801704 	addi	r2,r2,92
  805da8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  805dac:	e0bffc17 	ldw	r2,-16(fp)
  805db0:	e0fff717 	ldw	r3,-36(fp)
  805db4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  805db8:	e0bff417 	ldw	r2,-48(fp)
  805dbc:	103fc21e 	bne	r2,zero,805cc8 <__alt_data_end+0xff805cc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805dc0:	0005303a 	rdctl	r2,status
  805dc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805dc8:	e0fffb17 	ldw	r3,-20(fp)
  805dcc:	00bfff84 	movi	r2,-2
  805dd0:	1884703a 	and	r2,r3,r2
  805dd4:	1001703a 	wrctl	status,r2
  
  return context;
  805dd8:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  805ddc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  805de0:	e0bffc17 	ldw	r2,-16(fp)
  805de4:	10800117 	ldw	r2,4(r2)
  805de8:	10c11014 	ori	r3,r2,1088
  805dec:	e0bffc17 	ldw	r2,-16(fp)
  805df0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  805df4:	e0bffc17 	ldw	r2,-16(fp)
  805df8:	10800017 	ldw	r2,0(r2)
  805dfc:	10800304 	addi	r2,r2,12
  805e00:	e0fffc17 	ldw	r3,-16(fp)
  805e04:	18c00117 	ldw	r3,4(r3)
  805e08:	10c00035 	stwio	r3,0(r2)
  805e0c:	e0bff817 	ldw	r2,-32(fp)
  805e10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805e14:	e0bffa17 	ldw	r2,-24(fp)
  805e18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  805e1c:	e0fffe17 	ldw	r3,-8(fp)
  805e20:	e0bff417 	ldw	r2,-48(fp)
  805e24:	1885c83a 	sub	r2,r3,r2
}
  805e28:	e037883a 	mov	sp,fp
  805e2c:	dfc00117 	ldw	ra,4(sp)
  805e30:	df000017 	ldw	fp,0(sp)
  805e34:	dec00204 	addi	sp,sp,8
  805e38:	f800283a 	ret

00805e3c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  805e3c:	defff504 	addi	sp,sp,-44
  805e40:	df000a15 	stw	fp,40(sp)
  805e44:	df000a04 	addi	fp,sp,40
  805e48:	e13ffc15 	stw	r4,-16(fp)
  805e4c:	e17ffd15 	stw	r5,-12(fp)
  805e50:	e1bffe15 	stw	r6,-8(fp)
  805e54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  805e58:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  805e5c:	d0a74617 	ldw	r2,-25320(gp)
  
  if (alt_ticks_per_second ())
  805e60:	10003c26 	beq	r2,zero,805f54 <alt_alarm_start+0x118>
  {
    if (alarm)
  805e64:	e0bffc17 	ldw	r2,-16(fp)
  805e68:	10003826 	beq	r2,zero,805f4c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  805e6c:	e0bffc17 	ldw	r2,-16(fp)
  805e70:	e0fffe17 	ldw	r3,-8(fp)
  805e74:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  805e78:	e0bffc17 	ldw	r2,-16(fp)
  805e7c:	e0ffff17 	ldw	r3,-4(fp)
  805e80:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805e84:	0005303a 	rdctl	r2,status
  805e88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805e8c:	e0fff917 	ldw	r3,-28(fp)
  805e90:	00bfff84 	movi	r2,-2
  805e94:	1884703a 	and	r2,r3,r2
  805e98:	1001703a 	wrctl	status,r2
  
  return context;
  805e9c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  805ea0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  805ea4:	d0a74717 	ldw	r2,-25316(gp)
      
      current_nticks = alt_nticks();
  805ea8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  805eac:	e0fffd17 	ldw	r3,-12(fp)
  805eb0:	e0bff617 	ldw	r2,-40(fp)
  805eb4:	1885883a 	add	r2,r3,r2
  805eb8:	10c00044 	addi	r3,r2,1
  805ebc:	e0bffc17 	ldw	r2,-16(fp)
  805ec0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  805ec4:	e0bffc17 	ldw	r2,-16(fp)
  805ec8:	10c00217 	ldw	r3,8(r2)
  805ecc:	e0bff617 	ldw	r2,-40(fp)
  805ed0:	1880042e 	bgeu	r3,r2,805ee4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  805ed4:	e0bffc17 	ldw	r2,-16(fp)
  805ed8:	00c00044 	movi	r3,1
  805edc:	10c00405 	stb	r3,16(r2)
  805ee0:	00000206 	br	805eec <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  805ee4:	e0bffc17 	ldw	r2,-16(fp)
  805ee8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  805eec:	e0bffc17 	ldw	r2,-16(fp)
  805ef0:	d0e00d04 	addi	r3,gp,-32716
  805ef4:	e0fffa15 	stw	r3,-24(fp)
  805ef8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805efc:	e0bffb17 	ldw	r2,-20(fp)
  805f00:	e0fffa17 	ldw	r3,-24(fp)
  805f04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  805f08:	e0bffa17 	ldw	r2,-24(fp)
  805f0c:	10c00017 	ldw	r3,0(r2)
  805f10:	e0bffb17 	ldw	r2,-20(fp)
  805f14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805f18:	e0bffa17 	ldw	r2,-24(fp)
  805f1c:	10800017 	ldw	r2,0(r2)
  805f20:	e0fffb17 	ldw	r3,-20(fp)
  805f24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  805f28:	e0bffa17 	ldw	r2,-24(fp)
  805f2c:	e0fffb17 	ldw	r3,-20(fp)
  805f30:	10c00015 	stw	r3,0(r2)
  805f34:	e0bff817 	ldw	r2,-32(fp)
  805f38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805f3c:	e0bff717 	ldw	r2,-36(fp)
  805f40:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  805f44:	0005883a 	mov	r2,zero
  805f48:	00000306 	br	805f58 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  805f4c:	00bffa84 	movi	r2,-22
  805f50:	00000106 	br	805f58 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  805f54:	00bfde84 	movi	r2,-134
  }
}
  805f58:	e037883a 	mov	sp,fp
  805f5c:	df000017 	ldw	fp,0(sp)
  805f60:	dec00104 	addi	sp,sp,4
  805f64:	f800283a 	ret

00805f68 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  805f68:	defffe04 	addi	sp,sp,-8
  805f6c:	df000115 	stw	fp,4(sp)
  805f70:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  805f74:	e03fff15 	stw	zero,-4(fp)
  805f78:	00000506 	br	805f90 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  805f7c:	e0bfff17 	ldw	r2,-4(fp)
  805f80:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  805f84:	e0bfff17 	ldw	r2,-4(fp)
  805f88:	10800804 	addi	r2,r2,32
  805f8c:	e0bfff15 	stw	r2,-4(fp)
  805f90:	e0bfff17 	ldw	r2,-4(fp)
  805f94:	10820030 	cmpltui	r2,r2,2048
  805f98:	103ff81e 	bne	r2,zero,805f7c <__alt_data_end+0xff805f7c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  805f9c:	0001883a 	nop
  805fa0:	e037883a 	mov	sp,fp
  805fa4:	df000017 	ldw	fp,0(sp)
  805fa8:	dec00104 	addi	sp,sp,4
  805fac:	f800283a 	ret

00805fb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805fb0:	defffe04 	addi	sp,sp,-8
  805fb4:	dfc00115 	stw	ra,4(sp)
  805fb8:	df000015 	stw	fp,0(sp)
  805fbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805fc0:	d0a00917 	ldw	r2,-32732(gp)
  805fc4:	10000326 	beq	r2,zero,805fd4 <alt_get_errno+0x24>
  805fc8:	d0a00917 	ldw	r2,-32732(gp)
  805fcc:	103ee83a 	callr	r2
  805fd0:	00000106 	br	805fd8 <alt_get_errno+0x28>
  805fd4:	d0a74104 	addi	r2,gp,-25340
}
  805fd8:	e037883a 	mov	sp,fp
  805fdc:	dfc00117 	ldw	ra,4(sp)
  805fe0:	df000017 	ldw	fp,0(sp)
  805fe4:	dec00204 	addi	sp,sp,8
  805fe8:	f800283a 	ret

00805fec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  805fec:	defffa04 	addi	sp,sp,-24
  805ff0:	dfc00515 	stw	ra,20(sp)
  805ff4:	df000415 	stw	fp,16(sp)
  805ff8:	df000404 	addi	fp,sp,16
  805ffc:	e13ffe15 	stw	r4,-8(fp)
  806000:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  806004:	e0bffe17 	ldw	r2,-8(fp)
  806008:	10000326 	beq	r2,zero,806018 <alt_dev_llist_insert+0x2c>
  80600c:	e0bffe17 	ldw	r2,-8(fp)
  806010:	10800217 	ldw	r2,8(r2)
  806014:	1000061e 	bne	r2,zero,806030 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  806018:	0805fb00 	call	805fb0 <alt_get_errno>
  80601c:	1007883a 	mov	r3,r2
  806020:	00800584 	movi	r2,22
  806024:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  806028:	00bffa84 	movi	r2,-22
  80602c:	00001306 	br	80607c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  806030:	e0bffe17 	ldw	r2,-8(fp)
  806034:	e0ffff17 	ldw	r3,-4(fp)
  806038:	e0fffc15 	stw	r3,-16(fp)
  80603c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  806040:	e0bffd17 	ldw	r2,-12(fp)
  806044:	e0fffc17 	ldw	r3,-16(fp)
  806048:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80604c:	e0bffc17 	ldw	r2,-16(fp)
  806050:	10c00017 	ldw	r3,0(r2)
  806054:	e0bffd17 	ldw	r2,-12(fp)
  806058:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80605c:	e0bffc17 	ldw	r2,-16(fp)
  806060:	10800017 	ldw	r2,0(r2)
  806064:	e0fffd17 	ldw	r3,-12(fp)
  806068:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80606c:	e0bffc17 	ldw	r2,-16(fp)
  806070:	e0fffd17 	ldw	r3,-12(fp)
  806074:	10c00015 	stw	r3,0(r2)

  return 0;  
  806078:	0005883a 	mov	r2,zero
}
  80607c:	e037883a 	mov	sp,fp
  806080:	dfc00117 	ldw	ra,4(sp)
  806084:	df000017 	ldw	fp,0(sp)
  806088:	dec00204 	addi	sp,sp,8
  80608c:	f800283a 	ret

00806090 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  806090:	defffd04 	addi	sp,sp,-12
  806094:	dfc00215 	stw	ra,8(sp)
  806098:	df000115 	stw	fp,4(sp)
  80609c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8060a0:	00802034 	movhi	r2,128
  8060a4:	109c3804 	addi	r2,r2,28896
  8060a8:	e0bfff15 	stw	r2,-4(fp)
  8060ac:	00000606 	br	8060c8 <_do_ctors+0x38>
        (*ctor) (); 
  8060b0:	e0bfff17 	ldw	r2,-4(fp)
  8060b4:	10800017 	ldw	r2,0(r2)
  8060b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8060bc:	e0bfff17 	ldw	r2,-4(fp)
  8060c0:	10bfff04 	addi	r2,r2,-4
  8060c4:	e0bfff15 	stw	r2,-4(fp)
  8060c8:	e0ffff17 	ldw	r3,-4(fp)
  8060cc:	00802034 	movhi	r2,128
  8060d0:	109c3904 	addi	r2,r2,28900
  8060d4:	18bff62e 	bgeu	r3,r2,8060b0 <__alt_data_end+0xff8060b0>
        (*ctor) (); 
}
  8060d8:	0001883a 	nop
  8060dc:	e037883a 	mov	sp,fp
  8060e0:	dfc00117 	ldw	ra,4(sp)
  8060e4:	df000017 	ldw	fp,0(sp)
  8060e8:	dec00204 	addi	sp,sp,8
  8060ec:	f800283a 	ret

008060f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8060f0:	defffd04 	addi	sp,sp,-12
  8060f4:	dfc00215 	stw	ra,8(sp)
  8060f8:	df000115 	stw	fp,4(sp)
  8060fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  806100:	00802034 	movhi	r2,128
  806104:	109c3804 	addi	r2,r2,28896
  806108:	e0bfff15 	stw	r2,-4(fp)
  80610c:	00000606 	br	806128 <_do_dtors+0x38>
        (*dtor) (); 
  806110:	e0bfff17 	ldw	r2,-4(fp)
  806114:	10800017 	ldw	r2,0(r2)
  806118:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80611c:	e0bfff17 	ldw	r2,-4(fp)
  806120:	10bfff04 	addi	r2,r2,-4
  806124:	e0bfff15 	stw	r2,-4(fp)
  806128:	e0ffff17 	ldw	r3,-4(fp)
  80612c:	00802034 	movhi	r2,128
  806130:	109c3904 	addi	r2,r2,28900
  806134:	18bff62e 	bgeu	r3,r2,806110 <__alt_data_end+0xff806110>
        (*dtor) (); 
}
  806138:	0001883a 	nop
  80613c:	e037883a 	mov	sp,fp
  806140:	dfc00117 	ldw	ra,4(sp)
  806144:	df000017 	ldw	fp,0(sp)
  806148:	dec00204 	addi	sp,sp,8
  80614c:	f800283a 	ret

00806150 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  806150:	defffe04 	addi	sp,sp,-8
  806154:	dfc00115 	stw	ra,4(sp)
  806158:	df000015 	stw	fp,0(sp)
  80615c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  806160:	01440004 	movi	r5,4096
  806164:	0009883a 	mov	r4,zero
  806168:	0806c240 	call	806c24 <alt_icache_flush>
#endif
}
  80616c:	0001883a 	nop
  806170:	e037883a 	mov	sp,fp
  806174:	dfc00117 	ldw	ra,4(sp)
  806178:	df000017 	ldw	fp,0(sp)
  80617c:	dec00204 	addi	sp,sp,8
  806180:	f800283a 	ret

00806184 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  806184:	defff904 	addi	sp,sp,-28
  806188:	dfc00615 	stw	ra,24(sp)
  80618c:	df000515 	stw	fp,20(sp)
  806190:	df000504 	addi	fp,sp,20
  806194:	e13ffc15 	stw	r4,-16(fp)
  806198:	e17ffd15 	stw	r5,-12(fp)
  80619c:	e1bffe15 	stw	r6,-8(fp)
  8061a0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8061a4:	e1bfff17 	ldw	r6,-4(fp)
  8061a8:	e17ffe17 	ldw	r5,-8(fp)
  8061ac:	e13ffd17 	ldw	r4,-12(fp)
  8061b0:	08065440 	call	806544 <open>
  8061b4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8061b8:	e0bffb17 	ldw	r2,-20(fp)
  8061bc:	10001c16 	blt	r2,zero,806230 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  8061c0:	00802034 	movhi	r2,128
  8061c4:	109f1304 	addi	r2,r2,31820
  8061c8:	e0fffb17 	ldw	r3,-20(fp)
  8061cc:	18c00324 	muli	r3,r3,12
  8061d0:	10c5883a 	add	r2,r2,r3
  8061d4:	10c00017 	ldw	r3,0(r2)
  8061d8:	e0bffc17 	ldw	r2,-16(fp)
  8061dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8061e0:	00802034 	movhi	r2,128
  8061e4:	109f1304 	addi	r2,r2,31820
  8061e8:	e0fffb17 	ldw	r3,-20(fp)
  8061ec:	18c00324 	muli	r3,r3,12
  8061f0:	10c5883a 	add	r2,r2,r3
  8061f4:	10800104 	addi	r2,r2,4
  8061f8:	10c00017 	ldw	r3,0(r2)
  8061fc:	e0bffc17 	ldw	r2,-16(fp)
  806200:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  806204:	00802034 	movhi	r2,128
  806208:	109f1304 	addi	r2,r2,31820
  80620c:	e0fffb17 	ldw	r3,-20(fp)
  806210:	18c00324 	muli	r3,r3,12
  806214:	10c5883a 	add	r2,r2,r3
  806218:	10800204 	addi	r2,r2,8
  80621c:	10c00017 	ldw	r3,0(r2)
  806220:	e0bffc17 	ldw	r2,-16(fp)
  806224:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  806228:	e13ffb17 	ldw	r4,-20(fp)
  80622c:	08037d40 	call	8037d4 <alt_release_fd>
  }
} 
  806230:	0001883a 	nop
  806234:	e037883a 	mov	sp,fp
  806238:	dfc00117 	ldw	ra,4(sp)
  80623c:	df000017 	ldw	fp,0(sp)
  806240:	dec00204 	addi	sp,sp,8
  806244:	f800283a 	ret

00806248 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  806248:	defffb04 	addi	sp,sp,-20
  80624c:	dfc00415 	stw	ra,16(sp)
  806250:	df000315 	stw	fp,12(sp)
  806254:	df000304 	addi	fp,sp,12
  806258:	e13ffd15 	stw	r4,-12(fp)
  80625c:	e17ffe15 	stw	r5,-8(fp)
  806260:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  806264:	01c07fc4 	movi	r7,511
  806268:	01800044 	movi	r6,1
  80626c:	e17ffd17 	ldw	r5,-12(fp)
  806270:	01002034 	movhi	r4,128
  806274:	211f1604 	addi	r4,r4,31832
  806278:	08061840 	call	806184 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80627c:	01c07fc4 	movi	r7,511
  806280:	000d883a 	mov	r6,zero
  806284:	e17ffe17 	ldw	r5,-8(fp)
  806288:	01002034 	movhi	r4,128
  80628c:	211f1304 	addi	r4,r4,31820
  806290:	08061840 	call	806184 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  806294:	01c07fc4 	movi	r7,511
  806298:	01800044 	movi	r6,1
  80629c:	e17fff17 	ldw	r5,-4(fp)
  8062a0:	01002034 	movhi	r4,128
  8062a4:	211f1904 	addi	r4,r4,31844
  8062a8:	08061840 	call	806184 <alt_open_fd>
}  
  8062ac:	0001883a 	nop
  8062b0:	e037883a 	mov	sp,fp
  8062b4:	dfc00117 	ldw	ra,4(sp)
  8062b8:	df000017 	ldw	fp,0(sp)
  8062bc:	dec00204 	addi	sp,sp,8
  8062c0:	f800283a 	ret

008062c4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8062c4:	defff004 	addi	sp,sp,-64
  8062c8:	df000f15 	stw	fp,60(sp)
  8062cc:	df000f04 	addi	fp,sp,60
  8062d0:	e13ffd15 	stw	r4,-12(fp)
  8062d4:	e17ffe15 	stw	r5,-8(fp)
  8062d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  8062dc:	00bffa84 	movi	r2,-22
  8062e0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8062e4:	e0bffd17 	ldw	r2,-12(fp)
  8062e8:	10800828 	cmpgeui	r2,r2,32
  8062ec:	1000501e 	bne	r2,zero,806430 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8062f0:	0005303a 	rdctl	r2,status
  8062f4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8062f8:	e0fff617 	ldw	r3,-40(fp)
  8062fc:	00bfff84 	movi	r2,-2
  806300:	1884703a 	and	r2,r3,r2
  806304:	1001703a 	wrctl	status,r2
  
  return context;
  806308:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80630c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  806310:	00802074 	movhi	r2,129
  806314:	10ab6f04 	addi	r2,r2,-21060
  806318:	e0fffd17 	ldw	r3,-12(fp)
  80631c:	180690fa 	slli	r3,r3,3
  806320:	10c5883a 	add	r2,r2,r3
  806324:	e0ffff17 	ldw	r3,-4(fp)
  806328:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80632c:	00802074 	movhi	r2,129
  806330:	10ab6f04 	addi	r2,r2,-21060
  806334:	e0fffd17 	ldw	r3,-12(fp)
  806338:	180690fa 	slli	r3,r3,3
  80633c:	10c5883a 	add	r2,r2,r3
  806340:	10800104 	addi	r2,r2,4
  806344:	e0fffe17 	ldw	r3,-8(fp)
  806348:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80634c:	e0bfff17 	ldw	r2,-4(fp)
  806350:	10001926 	beq	r2,zero,8063b8 <alt_irq_register+0xf4>
  806354:	e0bffd17 	ldw	r2,-12(fp)
  806358:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80635c:	0005303a 	rdctl	r2,status
  806360:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806364:	e0fff717 	ldw	r3,-36(fp)
  806368:	00bfff84 	movi	r2,-2
  80636c:	1884703a 	and	r2,r3,r2
  806370:	1001703a 	wrctl	status,r2
  
  return context;
  806374:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  806378:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80637c:	00c00044 	movi	r3,1
  806380:	e0bff217 	ldw	r2,-56(fp)
  806384:	1884983a 	sll	r2,r3,r2
  806388:	1007883a 	mov	r3,r2
  80638c:	d0a74517 	ldw	r2,-25324(gp)
  806390:	1884b03a 	or	r2,r3,r2
  806394:	d0a74515 	stw	r2,-25324(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  806398:	d0a74517 	ldw	r2,-25324(gp)
  80639c:	100170fa 	wrctl	ienable,r2
  8063a0:	e0bff817 	ldw	r2,-32(fp)
  8063a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8063a8:	e0bff917 	ldw	r2,-28(fp)
  8063ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8063b0:	0005883a 	mov	r2,zero
  8063b4:	00001906 	br	80641c <alt_irq_register+0x158>
  8063b8:	e0bffd17 	ldw	r2,-12(fp)
  8063bc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8063c0:	0005303a 	rdctl	r2,status
  8063c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8063c8:	e0fffa17 	ldw	r3,-24(fp)
  8063cc:	00bfff84 	movi	r2,-2
  8063d0:	1884703a 	and	r2,r3,r2
  8063d4:	1001703a 	wrctl	status,r2
  
  return context;
  8063d8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8063dc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  8063e0:	00c00044 	movi	r3,1
  8063e4:	e0bff417 	ldw	r2,-48(fp)
  8063e8:	1884983a 	sll	r2,r3,r2
  8063ec:	0084303a 	nor	r2,zero,r2
  8063f0:	1007883a 	mov	r3,r2
  8063f4:	d0a74517 	ldw	r2,-25324(gp)
  8063f8:	1884703a 	and	r2,r3,r2
  8063fc:	d0a74515 	stw	r2,-25324(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  806400:	d0a74517 	ldw	r2,-25324(gp)
  806404:	100170fa 	wrctl	ienable,r2
  806408:	e0bffb17 	ldw	r2,-20(fp)
  80640c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806410:	e0bffc17 	ldw	r2,-16(fp)
  806414:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  806418:	0005883a 	mov	r2,zero
  80641c:	e0bff115 	stw	r2,-60(fp)
  806420:	e0bff317 	ldw	r2,-52(fp)
  806424:	e0bff515 	stw	r2,-44(fp)
  806428:	e0bff517 	ldw	r2,-44(fp)
  80642c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  806430:	e0bff117 	ldw	r2,-60(fp)
}
  806434:	e037883a 	mov	sp,fp
  806438:	df000017 	ldw	fp,0(sp)
  80643c:	dec00104 	addi	sp,sp,4
  806440:	f800283a 	ret

00806444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806444:	defffe04 	addi	sp,sp,-8
  806448:	dfc00115 	stw	ra,4(sp)
  80644c:	df000015 	stw	fp,0(sp)
  806450:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806454:	d0a00917 	ldw	r2,-32732(gp)
  806458:	10000326 	beq	r2,zero,806468 <alt_get_errno+0x24>
  80645c:	d0a00917 	ldw	r2,-32732(gp)
  806460:	103ee83a 	callr	r2
  806464:	00000106 	br	80646c <alt_get_errno+0x28>
  806468:	d0a74104 	addi	r2,gp,-25340
}
  80646c:	e037883a 	mov	sp,fp
  806470:	dfc00117 	ldw	ra,4(sp)
  806474:	df000017 	ldw	fp,0(sp)
  806478:	dec00204 	addi	sp,sp,8
  80647c:	f800283a 	ret

00806480 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  806480:	defffd04 	addi	sp,sp,-12
  806484:	df000215 	stw	fp,8(sp)
  806488:	df000204 	addi	fp,sp,8
  80648c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  806490:	e0bfff17 	ldw	r2,-4(fp)
  806494:	10800217 	ldw	r2,8(r2)
  806498:	10d00034 	orhi	r3,r2,16384
  80649c:	e0bfff17 	ldw	r2,-4(fp)
  8064a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8064a4:	e03ffe15 	stw	zero,-8(fp)
  8064a8:	00001d06 	br	806520 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8064ac:	00802034 	movhi	r2,128
  8064b0:	109f1304 	addi	r2,r2,31820
  8064b4:	e0fffe17 	ldw	r3,-8(fp)
  8064b8:	18c00324 	muli	r3,r3,12
  8064bc:	10c5883a 	add	r2,r2,r3
  8064c0:	10c00017 	ldw	r3,0(r2)
  8064c4:	e0bfff17 	ldw	r2,-4(fp)
  8064c8:	10800017 	ldw	r2,0(r2)
  8064cc:	1880111e 	bne	r3,r2,806514 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8064d0:	00802034 	movhi	r2,128
  8064d4:	109f1304 	addi	r2,r2,31820
  8064d8:	e0fffe17 	ldw	r3,-8(fp)
  8064dc:	18c00324 	muli	r3,r3,12
  8064e0:	10c5883a 	add	r2,r2,r3
  8064e4:	10800204 	addi	r2,r2,8
  8064e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8064ec:	1000090e 	bge	r2,zero,806514 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8064f0:	e0bffe17 	ldw	r2,-8(fp)
  8064f4:	10c00324 	muli	r3,r2,12
  8064f8:	00802034 	movhi	r2,128
  8064fc:	109f1304 	addi	r2,r2,31820
  806500:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  806504:	e0bfff17 	ldw	r2,-4(fp)
  806508:	18800226 	beq	r3,r2,806514 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80650c:	00bffcc4 	movi	r2,-13
  806510:	00000806 	br	806534 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  806514:	e0bffe17 	ldw	r2,-8(fp)
  806518:	10800044 	addi	r2,r2,1
  80651c:	e0bffe15 	stw	r2,-8(fp)
  806520:	d0a00817 	ldw	r2,-32736(gp)
  806524:	1007883a 	mov	r3,r2
  806528:	e0bffe17 	ldw	r2,-8(fp)
  80652c:	18bfdf2e 	bgeu	r3,r2,8064ac <__alt_data_end+0xff8064ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  806530:	0005883a 	mov	r2,zero
}
  806534:	e037883a 	mov	sp,fp
  806538:	df000017 	ldw	fp,0(sp)
  80653c:	dec00104 	addi	sp,sp,4
  806540:	f800283a 	ret

00806544 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  806544:	defff604 	addi	sp,sp,-40
  806548:	dfc00915 	stw	ra,36(sp)
  80654c:	df000815 	stw	fp,32(sp)
  806550:	df000804 	addi	fp,sp,32
  806554:	e13ffd15 	stw	r4,-12(fp)
  806558:	e17ffe15 	stw	r5,-8(fp)
  80655c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  806560:	00bfffc4 	movi	r2,-1
  806564:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  806568:	00bffb44 	movi	r2,-19
  80656c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  806570:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  806574:	d1600604 	addi	r5,gp,-32744
  806578:	e13ffd17 	ldw	r4,-12(fp)
  80657c:	08069e80 	call	8069e8 <alt_find_dev>
  806580:	e0bff815 	stw	r2,-32(fp)
  806584:	e0bff817 	ldw	r2,-32(fp)
  806588:	1000051e 	bne	r2,zero,8065a0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80658c:	e13ffd17 	ldw	r4,-12(fp)
  806590:	0806a780 	call	806a78 <alt_find_file>
  806594:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  806598:	00800044 	movi	r2,1
  80659c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8065a0:	e0bff817 	ldw	r2,-32(fp)
  8065a4:	10002926 	beq	r2,zero,80664c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8065a8:	e13ff817 	ldw	r4,-32(fp)
  8065ac:	0806b800 	call	806b80 <alt_get_fd>
  8065b0:	e0bff915 	stw	r2,-28(fp)
  8065b4:	e0bff917 	ldw	r2,-28(fp)
  8065b8:	1000030e 	bge	r2,zero,8065c8 <open+0x84>
    {
      status = index;
  8065bc:	e0bff917 	ldw	r2,-28(fp)
  8065c0:	e0bffa15 	stw	r2,-24(fp)
  8065c4:	00002306 	br	806654 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  8065c8:	e0bff917 	ldw	r2,-28(fp)
  8065cc:	10c00324 	muli	r3,r2,12
  8065d0:	00802034 	movhi	r2,128
  8065d4:	109f1304 	addi	r2,r2,31820
  8065d8:	1885883a 	add	r2,r3,r2
  8065dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8065e0:	e0fffe17 	ldw	r3,-8(fp)
  8065e4:	00900034 	movhi	r2,16384
  8065e8:	10bfffc4 	addi	r2,r2,-1
  8065ec:	1886703a 	and	r3,r3,r2
  8065f0:	e0bffc17 	ldw	r2,-16(fp)
  8065f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8065f8:	e0bffb17 	ldw	r2,-20(fp)
  8065fc:	1000051e 	bne	r2,zero,806614 <open+0xd0>
  806600:	e13ffc17 	ldw	r4,-16(fp)
  806604:	08064800 	call	806480 <alt_file_locked>
  806608:	e0bffa15 	stw	r2,-24(fp)
  80660c:	e0bffa17 	ldw	r2,-24(fp)
  806610:	10001016 	blt	r2,zero,806654 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  806614:	e0bff817 	ldw	r2,-32(fp)
  806618:	10800317 	ldw	r2,12(r2)
  80661c:	10000826 	beq	r2,zero,806640 <open+0xfc>
  806620:	e0bff817 	ldw	r2,-32(fp)
  806624:	10800317 	ldw	r2,12(r2)
  806628:	e1ffff17 	ldw	r7,-4(fp)
  80662c:	e1bffe17 	ldw	r6,-8(fp)
  806630:	e17ffd17 	ldw	r5,-12(fp)
  806634:	e13ffc17 	ldw	r4,-16(fp)
  806638:	103ee83a 	callr	r2
  80663c:	00000106 	br	806644 <open+0x100>
  806640:	0005883a 	mov	r2,zero
  806644:	e0bffa15 	stw	r2,-24(fp)
  806648:	00000206 	br	806654 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80664c:	00bffb44 	movi	r2,-19
  806650:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  806654:	e0bffa17 	ldw	r2,-24(fp)
  806658:	1000090e 	bge	r2,zero,806680 <open+0x13c>
  {
    alt_release_fd (index);  
  80665c:	e13ff917 	ldw	r4,-28(fp)
  806660:	08037d40 	call	8037d4 <alt_release_fd>
    ALT_ERRNO = -status;
  806664:	08064440 	call	806444 <alt_get_errno>
  806668:	1007883a 	mov	r3,r2
  80666c:	e0bffa17 	ldw	r2,-24(fp)
  806670:	0085c83a 	sub	r2,zero,r2
  806674:	18800015 	stw	r2,0(r3)
    return -1;
  806678:	00bfffc4 	movi	r2,-1
  80667c:	00000106 	br	806684 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  806680:	e0bff917 	ldw	r2,-28(fp)
}
  806684:	e037883a 	mov	sp,fp
  806688:	dfc00117 	ldw	ra,4(sp)
  80668c:	df000017 	ldw	fp,0(sp)
  806690:	dec00204 	addi	sp,sp,8
  806694:	f800283a 	ret

00806698 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  806698:	defffa04 	addi	sp,sp,-24
  80669c:	df000515 	stw	fp,20(sp)
  8066a0:	df000504 	addi	fp,sp,20
  8066a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8066a8:	0005303a 	rdctl	r2,status
  8066ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8066b0:	e0fffc17 	ldw	r3,-16(fp)
  8066b4:	00bfff84 	movi	r2,-2
  8066b8:	1884703a 	and	r2,r3,r2
  8066bc:	1001703a 	wrctl	status,r2
  
  return context;
  8066c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8066c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8066c8:	e0bfff17 	ldw	r2,-4(fp)
  8066cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8066d0:	e0bffd17 	ldw	r2,-12(fp)
  8066d4:	10800017 	ldw	r2,0(r2)
  8066d8:	e0fffd17 	ldw	r3,-12(fp)
  8066dc:	18c00117 	ldw	r3,4(r3)
  8066e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8066e4:	e0bffd17 	ldw	r2,-12(fp)
  8066e8:	10800117 	ldw	r2,4(r2)
  8066ec:	e0fffd17 	ldw	r3,-12(fp)
  8066f0:	18c00017 	ldw	r3,0(r3)
  8066f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8066f8:	e0bffd17 	ldw	r2,-12(fp)
  8066fc:	e0fffd17 	ldw	r3,-12(fp)
  806700:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  806704:	e0bffd17 	ldw	r2,-12(fp)
  806708:	e0fffd17 	ldw	r3,-12(fp)
  80670c:	10c00015 	stw	r3,0(r2)
  806710:	e0bffb17 	ldw	r2,-20(fp)
  806714:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806718:	e0bffe17 	ldw	r2,-8(fp)
  80671c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  806720:	0001883a 	nop
  806724:	e037883a 	mov	sp,fp
  806728:	df000017 	ldw	fp,0(sp)
  80672c:	dec00104 	addi	sp,sp,4
  806730:	f800283a 	ret

00806734 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  806734:	defffb04 	addi	sp,sp,-20
  806738:	dfc00415 	stw	ra,16(sp)
  80673c:	df000315 	stw	fp,12(sp)
  806740:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  806744:	d0a00d17 	ldw	r2,-32716(gp)
  806748:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80674c:	d0a74717 	ldw	r2,-25316(gp)
  806750:	10800044 	addi	r2,r2,1
  806754:	d0a74715 	stw	r2,-25316(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  806758:	00002e06 	br	806814 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80675c:	e0bffd17 	ldw	r2,-12(fp)
  806760:	10800017 	ldw	r2,0(r2)
  806764:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  806768:	e0bffd17 	ldw	r2,-12(fp)
  80676c:	10800403 	ldbu	r2,16(r2)
  806770:	10803fcc 	andi	r2,r2,255
  806774:	10000426 	beq	r2,zero,806788 <alt_tick+0x54>
  806778:	d0a74717 	ldw	r2,-25316(gp)
  80677c:	1000021e 	bne	r2,zero,806788 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  806780:	e0bffd17 	ldw	r2,-12(fp)
  806784:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  806788:	e0bffd17 	ldw	r2,-12(fp)
  80678c:	10800217 	ldw	r2,8(r2)
  806790:	d0e74717 	ldw	r3,-25316(gp)
  806794:	18801d36 	bltu	r3,r2,80680c <alt_tick+0xd8>
  806798:	e0bffd17 	ldw	r2,-12(fp)
  80679c:	10800403 	ldbu	r2,16(r2)
  8067a0:	10803fcc 	andi	r2,r2,255
  8067a4:	1000191e 	bne	r2,zero,80680c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8067a8:	e0bffd17 	ldw	r2,-12(fp)
  8067ac:	10800317 	ldw	r2,12(r2)
  8067b0:	e0fffd17 	ldw	r3,-12(fp)
  8067b4:	18c00517 	ldw	r3,20(r3)
  8067b8:	1809883a 	mov	r4,r3
  8067bc:	103ee83a 	callr	r2
  8067c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8067c4:	e0bfff17 	ldw	r2,-4(fp)
  8067c8:	1000031e 	bne	r2,zero,8067d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8067cc:	e13ffd17 	ldw	r4,-12(fp)
  8067d0:	08066980 	call	806698 <alt_alarm_stop>
  8067d4:	00000d06 	br	80680c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8067d8:	e0bffd17 	ldw	r2,-12(fp)
  8067dc:	10c00217 	ldw	r3,8(r2)
  8067e0:	e0bfff17 	ldw	r2,-4(fp)
  8067e4:	1887883a 	add	r3,r3,r2
  8067e8:	e0bffd17 	ldw	r2,-12(fp)
  8067ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8067f0:	e0bffd17 	ldw	r2,-12(fp)
  8067f4:	10c00217 	ldw	r3,8(r2)
  8067f8:	d0a74717 	ldw	r2,-25316(gp)
  8067fc:	1880032e 	bgeu	r3,r2,80680c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  806800:	e0bffd17 	ldw	r2,-12(fp)
  806804:	00c00044 	movi	r3,1
  806808:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80680c:	e0bffe17 	ldw	r2,-8(fp)
  806810:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  806814:	e0fffd17 	ldw	r3,-12(fp)
  806818:	d0a00d04 	addi	r2,gp,-32716
  80681c:	18bfcf1e 	bne	r3,r2,80675c <__alt_data_end+0xff80675c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  806820:	0001883a 	nop
}
  806824:	0001883a 	nop
  806828:	e037883a 	mov	sp,fp
  80682c:	dfc00117 	ldw	ra,4(sp)
  806830:	df000017 	ldw	fp,0(sp)
  806834:	dec00204 	addi	sp,sp,8
  806838:	f800283a 	ret

0080683c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80683c:	defffd04 	addi	sp,sp,-12
  806840:	dfc00215 	stw	ra,8(sp)
  806844:	df000115 	stw	fp,4(sp)
  806848:	df000104 	addi	fp,sp,4
  80684c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  806850:	e13fff17 	ldw	r4,-4(fp)
  806854:	08068900 	call	806890 <alt_busy_sleep>
}
  806858:	e037883a 	mov	sp,fp
  80685c:	dfc00117 	ldw	ra,4(sp)
  806860:	df000017 	ldw	fp,0(sp)
  806864:	dec00204 	addi	sp,sp,8
  806868:	f800283a 	ret

0080686c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80686c:	deffff04 	addi	sp,sp,-4
  806870:	df000015 	stw	fp,0(sp)
  806874:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  806878:	000170fa 	wrctl	ienable,zero
}
  80687c:	0001883a 	nop
  806880:	e037883a 	mov	sp,fp
  806884:	df000017 	ldw	fp,0(sp)
  806888:	dec00104 	addi	sp,sp,4
  80688c:	f800283a 	ret

00806890 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  806890:	defffa04 	addi	sp,sp,-24
  806894:	dfc00515 	stw	ra,20(sp)
  806898:	df000415 	stw	fp,16(sp)
  80689c:	df000404 	addi	fp,sp,16
  8068a0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8068a4:	008000c4 	movi	r2,3
  8068a8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8068ac:	e0fffd17 	ldw	r3,-12(fp)
  8068b0:	008003f4 	movhi	r2,15
  8068b4:	10909004 	addi	r2,r2,16960
  8068b8:	1885383a 	mul	r2,r3,r2
  8068bc:	100b883a 	mov	r5,r2
  8068c0:	0100bef4 	movhi	r4,763
  8068c4:	213c2004 	addi	r4,r4,-3968
  8068c8:	080301c0 	call	80301c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8068cc:	100b883a 	mov	r5,r2
  8068d0:	01200034 	movhi	r4,32768
  8068d4:	213fffc4 	addi	r4,r4,-1
  8068d8:	080301c0 	call	80301c <__udivsi3>
  8068dc:	100b883a 	mov	r5,r2
  8068e0:	e13fff17 	ldw	r4,-4(fp)
  8068e4:	080301c0 	call	80301c <__udivsi3>
  8068e8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8068ec:	e0bffe17 	ldw	r2,-8(fp)
  8068f0:	10002a26 	beq	r2,zero,80699c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8068f4:	e03ffc15 	stw	zero,-16(fp)
  8068f8:	00001706 	br	806958 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8068fc:	00a00034 	movhi	r2,32768
  806900:	10bfffc4 	addi	r2,r2,-1
  806904:	10bfffc4 	addi	r2,r2,-1
  806908:	103ffe1e 	bne	r2,zero,806904 <__alt_data_end+0xff806904>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80690c:	e0fffd17 	ldw	r3,-12(fp)
  806910:	008003f4 	movhi	r2,15
  806914:	10909004 	addi	r2,r2,16960
  806918:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80691c:	100b883a 	mov	r5,r2
  806920:	0100bef4 	movhi	r4,763
  806924:	213c2004 	addi	r4,r4,-3968
  806928:	080301c0 	call	80301c <__udivsi3>
  80692c:	100b883a 	mov	r5,r2
  806930:	01200034 	movhi	r4,32768
  806934:	213fffc4 	addi	r4,r4,-1
  806938:	080301c0 	call	80301c <__udivsi3>
  80693c:	1007883a 	mov	r3,r2
  806940:	e0bfff17 	ldw	r2,-4(fp)
  806944:	10c5c83a 	sub	r2,r2,r3
  806948:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80694c:	e0bffc17 	ldw	r2,-16(fp)
  806950:	10800044 	addi	r2,r2,1
  806954:	e0bffc15 	stw	r2,-16(fp)
  806958:	e0fffc17 	ldw	r3,-16(fp)
  80695c:	e0bffe17 	ldw	r2,-8(fp)
  806960:	18bfe616 	blt	r3,r2,8068fc <__alt_data_end+0xff8068fc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  806964:	e0fffd17 	ldw	r3,-12(fp)
  806968:	008003f4 	movhi	r2,15
  80696c:	10909004 	addi	r2,r2,16960
  806970:	1885383a 	mul	r2,r3,r2
  806974:	100b883a 	mov	r5,r2
  806978:	0100bef4 	movhi	r4,763
  80697c:	213c2004 	addi	r4,r4,-3968
  806980:	080301c0 	call	80301c <__udivsi3>
  806984:	1007883a 	mov	r3,r2
  806988:	e0bfff17 	ldw	r2,-4(fp)
  80698c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  806990:	10bfffc4 	addi	r2,r2,-1
  806994:	103ffe1e 	bne	r2,zero,806990 <__alt_data_end+0xff806990>
  806998:	00000d06 	br	8069d0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80699c:	e0fffd17 	ldw	r3,-12(fp)
  8069a0:	008003f4 	movhi	r2,15
  8069a4:	10909004 	addi	r2,r2,16960
  8069a8:	1885383a 	mul	r2,r3,r2
  8069ac:	100b883a 	mov	r5,r2
  8069b0:	0100bef4 	movhi	r4,763
  8069b4:	213c2004 	addi	r4,r4,-3968
  8069b8:	080301c0 	call	80301c <__udivsi3>
  8069bc:	1007883a 	mov	r3,r2
  8069c0:	e0bfff17 	ldw	r2,-4(fp)
  8069c4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8069c8:	10bfffc4 	addi	r2,r2,-1
  8069cc:	00bffe16 	blt	zero,r2,8069c8 <__alt_data_end+0xff8069c8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8069d0:	0005883a 	mov	r2,zero
}
  8069d4:	e037883a 	mov	sp,fp
  8069d8:	dfc00117 	ldw	ra,4(sp)
  8069dc:	df000017 	ldw	fp,0(sp)
  8069e0:	dec00204 	addi	sp,sp,8
  8069e4:	f800283a 	ret

008069e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8069e8:	defffa04 	addi	sp,sp,-24
  8069ec:	dfc00515 	stw	ra,20(sp)
  8069f0:	df000415 	stw	fp,16(sp)
  8069f4:	df000404 	addi	fp,sp,16
  8069f8:	e13ffe15 	stw	r4,-8(fp)
  8069fc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  806a00:	e0bfff17 	ldw	r2,-4(fp)
  806a04:	10800017 	ldw	r2,0(r2)
  806a08:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  806a0c:	e13ffe17 	ldw	r4,-8(fp)
  806a10:	08003e40 	call	8003e4 <strlen>
  806a14:	10800044 	addi	r2,r2,1
  806a18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  806a1c:	00000d06 	br	806a54 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  806a20:	e0bffc17 	ldw	r2,-16(fp)
  806a24:	10800217 	ldw	r2,8(r2)
  806a28:	e0fffd17 	ldw	r3,-12(fp)
  806a2c:	180d883a 	mov	r6,r3
  806a30:	e17ffe17 	ldw	r5,-8(fp)
  806a34:	1009883a 	mov	r4,r2
  806a38:	0806d9c0 	call	806d9c <memcmp>
  806a3c:	1000021e 	bne	r2,zero,806a48 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  806a40:	e0bffc17 	ldw	r2,-16(fp)
  806a44:	00000706 	br	806a64 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  806a48:	e0bffc17 	ldw	r2,-16(fp)
  806a4c:	10800017 	ldw	r2,0(r2)
  806a50:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  806a54:	e0fffc17 	ldw	r3,-16(fp)
  806a58:	e0bfff17 	ldw	r2,-4(fp)
  806a5c:	18bff01e 	bne	r3,r2,806a20 <__alt_data_end+0xff806a20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  806a60:	0005883a 	mov	r2,zero
}
  806a64:	e037883a 	mov	sp,fp
  806a68:	dfc00117 	ldw	ra,4(sp)
  806a6c:	df000017 	ldw	fp,0(sp)
  806a70:	dec00204 	addi	sp,sp,8
  806a74:	f800283a 	ret

00806a78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  806a78:	defffb04 	addi	sp,sp,-20
  806a7c:	dfc00415 	stw	ra,16(sp)
  806a80:	df000315 	stw	fp,12(sp)
  806a84:	df000304 	addi	fp,sp,12
  806a88:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  806a8c:	d0a00417 	ldw	r2,-32752(gp)
  806a90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806a94:	00003106 	br	806b5c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  806a98:	e0bffd17 	ldw	r2,-12(fp)
  806a9c:	10800217 	ldw	r2,8(r2)
  806aa0:	1009883a 	mov	r4,r2
  806aa4:	08003e40 	call	8003e4 <strlen>
  806aa8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  806aac:	e0bffd17 	ldw	r2,-12(fp)
  806ab0:	10c00217 	ldw	r3,8(r2)
  806ab4:	e0bffe17 	ldw	r2,-8(fp)
  806ab8:	10bfffc4 	addi	r2,r2,-1
  806abc:	1885883a 	add	r2,r3,r2
  806ac0:	10800003 	ldbu	r2,0(r2)
  806ac4:	10803fcc 	andi	r2,r2,255
  806ac8:	1080201c 	xori	r2,r2,128
  806acc:	10bfe004 	addi	r2,r2,-128
  806ad0:	10800bd8 	cmpnei	r2,r2,47
  806ad4:	1000031e 	bne	r2,zero,806ae4 <alt_find_file+0x6c>
    {
      len -= 1;
  806ad8:	e0bffe17 	ldw	r2,-8(fp)
  806adc:	10bfffc4 	addi	r2,r2,-1
  806ae0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  806ae4:	e0bffe17 	ldw	r2,-8(fp)
  806ae8:	e0ffff17 	ldw	r3,-4(fp)
  806aec:	1885883a 	add	r2,r3,r2
  806af0:	10800003 	ldbu	r2,0(r2)
  806af4:	10803fcc 	andi	r2,r2,255
  806af8:	1080201c 	xori	r2,r2,128
  806afc:	10bfe004 	addi	r2,r2,-128
  806b00:	10800be0 	cmpeqi	r2,r2,47
  806b04:	1000081e 	bne	r2,zero,806b28 <alt_find_file+0xb0>
  806b08:	e0bffe17 	ldw	r2,-8(fp)
  806b0c:	e0ffff17 	ldw	r3,-4(fp)
  806b10:	1885883a 	add	r2,r3,r2
  806b14:	10800003 	ldbu	r2,0(r2)
  806b18:	10803fcc 	andi	r2,r2,255
  806b1c:	1080201c 	xori	r2,r2,128
  806b20:	10bfe004 	addi	r2,r2,-128
  806b24:	10000a1e 	bne	r2,zero,806b50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  806b28:	e0bffd17 	ldw	r2,-12(fp)
  806b2c:	10800217 	ldw	r2,8(r2)
  806b30:	e0fffe17 	ldw	r3,-8(fp)
  806b34:	180d883a 	mov	r6,r3
  806b38:	e17fff17 	ldw	r5,-4(fp)
  806b3c:	1009883a 	mov	r4,r2
  806b40:	0806d9c0 	call	806d9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  806b44:	1000021e 	bne	r2,zero,806b50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  806b48:	e0bffd17 	ldw	r2,-12(fp)
  806b4c:	00000706 	br	806b6c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  806b50:	e0bffd17 	ldw	r2,-12(fp)
  806b54:	10800017 	ldw	r2,0(r2)
  806b58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  806b5c:	e0fffd17 	ldw	r3,-12(fp)
  806b60:	d0a00404 	addi	r2,gp,-32752
  806b64:	18bfcc1e 	bne	r3,r2,806a98 <__alt_data_end+0xff806a98>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  806b68:	0005883a 	mov	r2,zero
}
  806b6c:	e037883a 	mov	sp,fp
  806b70:	dfc00117 	ldw	ra,4(sp)
  806b74:	df000017 	ldw	fp,0(sp)
  806b78:	dec00204 	addi	sp,sp,8
  806b7c:	f800283a 	ret

00806b80 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  806b80:	defffc04 	addi	sp,sp,-16
  806b84:	df000315 	stw	fp,12(sp)
  806b88:	df000304 	addi	fp,sp,12
  806b8c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  806b90:	00bffa04 	movi	r2,-24
  806b94:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806b98:	e03ffd15 	stw	zero,-12(fp)
  806b9c:	00001906 	br	806c04 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  806ba0:	00802034 	movhi	r2,128
  806ba4:	109f1304 	addi	r2,r2,31820
  806ba8:	e0fffd17 	ldw	r3,-12(fp)
  806bac:	18c00324 	muli	r3,r3,12
  806bb0:	10c5883a 	add	r2,r2,r3
  806bb4:	10800017 	ldw	r2,0(r2)
  806bb8:	10000f1e 	bne	r2,zero,806bf8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  806bbc:	00802034 	movhi	r2,128
  806bc0:	109f1304 	addi	r2,r2,31820
  806bc4:	e0fffd17 	ldw	r3,-12(fp)
  806bc8:	18c00324 	muli	r3,r3,12
  806bcc:	10c5883a 	add	r2,r2,r3
  806bd0:	e0ffff17 	ldw	r3,-4(fp)
  806bd4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  806bd8:	d0e00817 	ldw	r3,-32736(gp)
  806bdc:	e0bffd17 	ldw	r2,-12(fp)
  806be0:	1880020e 	bge	r3,r2,806bec <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  806be4:	e0bffd17 	ldw	r2,-12(fp)
  806be8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  806bec:	e0bffd17 	ldw	r2,-12(fp)
  806bf0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  806bf4:	00000606 	br	806c10 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  806bf8:	e0bffd17 	ldw	r2,-12(fp)
  806bfc:	10800044 	addi	r2,r2,1
  806c00:	e0bffd15 	stw	r2,-12(fp)
  806c04:	e0bffd17 	ldw	r2,-12(fp)
  806c08:	10800810 	cmplti	r2,r2,32
  806c0c:	103fe41e 	bne	r2,zero,806ba0 <__alt_data_end+0xff806ba0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  806c10:	e0bffe17 	ldw	r2,-8(fp)
}
  806c14:	e037883a 	mov	sp,fp
  806c18:	df000017 	ldw	fp,0(sp)
  806c1c:	dec00104 	addi	sp,sp,4
  806c20:	f800283a 	ret

00806c24 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  806c24:	defffb04 	addi	sp,sp,-20
  806c28:	df000415 	stw	fp,16(sp)
  806c2c:	df000404 	addi	fp,sp,16
  806c30:	e13ffe15 	stw	r4,-8(fp)
  806c34:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  806c38:	e0bfff17 	ldw	r2,-4(fp)
  806c3c:	10840070 	cmpltui	r2,r2,4097
  806c40:	1000021e 	bne	r2,zero,806c4c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  806c44:	00840004 	movi	r2,4096
  806c48:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  806c4c:	e0fffe17 	ldw	r3,-8(fp)
  806c50:	e0bfff17 	ldw	r2,-4(fp)
  806c54:	1885883a 	add	r2,r3,r2
  806c58:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  806c5c:	e0bffe17 	ldw	r2,-8(fp)
  806c60:	e0bffc15 	stw	r2,-16(fp)
  806c64:	00000506 	br	806c7c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  806c68:	e0bffc17 	ldw	r2,-16(fp)
  806c6c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  806c70:	e0bffc17 	ldw	r2,-16(fp)
  806c74:	10800804 	addi	r2,r2,32
  806c78:	e0bffc15 	stw	r2,-16(fp)
  806c7c:	e0fffc17 	ldw	r3,-16(fp)
  806c80:	e0bffd17 	ldw	r2,-12(fp)
  806c84:	18bff836 	bltu	r3,r2,806c68 <__alt_data_end+0xff806c68>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  806c88:	e0bffe17 	ldw	r2,-8(fp)
  806c8c:	108007cc 	andi	r2,r2,31
  806c90:	10000226 	beq	r2,zero,806c9c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  806c94:	e0bffc17 	ldw	r2,-16(fp)
  806c98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  806c9c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  806ca0:	0001883a 	nop
  806ca4:	e037883a 	mov	sp,fp
  806ca8:	df000017 	ldw	fp,0(sp)
  806cac:	dec00104 	addi	sp,sp,4
  806cb0:	f800283a 	ret

00806cb4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  806cb4:	defffe04 	addi	sp,sp,-8
  806cb8:	df000115 	stw	fp,4(sp)
  806cbc:	df000104 	addi	fp,sp,4
  806cc0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  806cc4:	e0bfff17 	ldw	r2,-4(fp)
  806cc8:	10bffe84 	addi	r2,r2,-6
  806ccc:	10c00428 	cmpgeui	r3,r2,16
  806cd0:	18001a1e 	bne	r3,zero,806d3c <alt_exception_cause_generated_bad_addr+0x88>
  806cd4:	100690ba 	slli	r3,r2,2
  806cd8:	00802034 	movhi	r2,128
  806cdc:	109b3b04 	addi	r2,r2,27884
  806ce0:	1885883a 	add	r2,r3,r2
  806ce4:	10800017 	ldw	r2,0(r2)
  806ce8:	1000683a 	jmp	r2
  806cec:	00806d2c 	andhi	r2,zero,436
  806cf0:	00806d2c 	andhi	r2,zero,436
  806cf4:	00806d3c 	xorhi	r2,zero,436
  806cf8:	00806d3c 	xorhi	r2,zero,436
  806cfc:	00806d3c 	xorhi	r2,zero,436
  806d00:	00806d2c 	andhi	r2,zero,436
  806d04:	00806d34 	movhi	r2,436
  806d08:	00806d3c 	xorhi	r2,zero,436
  806d0c:	00806d2c 	andhi	r2,zero,436
  806d10:	00806d2c 	andhi	r2,zero,436
  806d14:	00806d3c 	xorhi	r2,zero,436
  806d18:	00806d2c 	andhi	r2,zero,436
  806d1c:	00806d34 	movhi	r2,436
  806d20:	00806d3c 	xorhi	r2,zero,436
  806d24:	00806d3c 	xorhi	r2,zero,436
  806d28:	00806d2c 	andhi	r2,zero,436
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  806d2c:	00800044 	movi	r2,1
  806d30:	00000306 	br	806d40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  806d34:	0005883a 	mov	r2,zero
  806d38:	00000106 	br	806d40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  806d3c:	0005883a 	mov	r2,zero
  }
}
  806d40:	e037883a 	mov	sp,fp
  806d44:	df000017 	ldw	fp,0(sp)
  806d48:	dec00104 	addi	sp,sp,4
  806d4c:	f800283a 	ret

00806d50 <atexit>:
  806d50:	200b883a 	mov	r5,r4
  806d54:	000f883a 	mov	r7,zero
  806d58:	000d883a 	mov	r6,zero
  806d5c:	0009883a 	mov	r4,zero
  806d60:	0806e181 	jmpi	806e18 <__register_exitproc>

00806d64 <exit>:
  806d64:	defffe04 	addi	sp,sp,-8
  806d68:	000b883a 	mov	r5,zero
  806d6c:	dc000015 	stw	r16,0(sp)
  806d70:	dfc00115 	stw	ra,4(sp)
  806d74:	2021883a 	mov	r16,r4
  806d78:	0806f300 	call	806f30 <__call_exitprocs>
  806d7c:	00802074 	movhi	r2,129
  806d80:	10a41c04 	addi	r2,r2,-28560
  806d84:	11000017 	ldw	r4,0(r2)
  806d88:	20800f17 	ldw	r2,60(r4)
  806d8c:	10000126 	beq	r2,zero,806d94 <exit+0x30>
  806d90:	103ee83a 	callr	r2
  806d94:	8009883a 	mov	r4,r16
  806d98:	08070b00 	call	8070b0 <_exit>

00806d9c <memcmp>:
  806d9c:	01c000c4 	movi	r7,3
  806da0:	3980192e 	bgeu	r7,r6,806e08 <memcmp+0x6c>
  806da4:	2144b03a 	or	r2,r4,r5
  806da8:	11c4703a 	and	r2,r2,r7
  806dac:	10000f26 	beq	r2,zero,806dec <memcmp+0x50>
  806db0:	20800003 	ldbu	r2,0(r4)
  806db4:	28c00003 	ldbu	r3,0(r5)
  806db8:	10c0151e 	bne	r2,r3,806e10 <memcmp+0x74>
  806dbc:	31bfff84 	addi	r6,r6,-2
  806dc0:	01ffffc4 	movi	r7,-1
  806dc4:	00000406 	br	806dd8 <memcmp+0x3c>
  806dc8:	20800003 	ldbu	r2,0(r4)
  806dcc:	28c00003 	ldbu	r3,0(r5)
  806dd0:	31bfffc4 	addi	r6,r6,-1
  806dd4:	10c00e1e 	bne	r2,r3,806e10 <memcmp+0x74>
  806dd8:	21000044 	addi	r4,r4,1
  806ddc:	29400044 	addi	r5,r5,1
  806de0:	31fff91e 	bne	r6,r7,806dc8 <__alt_data_end+0xff806dc8>
  806de4:	0005883a 	mov	r2,zero
  806de8:	f800283a 	ret
  806dec:	20c00017 	ldw	r3,0(r4)
  806df0:	28800017 	ldw	r2,0(r5)
  806df4:	18bfee1e 	bne	r3,r2,806db0 <__alt_data_end+0xff806db0>
  806df8:	31bfff04 	addi	r6,r6,-4
  806dfc:	21000104 	addi	r4,r4,4
  806e00:	29400104 	addi	r5,r5,4
  806e04:	39bff936 	bltu	r7,r6,806dec <__alt_data_end+0xff806dec>
  806e08:	303fe91e 	bne	r6,zero,806db0 <__alt_data_end+0xff806db0>
  806e0c:	003ff506 	br	806de4 <__alt_data_end+0xff806de4>
  806e10:	10c5c83a 	sub	r2,r2,r3
  806e14:	f800283a 	ret

00806e18 <__register_exitproc>:
  806e18:	defffa04 	addi	sp,sp,-24
  806e1c:	dc000315 	stw	r16,12(sp)
  806e20:	04002074 	movhi	r16,129
  806e24:	84241c04 	addi	r16,r16,-28560
  806e28:	80c00017 	ldw	r3,0(r16)
  806e2c:	dc400415 	stw	r17,16(sp)
  806e30:	dfc00515 	stw	ra,20(sp)
  806e34:	18805217 	ldw	r2,328(r3)
  806e38:	2023883a 	mov	r17,r4
  806e3c:	10003726 	beq	r2,zero,806f1c <__register_exitproc+0x104>
  806e40:	10c00117 	ldw	r3,4(r2)
  806e44:	010007c4 	movi	r4,31
  806e48:	20c00e16 	blt	r4,r3,806e84 <__register_exitproc+0x6c>
  806e4c:	1a000044 	addi	r8,r3,1
  806e50:	8800221e 	bne	r17,zero,806edc <__register_exitproc+0xc4>
  806e54:	18c00084 	addi	r3,r3,2
  806e58:	18c7883a 	add	r3,r3,r3
  806e5c:	18c7883a 	add	r3,r3,r3
  806e60:	12000115 	stw	r8,4(r2)
  806e64:	10c7883a 	add	r3,r2,r3
  806e68:	19400015 	stw	r5,0(r3)
  806e6c:	0005883a 	mov	r2,zero
  806e70:	dfc00517 	ldw	ra,20(sp)
  806e74:	dc400417 	ldw	r17,16(sp)
  806e78:	dc000317 	ldw	r16,12(sp)
  806e7c:	dec00604 	addi	sp,sp,24
  806e80:	f800283a 	ret
  806e84:	00800034 	movhi	r2,0
  806e88:	10800004 	addi	r2,r2,0
  806e8c:	10002626 	beq	r2,zero,806f28 <__register_exitproc+0x110>
  806e90:	01006404 	movi	r4,400
  806e94:	d9400015 	stw	r5,0(sp)
  806e98:	d9800115 	stw	r6,4(sp)
  806e9c:	d9c00215 	stw	r7,8(sp)
  806ea0:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  806ea4:	d9400017 	ldw	r5,0(sp)
  806ea8:	d9800117 	ldw	r6,4(sp)
  806eac:	d9c00217 	ldw	r7,8(sp)
  806eb0:	10001d26 	beq	r2,zero,806f28 <__register_exitproc+0x110>
  806eb4:	81000017 	ldw	r4,0(r16)
  806eb8:	10000115 	stw	zero,4(r2)
  806ebc:	02000044 	movi	r8,1
  806ec0:	22405217 	ldw	r9,328(r4)
  806ec4:	0007883a 	mov	r3,zero
  806ec8:	12400015 	stw	r9,0(r2)
  806ecc:	20805215 	stw	r2,328(r4)
  806ed0:	10006215 	stw	zero,392(r2)
  806ed4:	10006315 	stw	zero,396(r2)
  806ed8:	883fde26 	beq	r17,zero,806e54 <__alt_data_end+0xff806e54>
  806edc:	18c9883a 	add	r4,r3,r3
  806ee0:	2109883a 	add	r4,r4,r4
  806ee4:	1109883a 	add	r4,r2,r4
  806ee8:	21802215 	stw	r6,136(r4)
  806eec:	01800044 	movi	r6,1
  806ef0:	12406217 	ldw	r9,392(r2)
  806ef4:	30cc983a 	sll	r6,r6,r3
  806ef8:	4992b03a 	or	r9,r9,r6
  806efc:	12406215 	stw	r9,392(r2)
  806f00:	21c04215 	stw	r7,264(r4)
  806f04:	01000084 	movi	r4,2
  806f08:	893fd21e 	bne	r17,r4,806e54 <__alt_data_end+0xff806e54>
  806f0c:	11006317 	ldw	r4,396(r2)
  806f10:	218cb03a 	or	r6,r4,r6
  806f14:	11806315 	stw	r6,396(r2)
  806f18:	003fce06 	br	806e54 <__alt_data_end+0xff806e54>
  806f1c:	18805304 	addi	r2,r3,332
  806f20:	18805215 	stw	r2,328(r3)
  806f24:	003fc606 	br	806e40 <__alt_data_end+0xff806e40>
  806f28:	00bfffc4 	movi	r2,-1
  806f2c:	003fd006 	br	806e70 <__alt_data_end+0xff806e70>

00806f30 <__call_exitprocs>:
  806f30:	defff504 	addi	sp,sp,-44
  806f34:	df000915 	stw	fp,36(sp)
  806f38:	dd400615 	stw	r21,24(sp)
  806f3c:	dc800315 	stw	r18,12(sp)
  806f40:	dfc00a15 	stw	ra,40(sp)
  806f44:	ddc00815 	stw	r23,32(sp)
  806f48:	dd800715 	stw	r22,28(sp)
  806f4c:	dd000515 	stw	r20,20(sp)
  806f50:	dcc00415 	stw	r19,16(sp)
  806f54:	dc400215 	stw	r17,8(sp)
  806f58:	dc000115 	stw	r16,4(sp)
  806f5c:	d9000015 	stw	r4,0(sp)
  806f60:	2839883a 	mov	fp,r5
  806f64:	04800044 	movi	r18,1
  806f68:	057fffc4 	movi	r21,-1
  806f6c:	00802074 	movhi	r2,129
  806f70:	10a41c04 	addi	r2,r2,-28560
  806f74:	12000017 	ldw	r8,0(r2)
  806f78:	45005217 	ldw	r20,328(r8)
  806f7c:	44c05204 	addi	r19,r8,328
  806f80:	a0001c26 	beq	r20,zero,806ff4 <__call_exitprocs+0xc4>
  806f84:	a0800117 	ldw	r2,4(r20)
  806f88:	15ffffc4 	addi	r23,r2,-1
  806f8c:	b8000d16 	blt	r23,zero,806fc4 <__call_exitprocs+0x94>
  806f90:	14000044 	addi	r16,r2,1
  806f94:	8421883a 	add	r16,r16,r16
  806f98:	8421883a 	add	r16,r16,r16
  806f9c:	84402004 	addi	r17,r16,128
  806fa0:	a463883a 	add	r17,r20,r17
  806fa4:	a421883a 	add	r16,r20,r16
  806fa8:	e0001e26 	beq	fp,zero,807024 <__call_exitprocs+0xf4>
  806fac:	80804017 	ldw	r2,256(r16)
  806fb0:	e0801c26 	beq	fp,r2,807024 <__call_exitprocs+0xf4>
  806fb4:	bdffffc4 	addi	r23,r23,-1
  806fb8:	843fff04 	addi	r16,r16,-4
  806fbc:	8c7fff04 	addi	r17,r17,-4
  806fc0:	bd7ff91e 	bne	r23,r21,806fa8 <__alt_data_end+0xff806fa8>
  806fc4:	00800034 	movhi	r2,0
  806fc8:	10800004 	addi	r2,r2,0
  806fcc:	10000926 	beq	r2,zero,806ff4 <__call_exitprocs+0xc4>
  806fd0:	a0800117 	ldw	r2,4(r20)
  806fd4:	1000301e 	bne	r2,zero,807098 <__call_exitprocs+0x168>
  806fd8:	a0800017 	ldw	r2,0(r20)
  806fdc:	10003226 	beq	r2,zero,8070a8 <__call_exitprocs+0x178>
  806fe0:	a009883a 	mov	r4,r20
  806fe4:	98800015 	stw	r2,0(r19)
  806fe8:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  806fec:	9d000017 	ldw	r20,0(r19)
  806ff0:	a03fe41e 	bne	r20,zero,806f84 <__alt_data_end+0xff806f84>
  806ff4:	dfc00a17 	ldw	ra,40(sp)
  806ff8:	df000917 	ldw	fp,36(sp)
  806ffc:	ddc00817 	ldw	r23,32(sp)
  807000:	dd800717 	ldw	r22,28(sp)
  807004:	dd400617 	ldw	r21,24(sp)
  807008:	dd000517 	ldw	r20,20(sp)
  80700c:	dcc00417 	ldw	r19,16(sp)
  807010:	dc800317 	ldw	r18,12(sp)
  807014:	dc400217 	ldw	r17,8(sp)
  807018:	dc000117 	ldw	r16,4(sp)
  80701c:	dec00b04 	addi	sp,sp,44
  807020:	f800283a 	ret
  807024:	a0800117 	ldw	r2,4(r20)
  807028:	80c00017 	ldw	r3,0(r16)
  80702c:	10bfffc4 	addi	r2,r2,-1
  807030:	15c01426 	beq	r2,r23,807084 <__call_exitprocs+0x154>
  807034:	80000015 	stw	zero,0(r16)
  807038:	183fde26 	beq	r3,zero,806fb4 <__alt_data_end+0xff806fb4>
  80703c:	95c8983a 	sll	r4,r18,r23
  807040:	a0806217 	ldw	r2,392(r20)
  807044:	a5800117 	ldw	r22,4(r20)
  807048:	2084703a 	and	r2,r4,r2
  80704c:	10000b26 	beq	r2,zero,80707c <__call_exitprocs+0x14c>
  807050:	a0806317 	ldw	r2,396(r20)
  807054:	2088703a 	and	r4,r4,r2
  807058:	20000c1e 	bne	r4,zero,80708c <__call_exitprocs+0x15c>
  80705c:	89400017 	ldw	r5,0(r17)
  807060:	d9000017 	ldw	r4,0(sp)
  807064:	183ee83a 	callr	r3
  807068:	a0800117 	ldw	r2,4(r20)
  80706c:	15bfbf1e 	bne	r2,r22,806f6c <__alt_data_end+0xff806f6c>
  807070:	98800017 	ldw	r2,0(r19)
  807074:	153fcf26 	beq	r2,r20,806fb4 <__alt_data_end+0xff806fb4>
  807078:	003fbc06 	br	806f6c <__alt_data_end+0xff806f6c>
  80707c:	183ee83a 	callr	r3
  807080:	003ff906 	br	807068 <__alt_data_end+0xff807068>
  807084:	a5c00115 	stw	r23,4(r20)
  807088:	003feb06 	br	807038 <__alt_data_end+0xff807038>
  80708c:	89000017 	ldw	r4,0(r17)
  807090:	183ee83a 	callr	r3
  807094:	003ff406 	br	807068 <__alt_data_end+0xff807068>
  807098:	a0800017 	ldw	r2,0(r20)
  80709c:	a027883a 	mov	r19,r20
  8070a0:	1029883a 	mov	r20,r2
  8070a4:	003fb606 	br	806f80 <__alt_data_end+0xff806f80>
  8070a8:	0005883a 	mov	r2,zero
  8070ac:	003ffb06 	br	80709c <__alt_data_end+0xff80709c>

008070b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8070b0:	defffd04 	addi	sp,sp,-12
  8070b4:	df000215 	stw	fp,8(sp)
  8070b8:	df000204 	addi	fp,sp,8
  8070bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8070c0:	0001883a 	nop
  8070c4:	e0bfff17 	ldw	r2,-4(fp)
  8070c8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8070cc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8070d0:	10000226 	beq	r2,zero,8070dc <_exit+0x2c>
    ALT_SIM_FAIL();
  8070d4:	002af070 	cmpltui	zero,zero,43969
  8070d8:	00000106 	br	8070e0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8070dc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8070e0:	003fff06 	br	8070e0 <__alt_data_end+0xff8070e0>
